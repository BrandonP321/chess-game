[{"D:\\code\\personal-projects\\chess-game\\src\\index.js":"1","D:\\code\\personal-projects\\chess-game\\src\\App.js":"2","D:\\code\\personal-projects\\chess-game\\src\\reportWebVitals.js":"3","D:\\code\\personal-projects\\chess-game\\src\\pages\\GameRoom\\index.js":"4","D:\\code\\personal-projects\\chess-game\\src\\classes\\Board.js":"5","D:\\code\\personal-projects\\chess-game\\src\\classes\\Pawn.js":"6","D:\\code\\personal-projects\\chess-game\\src\\classes\\Rook.js":"7","D:\\code\\personal-projects\\chess-game\\src\\classes\\Bishop.js":"8","D:\\code\\personal-projects\\chess-game\\src\\classes\\Queen.js":"9","D:\\code\\personal-projects\\chess-game\\src\\classes\\Knight.js":"10","D:\\code\\personal-projects\\chess-game\\src\\classes\\Piece.js":"11","D:\\code\\personal-projects\\chess-game\\src\\components\\GameBoard\\index.js":"12","D:\\code\\personal-projects\\chess-game\\src\\pages\\Home\\index.js":"13","D:\\code\\personal-projects\\chess-game\\src\\components\\GameBoard\\board.js":"14","D:\\code\\personal-projects\\chess-game\\src\\classes\\King.js":"15"},{"size":500,"mtime":499162500000,"results":"16","hashOfConfig":"17"},{"size":541,"mtime":1608870746308,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"17"},{"size":3887,"mtime":1608882606468,"results":"20","hashOfConfig":"17"},{"size":4713,"mtime":1608616119728,"results":"21","hashOfConfig":"17"},{"size":1402,"mtime":1608882606463,"results":"22","hashOfConfig":"17"},{"size":2445,"mtime":1608882764665,"results":"23","hashOfConfig":"17"},{"size":2689,"mtime":1608882606460,"results":"24","hashOfConfig":"17"},{"size":5187,"mtime":1608882606465,"results":"25","hashOfConfig":"17"},{"size":1222,"mtime":1608882606462,"results":"26","hashOfConfig":"17"},{"size":1285,"mtime":1608882606464,"results":"27","hashOfConfig":"17"},{"size":15172,"mtime":1608882606467,"results":"28","hashOfConfig":"17"},{"size":2135,"mtime":1608882606469,"results":"29","hashOfConfig":"17"},{"size":8160,"mtime":1608883399714,"results":"30","hashOfConfig":"17"},{"size":1094,"mtime":1608883628774,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"b24jsc",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\code\\personal-projects\\chess-game\\src\\index.js",[],["70","71"],"D:\\code\\personal-projects\\chess-game\\src\\App.js",["72"],"import logo from './logo.svg';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport './App.css';\r\nimport GameRoom from './pages/GameRoom'\r\nimport Home from './pages/Home'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path='/'>\r\n            <Home />\r\n          </Route>\r\n          <Route exact path='/game/:room'>\r\n            <GameRoom />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\code\\personal-projects\\chess-game\\src\\reportWebVitals.js",[],"D:\\code\\personal-projects\\chess-game\\src\\pages\\GameRoom\\index.js",["73"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { Modal, Button } from 'react-bootstrap'\r\nimport socketIOClient from 'socket.io-client'\r\nimport GameBoard from '../../components/GameBoard'\r\nimport './index.css'\r\n\r\nconst ENDPOINT = 'http://localhost:8000/game'\r\n// const ENDPOINT = 'https://chess-123-server.herokuapp.com/game'\r\n\r\n\r\nexport default function GameRoom() {\r\n    const { room } = useParams();\r\n\r\n    // show controls the state of the modal\r\n    const [show, setShow] = useState(true)\r\n\r\n    const [username, setUsername] = useState('')\r\n\r\n    const [team, setTeam] = useState()\r\n\r\n    const teamUp = useRef('none')\r\n    const setTeamUp = data => {\r\n        teamUp.current = data\r\n    }\r\n\r\n    const [isSocketConnected, setIsSocketConnected] = useState(false)\r\n    const socket = useRef()\r\n    const setSocket = data => {\r\n        socket.current = data\r\n\r\n        // update socket state, this tells GameBoard.js that we are connected to the \r\n        //socket.io server and it can create socket.io listerners on that file\r\n        setIsSocketConnected(true)\r\n\r\n\r\n        socket.current.on('connect', data => {\r\n            console.log('connected to game name space')\r\n            // make request to join the current room on the server\r\n            socket.current.emit('joinRoom', room)\r\n        })\r\n\r\n        socket.current.on('usernameCreated', color => {\r\n            console.log('username good, color: ' + color)\r\n            // color will tell whether you are white, black, or a watcher\r\n            // re-render board squares to the respective team color\r\n            if (color === 'white') {\r\n                setTeam('white')\r\n                setShow(!show)\r\n            } else if (color === 'black') {\r\n                setTeam('black')\r\n                setShow(!show)\r\n            } else {\r\n                setTeam('watcher')\r\n                setShow(!show)\r\n            }\r\n        })\r\n\r\n        socket.current.on('notEnoughPlayersToStart', () => {\r\n\r\n        })\r\n\r\n        socket.current.on('startGame', team => {\r\n            console.log('game started ', team)\r\n            setTeamUp(team)\r\n        })\r\n\r\n        // send message to server before user leaves page\r\n        window.onbeforeunload = () => {\r\n            socket.current.emit('userLeaving')\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // connect to server main socket\r\n        setSocket(socketIOClient(ENDPOINT))\r\n    }, [])\r\n\r\n    // handles closing of the modal to create a username\r\n    const handleClose = () => {\r\n        setShow(!show)\r\n    }\r\n\r\n    const handleModalInputChange = (event) => {\r\n        const value = event.target.value\r\n        setUsername(value)\r\n    }\r\n\r\n    const attemptUsernameCreate = () => {\r\n        socket.current.emit('createUsername', username)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>hi</h1>\r\n            <GameBoard team={team} socket={socket} username={username} teamUp={teamUp} setTeamUp={setTeamUp} isSocketConnected={isSocketConnected} />\r\n            <Modal\r\n                show={show}\r\n                onHide={handleClose}\r\n                backdrop=\"static\"\r\n                keyboard={false}\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>Create a Username</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <input type='text' className='form-control' value={username} placeholder='Username' onChange={handleModalInputChange} />\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" onClick={attemptUsernameCreate}>Let's Go</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            <button onClick={() => {\r\n                socket.current.emit('beginGame')\r\n            }}>Start Game</button>\r\n        </div>\r\n    )\r\n\r\n}\r\n","D:\\code\\personal-projects\\chess-game\\src\\classes\\Board.js",["74","75","76","77","78","79","80","81"],"const Pawn = require('./Pawn')\r\nconst Knight = require('./Knight')\r\nconst Rook = require('./Rook')\r\nconst Bishop = require('./Bishop')\r\nconst Queen = require('./Queen')\r\n\r\n\r\nclass Board {\r\n    constructor(pieces = []) {\r\n        this.pieces = pieces\r\n        this.letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\n    }\r\n\r\n    addPiece(piece) {\r\n        // add a new piece to the pieces array\r\n        this.pieces.push(piece)\r\n    }\r\n\r\n    removePiece(piece) {\r\n        // remove piece when it is taken off the board\r\n        // this.pieces = this.pieces.filter()\r\n    }\r\n\r\n    getPotentialMoves(pieceLocation) {\r\n        // find which piece is at the given location\r\n        const chosenPiece = this.pieces.filter(piece => piece.currentLocation.letter == pieceLocation.letter && piece.currentLocation.number == pieceLocation.number)[0]\r\n\r\n        // get possible locations of piece\r\n        let possibleLocations = chosenPiece.getPossibleMoves()\r\n\r\n        // locations of friendly pieces blocking a path\r\n        const blockedSpots = []\r\n\r\n        // filter possible locations by pieces locations of other pieces on board\r\n        let availableSpots = possibleLocations.filter(newLocation => {\r\n            // iterate over pieces on board\r\n            for (var i = 0; i < this.pieces.length; i++) {\r\n                let piece = this.pieces[i]\r\n\r\n\r\n                // if piece's location matches potential location and is not friendly\r\n                if (piece.currentLocation.letter === newLocation.letter &&\r\n                    piece.currentLocation.number === newLocation.number) {\r\n                    // if piece being moved is a knight, we don't need to worry about a path being blocked by a friendly piece\r\n                    if (chosenPiece.pieceType === 'knight') {\r\n                        return false\r\n                    } else if (piece.color === chosenPiece.color) {\r\n                        // add location of piece to blockedSpots array\r\n                        blockedSpots.push(piece.currentLocation)\r\n                        // return false to remove this spot option\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n            // return true if nothing has been returned yet\r\n            return true\r\n        })\r\n        \r\n        console.log('spots before removing paths:')\r\n        // if any paths are blocked, remove the blocked spots from possible moves\r\n        if (blockedSpots.length > 0) {\r\n            availableSpots = chosenPiece.removeBlockedPaths(blockedSpots, availableSpots)\r\n        }\r\n\r\n        \r\n        return availableSpots\r\n    }\r\n\r\n    addPiece(piece) {\r\n        this.pieces.push(piece)\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = Board;\r\n\r\n\r\n\r\n\r\n// // add all pieces to board\r\n// const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\n\r\n// const pawns = []\r\n// // create white pawns and push them to the array\r\n// for (let i = 0; i < 8; i++) {\r\n//     let newPawn = new Pawn({ letter: letters[i], number: 2 }, 'white')\r\n    \r\n//     pawns.push(newPawn)\r\n// }\r\n// // create black pawns and push them to the array\r\n// for (let i = 0; i < 8; i++) {\r\n//     let newPawn = new Pawn({ letter: letters[i], number: 7 }, 'black')\r\n    \r\n//     pawns.push(newPawn)\r\n// }\r\n\r\n// const knights = [\r\n//     new Knight({ letter: 'b', number: 1 }, 'white'),\r\n//     new Knight({ letter: 'g', number: 1 }, 'white'),\r\n//     new Knight({ letter: 'b', number: 8 }, 'black'),\r\n//     new Knight({ letter: 'g', number: 8 }, 'black')\r\n// ]\r\n\r\n// const rooks = [\r\n//     new Rook({ letter: 'a', number: 1 }, 'white'),\r\n//     new Rook({ letter: 'h', number: 1 }, 'white'),\r\n//     new Rook({ letter: 'a', number: 8 }, 'black'),\r\n//     new Rook({ letter: 'h', number: 8 }, 'black'),\r\n// ]\r\n\r\n// const bishops = [\r\n//     new Bishop({ letter: 'c', number: 1 }, 'white'),\r\n//     new Bishop({ letter: 'f', number: 1 }, 'white'),\r\n//     new Bishop({ letter: 'c', number: 8 }, 'black'),\r\n//     new Bishop({ letter: 'f', number: 8 }, 'black'),\r\n// ]\r\n\r\n// const queens = [\r\n//     new Queen({ letter: 'd', number: 1 }, 'white'),\r\n//     new Queen({ letter: 'd', number: 8 }, 'black')\r\n// ]\r\n\r\n// // push pieces from their arrays to the new Board\r\n// // const board = new Board([...pawns, ...knights, ...rooks, ...bishops, ...queens])\r\n\r\n// const board = new Board([\r\n//     new Rook({ letter: 'd', number: 3}, 'white'), \r\n//     new Pawn({ letter: 'f', number: 3 }, 'white'),\r\n//     new Pawn({ letter: 'd', number: 1 }, 'white'),\r\n//     new Pawn({ letter: 'a', number: 3 }, 'white'),\r\n//     new Pawn({ letter: 'd', number: 7 }, 'white'),\r\n// ])\r\n\r\n// console.log('moves:')\r\n// console.log(board.getPotentialMoves({ letter: 'd', number: 3 }).length)",["82","83"],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Pawn.js",["84"],"// const Piece = require('./Piece')\r\nimport Piece from './Piece'\r\n\r\nexport default class Pawn extends Piece {\r\n    constructor(startLocation, color) {\r\n        super(startLocation, color)\r\n        this.pieceType = 'pawn'\r\n        this.moveChanges = [\r\n            {\r\n                letter: 0,\r\n                number: this.color == 'black' ? -1: 1\r\n            }\r\n        ]\r\n    }\r\n    \r\n    removeBlockedPaths(blockedSpotsArr, availableSpotsArr) {\r\n        let availableSpots = availableSpotsArr;\r\n\r\n        blockedSpotsArr.forEach(spot => {\r\n            // if spot is on a different letter square than current, ignore since that piece can be attacked\r\n            if (spot.letter !== this.currentLocation.letter) {\r\n                return false\r\n            }\r\n            // if blocked spot is above current, block all spots above it including it\r\n            if (spot.number > this.currentLocation.number) {\r\n                availableSpots = availableSpots.filter(openSpot => openSpot.number >= spot.number && openSpot.letter !== this.currentLocation.letter)\r\n            } else {\r\n                // if blocked spot is below current, block all spots beneath it including it\r\n                availableSpots = availableSpots.filter(openSpot => openSpot.number <= spot.number && openSpot.letter !== this.currentLocation.letter)\r\n            }\r\n        })\r\n\r\n        return availableSpots\r\n    }\r\n}\r\n","D:\\code\\personal-projects\\chess-game\\src\\classes\\Rook.js",[],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Bishop.js",[],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Queen.js",[],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Knight.js",[],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Piece.js",[],"D:\\code\\personal-projects\\chess-game\\src\\components\\GameBoard\\index.js",["85","86","87","88","89","90","91","92","93","94","95","96","97"],"import React, { useState, useEffect, Component, useRef } from 'react'\r\nimport './index.css'\r\nimport board from './board'\r\nimport { useParams } from 'react-router-dom'\r\nimport { render } from '@testing-library/react'\r\n// destructure createBoard file for functions to create & manipulate board\r\nconst { createNewBoardPieces, createWhiteTeamBoard, createBlackTeamBoard, getPotentialMoves } = board\r\n\r\nconst pieceIcons = {\r\n    rook: '<i class=\"fas fa-chess-rook piece-icon\"></i>',\r\n    knight: '<i class=\"fas fa-chess-knight piece-icon\"></i>',\r\n    bishop: '<i class=\"fas fa-chess-bishop piece-icon\"></i>',\r\n    queen: '<i class=\"fas fa-chess-queen piece-icon\"></i>',\r\n    king: '<i class=\"fas fa-chess-king piece-icon\"></i>',\r\n    pawn: '<i class=\"fas fa-chess-pawn piece-icon\"></i>'\r\n}\r\n\r\nconst letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\n\r\nexport default function GameBoard(props) {\r\n    const { team, socket, username, teamUp } = props\r\n\r\n    // indicates whether a piece is about to be removed by a function\r\n    const [doRemovePiece, setDoRemovePiece] = useState(false)\r\n\r\n    const [boardSquaresState, setBoardSquaresState] = useState([])\r\n\r\n    // reference will be same as boardSquaresState but will be used as a reference for functions rather than for rendering the board\r\n    const boardSquaresRef = useRef([])\r\n    const setBoardSquaresRef = data => {\r\n        boardSquaresRef.current = data\r\n    }\r\n\r\n    // const [pieces, setPieces] = useState([])\r\n    const pieces = useRef([])\r\n    const setPieces = data => {\r\n        pieces.current = data\r\n        console.log('should render pieces')\r\n        console.log(boardSquaresRef.current)\r\n        if (pieces.current.length > 0 && boardSquaresRef.current.length > 0) {\r\n            console.log('rendering pieces from setting pieces array')\r\n            renderPieces()\r\n        }\r\n    }\r\n\r\n    const currentlySelectedPiece = useRef({})\r\n    const setCurrentlySelectedPiece = data => {\r\n        currentlySelectedPiece.current = data\r\n    }\r\n    // const [selectedPieceOpenSpots, setSelectedPieceOpenSpots] = useState([])\r\n    const selectedPieceOpenSpots = useRef([])\r\n\r\n    // when user changes this ref, also update the shown circles on the board\r\n    const setSelectedPieceOpenSpots = data => {\r\n        selectedPieceOpenSpots.current = data\r\n\r\n        // first make sure all circles are hidden\r\n        document.querySelectorAll('.square-available-circle').forEach(circle => {\r\n            circle.style.opacity = 0\r\n        })\r\n\r\n        // now show a circle on each square that is available\r\n        selectedPieceOpenSpots.current.forEach(square => {\r\n            // get reference to square at the given loaction\r\n            const squareNode = document.querySelector(`[data-location=${square.letter + square.number}]`)\r\n            // get reference to ciricle inside of square node\r\n            const circle = squareNode.children[0]\r\n            // update opacity of the circle\r\n            circle.style.opacity = .6\r\n        })\r\n    }\r\n\r\n    // on component load, ...\r\n    useEffect(() => {\r\n        console.log(1)\r\n        // generate all board pieces and add them to the state\r\n        setPieces(createNewBoardPieces())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (socket) {\r\n            socket.on('opponentMove', move => {\r\n                console.log(move)\r\n                forceMove(move.startLocation, move.endLocation)\r\n            })\r\n        }\r\n    }, [socket])\r\n\r\n    // render board when the team is changed\r\n    useEffect(() => {\r\n        if (team === 'white' || team === 'watcher') {\r\n            createTeamBoard('white')\r\n        } else if (team === 'black') {\r\n            createTeamBoard('black');\r\n        }\r\n    }, [team])\r\n\r\n    useEffect(() => {\r\n        if (boardSquaresState.length > 0 && pieces.current.length > 0) {\r\n            // update board squares reference to contain up to date version of board\r\n            setBoardSquaresRef(boardSquaresState)\r\n            renderPieces()\r\n            // now that boards are loaded back on to the page, add event listeners to each square\r\n            createClickEventListener()\r\n        }\r\n    }, [boardSquaresState])\r\n\r\n    // function to get reference to piece instance in state array of all pieces\r\n    const getPieceReference = (location) => {\r\n        const pieceArr = pieces.current.filter(piece => {\r\n            const { letter, number } = piece.currentLocation;\r\n            return letter === location.letter && number === location.number\r\n        })\r\n        const piece = pieceArr[0]\r\n        return piece\r\n    }\r\n\r\n    const updatePieceLocation = (currentLocation, newLocation) => {\r\n        const piece = getPieceReference(currentLocation)\r\n\r\n        piece.currentLocation = { letter: newLocation.letter, number: newLocation.number }\r\n    }\r\n\r\n    const addPiece = (piece) => {\r\n        setPieces([...pieces.current, piece])\r\n    }\r\n\r\n    const removePiece = (pieceLocation) => {\r\n        // get pieces from array of pieces excpet piece to remove\r\n        const newPiecesArr = pieces.current.filter(piece => {\r\n            const { letter, number } = piece.currentLocation\r\n\r\n            return letter !== pieceLocation.letter || number !== pieceLocation.number\r\n        })\r\n\r\n        return newPiecesArr\r\n    }\r\n\r\n    const movePiece = (selectedPiece, newLocation) => {\r\n        // get piece at clicked spot, will be null if no piece\r\n        const pieceAtNewSpot = getPieceReference(newLocation)\r\n\r\n        // this is an array of length 1 if square is open\r\n        const newSquareisOpen = selectedPieceOpenSpots.current.filter(spot => spot.letter === newLocation.letter && spot.number === newLocation.number)\r\n        // if new square is not available, return false\r\n        if (newSquareisOpen.length === 0) {\r\n            return false\r\n        } else {\r\n            // send message to server that a piece was just moved\r\n            socket.emit('userMovedPiece', { startLocation: selectedPiece.currentLocation, endLocation: newLocation })\r\n\r\n            // if there is another piece on that square, remove it from the state\r\n            if (pieceAtNewSpot) {\r\n                // signify that a piece is being moved\r\n                setDoRemovePiece(true)\r\n                // remove piece at the new location\r\n                const newPiecesArr = removePiece(newLocation)\r\n                // update the location of the moved piece\r\n                updatePieceLocation(selectedPiece.currentLocation, newLocation)\r\n                // update pieces state with new array of pieces\r\n                setPieces(newPiecesArr)\r\n            } else {\r\n                // if no piece is at new square, just update the pieces on the board\r\n                selectedPiece.setCurrentLocation({ letter: newLocation.letter, number: newLocation.number })\r\n                renderPieces();\r\n            }\r\n        }\r\n    }\r\n\r\n    // force a piece to move if server sends opponent's move\r\n    const forceMove = (startLocation, newLocation) => {\r\n        const selectedPiece = getPieceReference(startLocation)\r\n        const pieceAtNewSpot = getPieceReference(newLocation)\r\n\r\n        // if there is another piece on that square, remove it from the state\r\n        if (pieceAtNewSpot) {\r\n            // signify that a piece is being moved\r\n            setDoRemovePiece(true)\r\n            // remove piece at the new location\r\n            const newPiecesArr = removePiece(newLocation)\r\n            // update the location of the moved piece\r\n            updatePieceLocation(selectedPiece.currentLocation, newLocation)\r\n            // update pieces state with new array of pieces\r\n            setPieces(newPiecesArr)\r\n        } else {\r\n            // if no piece is at new square, just update the pieces on the board\r\n            selectedPiece.setCurrentLocation({ letter: newLocation.letter, number: newLocation.number })\r\n            renderPieces();\r\n        }\r\n    }\r\n\r\n    const createTeamBoard = team => {\r\n        // create each square of board and push it to an array\r\n        let boardSquares = []\r\n\r\n        let isDarkSquare = true\r\n        for (let i = 8; i > 0; i--) {\r\n            letters.forEach(letter => {\r\n                boardSquares.push(<div className={isDarkSquare ? 'board-square square-light' : 'board-square square-dark'} data-letter={letter} data-number={i} data-location={letter + i}>\r\n                    <div className='square-available-circle'></div>\r\n                    <div className='square-clickable' ></div>\r\n                </div>)\r\n                // only change isDarkSquare boolean if not on last letter\r\n                if (letter !== 'h') {\r\n                    isDarkSquare = !isDarkSquare\r\n                }\r\n            })\r\n        }\r\n\r\n        // if the team is black, reverse the board array\r\n        if (team === 'black') {\r\n            boardSquares = boardSquares.reverse()\r\n        }\r\n\r\n        return setBoardSquaresState(boardSquares)\r\n    }\r\n\r\n    const renderPieces = () => {\r\n        console.log('rendering pieces')\r\n        // clear all pieces off of board before rendering back to board\r\n        document.querySelectorAll('.piece-icon-container').forEach(iconEle => {\r\n            iconEle.remove()\r\n        })\r\n\r\n        pieces.current.forEach(piece => {\r\n            const pieceLocation = piece.currentLocation.letter + piece.currentLocation.number\r\n            // square on board for piece to be added to\r\n            const locationNode = document.querySelector(`[data-location=${pieceLocation}]`)\r\n            // create element to contain piece icon\r\n            const iconEle = document.createElement('div')\r\n            iconEle.innerHTML = pieceIcons[piece.pieceType]\r\n            iconEle.className = 'piece-icon-container ' + `icon-container-${piece.color}`\r\n\r\n            // append piece to square on board\r\n            locationNode.appendChild(iconEle)\r\n        })\r\n\r\n        // clear all circles from board\r\n        document.querySelectorAll('.square-available-circle').forEach(circleEle => {\r\n            circleEle.style.opacity = 0\r\n        })\r\n\r\n        // reset states\r\n        setCurrentlySelectedPiece({}) // this seems to be causing the issues\r\n        \r\n        setSelectedPieceOpenSpots([])\r\n    }\r\n\r\n    const createClickEventListener = () => {\r\n        document.querySelectorAll('.square-clickable').forEach(square => {\r\n            square.addEventListener('click', event => {\r\n                console.log(teamUp, team)\r\n                // if the team that is up is not the user's team, don't let anything happen on click\r\n                if (teamUp.current !== team) {\r\n                    return\r\n                }\r\n                const clickedLocationLetter = event.target.parentElement.getAttribute('data-letter')\r\n                const clickedLocationNumber = parseInt(event.target.parentElement.getAttribute('data-number'))\r\n                // get the piece at the given square, if no piece will be undefined\r\n                const pieceAtClickedSquare = getPieceReference({ letter: clickedLocationLetter, number: clickedLocationNumber })\r\n                // get the currently selected piece, will be undefined if no piece is selected\r\n                let selectedPiece = getPieceReference(currentlySelectedPiece.current)\r\n                // if a piece is selected and a piece is at the square you are trying to move to , check if they are the same color\r\n                let piecesAreSameTeam = selectedPiece && pieceAtClickedSquare ? selectedPiece.color === pieceAtClickedSquare.color: false\r\n\r\n                // if there is a selected piece, user must be looking to move that piece\r\n                if (selectedPiece && !piecesAreSameTeam && (selectedPiece.currentLocation.letter !== clickedLocationLetter || selectedPiece.currentLocation.number !== clickedLocationNumber)) {\r\n                    movePiece(selectedPiece, { letter: clickedLocationLetter, number: clickedLocationNumber })\r\n                }\r\n\r\n                // if user is clicking a piece to see where it can move to, show available squares\r\n                else if (pieceAtClickedSquare) {\r\n                    // update state to contain open spots for selcted piece\r\n                    // setSelectedPieceOpenSpots([])\r\n\r\n                    // if another square is already clicked and user is swithcing to another piece\r\n                    if (selectedPiece && (clickedLocationLetter !== selectedPiece.currentLocation.letter || clickedLocationNumber !== selectedPiece.currentLocation.number)) {\r\n                        // update currently selected piece state to new piece\r\n                        setCurrentlySelectedPiece({ letter: clickedLocationLetter, number: clickedLocationNumber })\r\n                        // update available spots state\r\n                        setSelectedPieceOpenSpots(getPotentialMoves(pieceAtClickedSquare, pieces.current))\r\n                    }\r\n                    // if user is just re-selcting their currently selcted piece, remove open spots from board\r\n                    else if (selectedPiece && clickedLocationLetter === selectedPiece.currentLocation.letter && clickedLocationNumber === selectedPiece.currentLocation.number) {\r\n                        setSelectedPieceOpenSpots([])\r\n                        // reset currently selected piece state\r\n                        setCurrentlySelectedPiece({})\r\n                    }\r\n\r\n                    // if no other piece is currently selected, select piece and show available spots if team is same as user's team\r\n                    else if (!selectedPiece && pieceAtClickedSquare.color === team) {\r\n                        setCurrentlySelectedPiece({ letter: clickedLocationLetter, number: clickedLocationNumber })\r\n                        setSelectedPieceOpenSpots(getPotentialMoves(pieceAtClickedSquare, pieces.current))\r\n                    }\r\n\r\n                    else {\r\n                        console.log('user is on a different team than selected piece')\r\n                    }\r\n\r\n                }\r\n\r\n                else {\r\n                    alert(\"This message should not be showing up, if it is, please take a picture of your board right now and let me know what you did when this popped up\")\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='board'>\r\n                {boardSquaresState.map(square => square)}\r\n            </div>\r\n            <button onClick={renderPieces}>Click me</button>\r\n        </>\r\n    )\r\n}","D:\\code\\personal-projects\\chess-game\\src\\pages\\Home\\index.js",["98"],"D:\\code\\personal-projects\\chess-game\\src\\components\\GameBoard\\board.js",["99","100"],"import React from 'react'\r\n\r\nimport Pawn from '../../classes/Pawn'\r\nimport Knight from '../../classes/Knight'\r\nimport Rook from '../../classes/Rook'\r\nimport Bishop from '../../classes/Bishop'\r\nimport Queen from '../../classes/Queen'\r\nimport King from '../../classes/King'\r\n\r\nconst letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\n\r\nfunction createNewBoardPieces() {\r\n    const pawns = []\r\n    // create white pawns and push them to the array\r\n    for (let i = 0; i < 8; i++) {\r\n        let newPawn = new Pawn({ letter: letters[i], number: 2 }, 'white')\r\n\r\n        pawns.push(newPawn)\r\n    }\r\n    // create black pawns and push them to the array\r\n    for (let i = 0; i < 8; i++) {\r\n        let newPawn = new Pawn({ letter: letters[i], number: 7 }, 'black')\r\n\r\n        pawns.push(newPawn)\r\n    }\r\n\r\n    const knights = [\r\n        new Knight({ letter: 'b', number: 1 }, 'white'),\r\n        new Knight({ letter: 'g', number: 1 }, 'white'),\r\n        new Knight({ letter: 'b', number: 8 }, 'black'),\r\n        new Knight({ letter: 'g', number: 8 }, 'black')\r\n    ]\r\n\r\n    const rooks = [\r\n        new Rook({ letter: 'a', number: 1 }, 'white'),\r\n        new Rook({ letter: 'h', number: 1 }, 'white'),\r\n        new Rook({ letter: 'a', number: 8 }, 'black'),\r\n        new Rook({ letter: 'h', number: 8 }, 'black'),\r\n    ]\r\n\r\n    const bishops = [\r\n        new Bishop({ letter: 'c', number: 1 }, 'white'),\r\n        new Bishop({ letter: 'f', number: 1 }, 'white'),\r\n        new Bishop({ letter: 'c', number: 8 }, 'black'),\r\n        new Bishop({ letter: 'f', number: 8 }, 'black'),\r\n    ]\r\n\r\n    const queens = [\r\n        new Queen({ letter: 'd', number: 1 }, 'white'),\r\n        new Queen({ letter: 'd', number: 8 }, 'black')\r\n    ]\r\n\r\n    const kings = [\r\n        new King({ letter: 'e', number: 1 }, 'white'),\r\n        new King({ letter: 'e', number: 8 }, 'black')\r\n    ]\r\n\r\n    return [...queens, ...bishops, ...rooks, ...knights, ...pawns, ...kings]\r\n}\r\n\r\nfunction createWhiteTeamBoard(squareClickFunction) {\r\n    console.log('creating board')\r\n    // create each square of board and push it to an array\r\n    const boardSquares = []\r\n\r\n    let isDarkSquare = true\r\n    for (let i = 8; i > 0; i--) {\r\n        letters.forEach(letter => {\r\n            boardSquares.push(<div className={isDarkSquare ? 'board-square square-light' : 'board-square square-dark'} data-letter={letter} data-number={i} data-location={letter + i}>\r\n                <div className='square-available-circle'></div>\r\n                <div className='square-clickable' onClick={squareClickFunction}></div>\r\n            </div>)\r\n            // only change isDarkSquare boolean if not on last letter\r\n            if (letter !== 'h') {\r\n                isDarkSquare = !isDarkSquare\r\n            }\r\n        })\r\n    }\r\n\r\n    return boardSquares\r\n}\r\n\r\nfunction createBlackTeamBoard(squareClickFunction) {\r\n    // because board for black team is the reverse of the white team's, we can\r\n    // just call the white board creation function and reverse the array\r\n    return createWhiteTeamBoard(squareClickFunction).reverse()\r\n}\r\n\r\nfunction getPotentialMoves(chosenPiece, pieces, getPieceReferenceFunc) {\r\n    // find which piece is at the given location\r\n    // const chosenPiece = getPieceReferenceFunc(pieceLocation)\r\n\r\n    // get possible locations of piece\r\n    let possibleLocations = chosenPiece.getPossibleMoves()\r\n\r\n    // if piece is a pawn at it's starting spot, allow a two square move\r\n    if (chosenPiece.pieceType === 'pawn') {\r\n        // if piece is white and at number of 2, allow 2 square jump\r\n        if (chosenPiece.color === 'white' && chosenPiece.currentLocation.number === 2) {\r\n            possibleLocations.push({ letter: chosenPiece.currentLocation.letter, number: 4 })\r\n        }\r\n        // if piece is black and at number of 7, allow 2 square jump\r\n        else if (chosenPiece.color === 'black' && chosenPiece.currentLocation.number === 7) {\r\n            possibleLocations.push({ letter: chosenPiece.currentLocation.letter, number: 5 })\r\n        }\r\n\r\n        // if piece is white and there is a piece up and to it's diagonal, add that square as an option\r\n        if (chosenPiece.color === 'white') {\r\n            // filter pieces for any pieces to the pawn's diagonal\r\n            const diagonalPieces = pieces.filter(pieces => {\r\n                const { letter, number } = pieces.currentLocation\r\n                const letterIndex = letters.indexOf(chosenPiece.currentLocation.letter)\r\n                const upAndLeftSquareLetter = letters[letterIndex - 1]\r\n                const upAndRightSquareLetter = letters[letterIndex + 1]\r\n                return (letter === upAndLeftSquareLetter || letter === upAndRightSquareLetter) && number === chosenPiece.currentLocation.number + 1\r\n            })\r\n            diagonalPieces.forEach(piece => possibleLocations.push(piece.currentLocation))\r\n        }\r\n        // allow diagonal attacks for black pieces as well\r\n        else if (chosenPiece.color === 'black') {\r\n            // filter pieces for any pieces to the pawn's diagonal\r\n            const diagonalPieces = pieces.filter(pieces => {\r\n                const { letter, number } = pieces.currentLocation\r\n                const letterIndex = letters.indexOf(chosenPiece.currentLocation.letter)\r\n                const downAndLeftSquareLetter = letters[letterIndex - 1]\r\n                const downAndRightSquareLetter = letters[letterIndex + 1]\r\n                return (letter === downAndLeftSquareLetter || letter === downAndRightSquareLetter) && number === chosenPiece.currentLocation.number - 1\r\n            })\r\n            diagonalPieces.forEach(piece => possibleLocations.push(piece.currentLocation))\r\n        }\r\n    }\r\n\r\n    // locations of friendly pieces blocking a path\r\n    const blockedSpots = []\r\n\r\n    // filter possible locations by pieces locations of other pieces on board\r\n    let availableSpots = possibleLocations.filter(newLocation => {\r\n        // iterate over pieces on board\r\n        for (var i = 0; i < pieces.length; i++) {\r\n            let piece = pieces[i]\r\n\r\n            // check if piece's location matches potential location and is not friendly\r\n            if (piece.currentLocation.letter === newLocation.letter &&\r\n                piece.currentLocation.number === newLocation.number) {\r\n                // if piece being moved is a knight, we don't need to worry about a path being blocked by a friendly piece\r\n                if (chosenPiece.pieceType === 'knight') {\r\n                    // check if piece is of same color as knight\r\n\r\n                    if (piece.color === chosenPiece.color) {\r\n                        // if pieces are same color, don't let knight move there\r\n                        return false\r\n                    } else {\r\n                        // if pieces are different colors, allow knight to move there\r\n                        return true\r\n                    }\r\n                } else if (piece.color === chosenPiece.color) {\r\n                    // add location of piece to blockedSpots array\r\n                    blockedSpots.push(piece.currentLocation)\r\n                    // return false to remove this spot option\r\n                    return false\r\n                } else if (piece.color !== chosenPiece.color) {\r\n                    // if piece is an enemy piece, add that piece to blocked spots but keep the spot as available\r\n                    // this will restrict player from accessing any spots beyond the enemy\r\n                    blockedSpots.push(piece.currentLocation)\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        // return true if nothing has been returned yet\r\n        return true\r\n    })\r\n\r\n    // if any paths are blocked, remove the blocked spots from possible moves\r\n    if (blockedSpots.length > 0) {\r\n        availableSpots = chosenPiece.removeBlockedPaths(blockedSpots, availableSpots)\r\n    }\r\n\r\n    return availableSpots\r\n}\r\n\r\nexport default {\r\n    createNewBoardPieces: createNewBoardPieces,\r\n    createWhiteTeamBoard: createWhiteTeamBoard,\r\n    createBlackTeamBoard: createBlackTeamBoard,\r\n    getPotentialMoves: getPotentialMoves\r\n}","D:\\code\\personal-projects\\chess-game\\src\\classes\\King.js",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":1,"column":8,"nodeType":"107","messageId":"108","endLine":1,"endColumn":12},{"ruleId":"109","severity":1,"message":"110","line":77,"column":8,"nodeType":"111","endLine":77,"endColumn":16,"suggestions":"112"},{"ruleId":"105","severity":1,"message":"113","line":1,"column":7,"nodeType":"107","messageId":"108","endLine":1,"endColumn":11},{"ruleId":"105","severity":1,"message":"114","line":2,"column":7,"nodeType":"107","messageId":"108","endLine":2,"endColumn":13},{"ruleId":"105","severity":1,"message":"115","line":3,"column":7,"nodeType":"107","messageId":"108","endLine":3,"endColumn":11},{"ruleId":"105","severity":1,"message":"116","line":4,"column":7,"nodeType":"107","messageId":"108","endLine":4,"endColumn":13},{"ruleId":"105","severity":1,"message":"117","line":5,"column":7,"nodeType":"107","messageId":"108","endLine":5,"endColumn":12},{"ruleId":"118","severity":1,"message":"119","line":26,"column":86,"nodeType":"120","messageId":"121","endLine":26,"endColumn":88},{"ruleId":"118","severity":1,"message":"119","line":26,"column":142,"nodeType":"120","messageId":"121","endLine":26,"endColumn":144},{"ruleId":"122","severity":1,"message":"123","line":69,"column":5,"nodeType":"124","messageId":"121","endLine":71,"endColumn":6},{"ruleId":"101","replacedBy":"125"},{"ruleId":"103","replacedBy":"126"},{"ruleId":"118","severity":1,"message":"119","line":11,"column":36,"nodeType":"120","messageId":"121","endLine":11,"endColumn":38},{"ruleId":"105","severity":1,"message":"127","line":1,"column":38,"nodeType":"107","messageId":"108","endLine":1,"endColumn":47},{"ruleId":"105","severity":1,"message":"128","line":4,"column":10,"nodeType":"107","messageId":"108","endLine":4,"endColumn":19},{"ruleId":"105","severity":1,"message":"129","line":5,"column":10,"nodeType":"107","messageId":"108","endLine":5,"endColumn":16},{"ruleId":"105","severity":1,"message":"130","line":7,"column":31,"nodeType":"107","messageId":"108","endLine":7,"endColumn":51},{"ruleId":"105","severity":1,"message":"131","line":7,"column":53,"nodeType":"107","messageId":"108","endLine":7,"endColumn":73},{"ruleId":"105","severity":1,"message":"132","line":21,"column":46,"nodeType":"107","messageId":"108","endLine":21,"endColumn":54},{"ruleId":"105","severity":1,"message":"133","line":24,"column":12,"nodeType":"107","messageId":"108","endLine":24,"endColumn":25},{"ruleId":"109","severity":1,"message":"134","line":78,"column":8,"nodeType":"111","endLine":78,"endColumn":10,"suggestions":"135"},{"ruleId":"109","severity":1,"message":"136","line":96,"column":8,"nodeType":"111","endLine":96,"endColumn":27,"suggestions":"137"},{"ruleId":"109","severity":1,"message":"138","line":115,"column":8,"nodeType":"111","endLine":115,"endColumn":27,"suggestions":"139"},{"ruleId":"105","severity":1,"message":"140","line":133,"column":11,"nodeType":"107","messageId":"108","endLine":133,"endColumn":19},{"ruleId":"141","severity":1,"message":"142","line":216,"column":29,"nodeType":"143","messageId":"144","endLine":225,"endColumn":14},{"ruleId":"145","severity":1,"message":"146","line":250,"column":57,"nodeType":"120","messageId":"147","endLine":250,"endColumn":58},{"ruleId":"105","severity":1,"message":"148","line":1,"column":28,"nodeType":"107","messageId":"108","endLine":1,"endColumn":36},{"ruleId":"141","severity":1,"message":"149","line":68,"column":25,"nodeType":"143","messageId":"144","endLine":77,"endColumn":10},{"ruleId":"150","severity":1,"message":"151","line":181,"column":1,"nodeType":"152","endLine":186,"endColumn":2},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'room' and 'show'. Either include them or remove the dependency array. You can also do a functional update 'setShow(s => ...)' if you only need 'show' in the 'setShow' call.","ArrayExpression",["155"],"'Pawn' is assigned a value but never used.","'Knight' is assigned a value but never used.","'Rook' is assigned a value but never used.","'Bishop' is assigned a value but never used.","'Queen' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-dupe-class-members","Duplicate name 'addPiece'.","MethodDefinition",["153"],["154"],"'Component' is defined but never used.","'useParams' is defined but never used.","'render' is defined but never used.","'createWhiteTeamBoard' is assigned a value but never used.","'createBlackTeamBoard' is assigned a value but never used.","'username' is assigned a value but never used.","'doRemovePiece' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPieces'. Either include it or remove the dependency array.",["156"],"React Hook useEffect has missing dependencies: 'forceMove', 'setTeamUp', 'socket', and 'teamUp'. Either include them or remove the dependency array.",["157"],"React Hook useEffect has missing dependencies: 'createClickEventListener' and 'renderPieces'. Either include them or remove the dependency array.",["158"],"'addPiece' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'boardSquares', 'isDarkSquare', 'isDarkSquare', 'isDarkSquare'.","ArrowFunctionExpression","unsafeRefs","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'useState' is defined but never used.","Function declared in a loop contains unsafe references to variable(s) 'isDarkSquare', 'isDarkSquare', 'isDarkSquare'.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},"Update the dependencies array to be: [room, show, socket]",{"range":"167","text":"168"},"Update the dependencies array to be: [setPieces]",{"range":"169","text":"170"},"Update the dependencies array to be: [forceMove, isSocketConnected, setTeamUp, socket, teamUp]",{"range":"171","text":"172"},"Update the dependencies array to be: [boardSquaresState, createClickEventListener, renderPieces]",{"range":"173","text":"174"},[2386,2394],"[room, show, socket]",[3229,3231],"[setPieces]",[3937,3956],"[forceMove, isSocketConnected, setTeamUp, socket, teamUp]",[4650,4669],"[boardSquaresState, createClickEventListener, renderPieces]"]