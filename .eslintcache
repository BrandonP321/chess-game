[{"D:\\code\\personal-projects\\chess-game\\src\\index.js":"1","D:\\code\\personal-projects\\chess-game\\src\\App.js":"2","D:\\code\\personal-projects\\chess-game\\src\\reportWebVitals.js":"3","D:\\code\\personal-projects\\chess-game\\src\\pages\\GameRoom\\index.js":"4","D:\\code\\personal-projects\\chess-game\\src\\classes\\Board.js":"5","D:\\code\\personal-projects\\chess-game\\src\\classes\\Pawn.js":"6","D:\\code\\personal-projects\\chess-game\\src\\classes\\Rook.js":"7","D:\\code\\personal-projects\\chess-game\\src\\classes\\Bishop.js":"8","D:\\code\\personal-projects\\chess-game\\src\\classes\\Queen.js":"9","D:\\code\\personal-projects\\chess-game\\src\\classes\\Knight.js":"10","D:\\code\\personal-projects\\chess-game\\src\\classes\\Piece.js":"11","D:\\code\\personal-projects\\chess-game\\src\\components\\GameBoard\\index.js":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":204,"mtime":1608614886377,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":294,"mtime":1608615806424,"results":"17","hashOfConfig":"14"},{"size":4713,"mtime":1608616119728,"results":"18","hashOfConfig":"14"},{"size":786,"mtime":1608545603877,"results":"19","hashOfConfig":"14"},{"size":2428,"mtime":1608607284224,"results":"20","hashOfConfig":"14"},{"size":2662,"mtime":1608612423950,"results":"21","hashOfConfig":"14"},{"size":5129,"mtime":1608612036036,"results":"22","hashOfConfig":"14"},{"size":1202,"mtime":1608545593146,"results":"23","hashOfConfig":"14"},{"size":1296,"mtime":1608545524365,"results":"24","hashOfConfig":"14"},{"size":1272,"mtime":1608626741775,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"b24jsc",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\code\\personal-projects\\chess-game\\src\\index.js",[],["54","55"],"D:\\code\\personal-projects\\chess-game\\src\\App.js",["56"],"import logo from './logo.svg';\nimport './App.css';\nimport GameRoom from './pages/GameRoom'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameRoom />\n    </div>\n  );\n}\n\nexport default App;\n","D:\\code\\personal-projects\\chess-game\\src\\reportWebVitals.js",[],"D:\\code\\personal-projects\\chess-game\\src\\pages\\GameRoom\\index.js",[],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Board.js",["57","58","59","60","61","62","63","64"],"const Pawn = require('./Pawn')\r\nconst Knight = require('./Knight')\r\nconst Rook = require('./Rook')\r\nconst Bishop = require('./Bishop')\r\nconst Queen = require('./Queen')\r\n\r\n\r\nclass Board {\r\n    constructor(pieces = []) {\r\n        this.pieces = pieces\r\n        this.letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\n    }\r\n\r\n    addPiece(piece) {\r\n        // add a new piece to the pieces array\r\n        this.pieces.push(piece)\r\n    }\r\n\r\n    removePiece(piece) {\r\n        // remove piece when it is taken off the board\r\n        // this.pieces = this.pieces.filter()\r\n    }\r\n\r\n    getPotentialMoves(pieceLocation) {\r\n        // find which piece is at the given location\r\n        const chosenPiece = this.pieces.filter(piece => piece.currentLocation.letter == pieceLocation.letter && piece.currentLocation.number == pieceLocation.number)[0]\r\n\r\n        // get possible locations of piece\r\n        let possibleLocations = chosenPiece.getPossibleMoves()\r\n\r\n        // locations of friendly pieces blocking a path\r\n        const blockedSpots = []\r\n\r\n        // filter possible locations by pieces locations of other pieces on board\r\n        let availableSpots = possibleLocations.filter(newLocation => {\r\n            // iterate over pieces on board\r\n            for (var i = 0; i < this.pieces.length; i++) {\r\n                let piece = this.pieces[i]\r\n\r\n\r\n                // if piece's location matches potential location and is not friendly\r\n                if (piece.currentLocation.letter === newLocation.letter &&\r\n                    piece.currentLocation.number === newLocation.number) {\r\n                    // if piece being moved is a knight, we don't need to worry about a path being blocked by a friendly piece\r\n                    if (chosenPiece.pieceType === 'knight') {\r\n                        return false\r\n                    } else if (piece.color === chosenPiece.color) {\r\n                        // add location of piece to blockedSpots array\r\n                        blockedSpots.push(piece.currentLocation)\r\n                        // return false to remove this spot option\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n            // return true if nothing has been returned yet\r\n            return true\r\n        })\r\n        \r\n        console.log('spots before removing paths:')\r\n        // if any paths are blocked, remove the blocked spots from possible moves\r\n        if (blockedSpots.length > 0) {\r\n            availableSpots = chosenPiece.removeBlockedPaths(blockedSpots, availableSpots)\r\n        }\r\n\r\n        \r\n        return availableSpots\r\n    }\r\n\r\n    addPiece(piece) {\r\n        this.pieces.push(piece)\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = Board;\r\n\r\n\r\n\r\n\r\n// // add all pieces to board\r\n// const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\n\r\n// const pawns = []\r\n// // create white pawns and push them to the array\r\n// for (let i = 0; i < 8; i++) {\r\n//     let newPawn = new Pawn({ letter: letters[i], number: 2 }, 'white')\r\n    \r\n//     pawns.push(newPawn)\r\n// }\r\n// // create black pawns and push them to the array\r\n// for (let i = 0; i < 8; i++) {\r\n//     let newPawn = new Pawn({ letter: letters[i], number: 7 }, 'black')\r\n    \r\n//     pawns.push(newPawn)\r\n// }\r\n\r\n// const knights = [\r\n//     new Knight({ letter: 'b', number: 1 }, 'white'),\r\n//     new Knight({ letter: 'g', number: 1 }, 'white'),\r\n//     new Knight({ letter: 'b', number: 8 }, 'black'),\r\n//     new Knight({ letter: 'g', number: 8 }, 'black')\r\n// ]\r\n\r\n// const rooks = [\r\n//     new Rook({ letter: 'a', number: 1 }, 'white'),\r\n//     new Rook({ letter: 'h', number: 1 }, 'white'),\r\n//     new Rook({ letter: 'a', number: 8 }, 'black'),\r\n//     new Rook({ letter: 'h', number: 8 }, 'black'),\r\n// ]\r\n\r\n// const bishops = [\r\n//     new Bishop({ letter: 'c', number: 1 }, 'white'),\r\n//     new Bishop({ letter: 'f', number: 1 }, 'white'),\r\n//     new Bishop({ letter: 'c', number: 8 }, 'black'),\r\n//     new Bishop({ letter: 'f', number: 8 }, 'black'),\r\n// ]\r\n\r\n// const queens = [\r\n//     new Queen({ letter: 'd', number: 1 }, 'white'),\r\n//     new Queen({ letter: 'd', number: 8 }, 'black')\r\n// ]\r\n\r\n// // push pieces from their arrays to the new Board\r\n// // const board = new Board([...pawns, ...knights, ...rooks, ...bishops, ...queens])\r\n\r\n// const board = new Board([\r\n//     new Rook({ letter: 'd', number: 3}, 'white'), \r\n//     new Pawn({ letter: 'f', number: 3 }, 'white'),\r\n//     new Pawn({ letter: 'd', number: 1 }, 'white'),\r\n//     new Pawn({ letter: 'a', number: 3 }, 'white'),\r\n//     new Pawn({ letter: 'd', number: 7 }, 'white'),\r\n// ])\r\n\r\n// console.log('moves:')\r\n// console.log(board.getPotentialMoves({ letter: 'd', number: 3 }).length)","D:\\code\\personal-projects\\chess-game\\src\\classes\\Pawn.js",["65"],"const Piece = require('./Piece')\r\n\r\nclass Pawn extends Piece {\r\n    constructor(startLocation, color) {\r\n        super(startLocation, color)\r\n        this.pieceType = 'pawn'\r\n        this.moveChanges = [\r\n            {\r\n                letter: 0,\r\n                number: this.color == 'black' ? -1: 1\r\n            }\r\n        ]\r\n    }\r\n    // getPossibleMoves() {\r\n    //     // can only move up one number\r\n    //     return { letter: this.currentLocation.letter, number: this.currentLocation.number + 1 }\r\n    // }\r\n\r\n    // setCurrentLocation(newLocation) {\r\n    //     this.currentLocation = newLocation\r\n    // }\r\n}\r\n\r\nmodule.exports = Pawn;\r\n\r\n// let pawn = new Pawn({ letter: 'b', number: 2}, 'white')\r\n\r\n// pawn.getPossibleMoves() // letter: b, number: 3\r\n\r\n// console.log(pawn)","D:\\code\\personal-projects\\chess-game\\src\\classes\\Rook.js",[],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Bishop.js",[],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Queen.js",[],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Knight.js",[],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Piece.js",[],"D:\\code\\personal-projects\\chess-game\\src\\components\\GameBoard\\index.js",["66","67","68"],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":1,"column":8,"nodeType":"75","messageId":"76","endLine":1,"endColumn":12},{"ruleId":"73","severity":1,"message":"77","line":1,"column":7,"nodeType":"75","messageId":"76","endLine":1,"endColumn":11},{"ruleId":"73","severity":1,"message":"78","line":2,"column":7,"nodeType":"75","messageId":"76","endLine":2,"endColumn":13},{"ruleId":"73","severity":1,"message":"79","line":3,"column":7,"nodeType":"75","messageId":"76","endLine":3,"endColumn":11},{"ruleId":"73","severity":1,"message":"80","line":4,"column":7,"nodeType":"75","messageId":"76","endLine":4,"endColumn":13},{"ruleId":"73","severity":1,"message":"81","line":5,"column":7,"nodeType":"75","messageId":"76","endLine":5,"endColumn":12},{"ruleId":"82","severity":1,"message":"83","line":26,"column":86,"nodeType":"84","messageId":"85","endLine":26,"endColumn":88},{"ruleId":"82","severity":1,"message":"83","line":26,"column":142,"nodeType":"84","messageId":"85","endLine":26,"endColumn":144},{"ruleId":"86","severity":1,"message":"87","line":69,"column":5,"nodeType":"88","messageId":"85","endLine":71,"endColumn":6},{"ruleId":"82","severity":1,"message":"83","line":10,"column":36,"nodeType":"84","messageId":"85","endLine":10,"endColumn":38},{"ruleId":"73","severity":1,"message":"89","line":1,"column":17,"nodeType":"75","messageId":"76","endLine":1,"endColumn":25},{"ruleId":"73","severity":1,"message":"90","line":1,"column":38,"nodeType":"75","messageId":"76","endLine":1,"endColumn":47},{"ruleId":"91","severity":1,"message":"92","line":20,"column":25,"nodeType":"93","messageId":"94","endLine":28,"endColumn":10},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Pawn' is assigned a value but never used.","'Knight' is assigned a value but never used.","'Rook' is assigned a value but never used.","'Bishop' is assigned a value but never used.","'Queen' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-dupe-class-members","Duplicate name 'addPiece'.","MethodDefinition","'useState' is defined but never used.","'Component' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'isDarkSquare', 'isDarkSquare', 'isDarkSquare'.","ArrowFunctionExpression","unsafeRefs","no-global-assign","no-unsafe-negation"]