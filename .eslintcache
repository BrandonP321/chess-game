[{"D:\\code\\personal-projects\\chess-game\\src\\index.js":"1","D:\\code\\personal-projects\\chess-game\\src\\App.js":"2","D:\\code\\personal-projects\\chess-game\\src\\reportWebVitals.js":"3","D:\\code\\personal-projects\\chess-game\\src\\pages\\GameRoom\\index.js":"4","D:\\code\\personal-projects\\chess-game\\src\\classes\\Board.js":"5","D:\\code\\personal-projects\\chess-game\\src\\classes\\Pawn.js":"6","D:\\code\\personal-projects\\chess-game\\src\\classes\\Rook.js":"7","D:\\code\\personal-projects\\chess-game\\src\\classes\\Bishop.js":"8","D:\\code\\personal-projects\\chess-game\\src\\classes\\Queen.js":"9","D:\\code\\personal-projects\\chess-game\\src\\classes\\Knight.js":"10","D:\\code\\personal-projects\\chess-game\\src\\classes\\Piece.js":"11","D:\\code\\personal-projects\\chess-game\\src\\components\\GameBoard\\index.js":"12","D:\\code\\personal-projects\\chess-game\\src\\pages\\Home\\index.js":"13","D:\\code\\personal-projects\\chess-game\\src\\components\\GameBoard\\board.js":"14","D:\\code\\personal-projects\\chess-game\\src\\classes\\King.js":"15","D:\\code\\personal-projects\\chess-game\\src\\components\\PlayersAside\\index.js":"16","D:\\code\\personal-projects\\chess-game\\src\\components\\HomeHeader\\index.js":"17"},{"size":500,"mtime":499162500000,"results":"18","hashOfConfig":"19"},{"size":541,"mtime":1608870746308,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":17220,"mtime":1609401844531,"results":"22","hashOfConfig":"19"},{"size":4713,"mtime":1608616119728,"results":"23","hashOfConfig":"19"},{"size":1436,"mtime":1609026941923,"results":"24","hashOfConfig":"19"},{"size":2479,"mtime":1609196162734,"results":"25","hashOfConfig":"19"},{"size":2723,"mtime":1609026565317,"results":"26","hashOfConfig":"19"},{"size":5043,"mtime":1609026965386,"results":"27","hashOfConfig":"19"},{"size":1255,"mtime":1609196159672,"results":"28","hashOfConfig":"19"},{"size":1336,"mtime":1609192986139,"results":"29","hashOfConfig":"19"},{"size":17824,"mtime":1609400812420,"results":"30","hashOfConfig":"19"},{"size":2502,"mtime":1609401831673,"results":"31","hashOfConfig":"19"},{"size":9353,"mtime":1609196168060,"results":"32","hashOfConfig":"19"},{"size":1128,"mtime":1609196156988,"results":"33","hashOfConfig":"19"},{"size":5253,"mtime":1609373443258,"results":"34","hashOfConfig":"19"},{"size":260,"mtime":1609317792369,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"b24jsc",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"D:\\code\\personal-projects\\chess-game\\src\\index.js",[],["78","79"],"D:\\code\\personal-projects\\chess-game\\src\\App.js",["80"],"import logo from './logo.svg';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport './App.css';\r\nimport GameRoom from './pages/GameRoom'\r\nimport Home from './pages/Home'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path='/'>\r\n            <Home />\r\n          </Route>\r\n          <Route exact path='/game/:room'>\r\n            <GameRoom />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\code\\personal-projects\\chess-game\\src\\reportWebVitals.js",[],"D:\\code\\personal-projects\\chess-game\\src\\pages\\GameRoom\\index.js",["81"],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Board.js",["82","83","84","85","86","87","88","89"],"const Pawn = require('./Pawn')\r\nconst Knight = require('./Knight')\r\nconst Rook = require('./Rook')\r\nconst Bishop = require('./Bishop')\r\nconst Queen = require('./Queen')\r\n\r\n\r\nclass Board {\r\n    constructor(pieces = []) {\r\n        this.pieces = pieces\r\n        this.letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\n    }\r\n\r\n    addPiece(piece) {\r\n        // add a new piece to the pieces array\r\n        this.pieces.push(piece)\r\n    }\r\n\r\n    removePiece(piece) {\r\n        // remove piece when it is taken off the board\r\n        // this.pieces = this.pieces.filter()\r\n    }\r\n\r\n    getPotentialMoves(pieceLocation) {\r\n        // find which piece is at the given location\r\n        const chosenPiece = this.pieces.filter(piece => piece.currentLocation.letter == pieceLocation.letter && piece.currentLocation.number == pieceLocation.number)[0]\r\n\r\n        // get possible locations of piece\r\n        let possibleLocations = chosenPiece.getPossibleMoves()\r\n\r\n        // locations of friendly pieces blocking a path\r\n        const blockedSpots = []\r\n\r\n        // filter possible locations by pieces locations of other pieces on board\r\n        let availableSpots = possibleLocations.filter(newLocation => {\r\n            // iterate over pieces on board\r\n            for (var i = 0; i < this.pieces.length; i++) {\r\n                let piece = this.pieces[i]\r\n\r\n\r\n                // if piece's location matches potential location and is not friendly\r\n                if (piece.currentLocation.letter === newLocation.letter &&\r\n                    piece.currentLocation.number === newLocation.number) {\r\n                    // if piece being moved is a knight, we don't need to worry about a path being blocked by a friendly piece\r\n                    if (chosenPiece.pieceType === 'knight') {\r\n                        return false\r\n                    } else if (piece.color === chosenPiece.color) {\r\n                        // add location of piece to blockedSpots array\r\n                        blockedSpots.push(piece.currentLocation)\r\n                        // return false to remove this spot option\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n            // return true if nothing has been returned yet\r\n            return true\r\n        })\r\n        \r\n        console.log('spots before removing paths:')\r\n        // if any paths are blocked, remove the blocked spots from possible moves\r\n        if (blockedSpots.length > 0) {\r\n            availableSpots = chosenPiece.removeBlockedPaths(blockedSpots, availableSpots)\r\n        }\r\n\r\n        \r\n        return availableSpots\r\n    }\r\n\r\n    addPiece(piece) {\r\n        this.pieces.push(piece)\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = Board;\r\n\r\n\r\n\r\n\r\n// // add all pieces to board\r\n// const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\n\r\n// const pawns = []\r\n// // create white pawns and push them to the array\r\n// for (let i = 0; i < 8; i++) {\r\n//     let newPawn = new Pawn({ letter: letters[i], number: 2 }, 'white')\r\n    \r\n//     pawns.push(newPawn)\r\n// }\r\n// // create black pawns and push them to the array\r\n// for (let i = 0; i < 8; i++) {\r\n//     let newPawn = new Pawn({ letter: letters[i], number: 7 }, 'black')\r\n    \r\n//     pawns.push(newPawn)\r\n// }\r\n\r\n// const knights = [\r\n//     new Knight({ letter: 'b', number: 1 }, 'white'),\r\n//     new Knight({ letter: 'g', number: 1 }, 'white'),\r\n//     new Knight({ letter: 'b', number: 8 }, 'black'),\r\n//     new Knight({ letter: 'g', number: 8 }, 'black')\r\n// ]\r\n\r\n// const rooks = [\r\n//     new Rook({ letter: 'a', number: 1 }, 'white'),\r\n//     new Rook({ letter: 'h', number: 1 }, 'white'),\r\n//     new Rook({ letter: 'a', number: 8 }, 'black'),\r\n//     new Rook({ letter: 'h', number: 8 }, 'black'),\r\n// ]\r\n\r\n// const bishops = [\r\n//     new Bishop({ letter: 'c', number: 1 }, 'white'),\r\n//     new Bishop({ letter: 'f', number: 1 }, 'white'),\r\n//     new Bishop({ letter: 'c', number: 8 }, 'black'),\r\n//     new Bishop({ letter: 'f', number: 8 }, 'black'),\r\n// ]\r\n\r\n// const queens = [\r\n//     new Queen({ letter: 'd', number: 1 }, 'white'),\r\n//     new Queen({ letter: 'd', number: 8 }, 'black')\r\n// ]\r\n\r\n// // push pieces from their arrays to the new Board\r\n// // const board = new Board([...pawns, ...knights, ...rooks, ...bishops, ...queens])\r\n\r\n// const board = new Board([\r\n//     new Rook({ letter: 'd', number: 3}, 'white'), \r\n//     new Pawn({ letter: 'f', number: 3 }, 'white'),\r\n//     new Pawn({ letter: 'd', number: 1 }, 'white'),\r\n//     new Pawn({ letter: 'a', number: 3 }, 'white'),\r\n//     new Pawn({ letter: 'd', number: 7 }, 'white'),\r\n// ])\r\n\r\n// console.log('moves:')\r\n// console.log(board.getPotentialMoves({ letter: 'd', number: 3 }).length)",["90","91"],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Pawn.js",["92"],"// const Piece = require('./Piece')\r\nimport Piece from './Piece'\r\n\r\nexport default class Pawn extends Piece {\r\n    constructor(startLocation, color, currentLocation) {\r\n        super(startLocation, color, currentLocation)\r\n        this.pieceType = 'pawn'\r\n        this.moveChanges = [\r\n            {\r\n                letter: 0,\r\n                number: this.color == 'black' ? -1: 1\r\n            }\r\n        ]\r\n    }\r\n    \r\n    removeBlockedPaths(blockedSpotsArr, availableSpotsArr) {\r\n        let availableSpots = availableSpotsArr;\r\n\r\n        blockedSpotsArr.forEach(spot => {\r\n            // if spot is on a different letter square than current, ignore since that piece can be attacked\r\n            if (spot.letter !== this.currentLocation.letter) {\r\n                return false\r\n            }\r\n            // if blocked spot is above current, block all spots above it including it\r\n            if (spot.number > this.currentLocation.number) {\r\n                availableSpots = availableSpots.filter(openSpot => openSpot.number >= spot.number && openSpot.letter !== this.currentLocation.letter)\r\n            } else {\r\n                // if blocked spot is below current, block all spots beneath it including it\r\n                availableSpots = availableSpots.filter(openSpot => openSpot.number <= spot.number && openSpot.letter !== this.currentLocation.letter)\r\n            }\r\n        })\r\n\r\n        return availableSpots\r\n    }\r\n}\r\n","D:\\code\\personal-projects\\chess-game\\src\\classes\\Rook.js",[],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Bishop.js",[],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Queen.js",[],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Knight.js",[],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Piece.js",[],"D:\\code\\personal-projects\\chess-game\\src\\components\\GameBoard\\index.js",["93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108"],"import React, { useState, useEffect, Component, useRef } from 'react'\r\nimport './index.css'\r\nimport board from './board'\r\nimport { useParams } from 'react-router-dom'\r\nimport { render } from '@testing-library/react'\r\n// destructure createBoard file for functions to create & manipulate board\r\nconst {\r\n    createNewBoardPieces,\r\n    createPiecesInstancesArray,\r\n    getPotentialMoves\r\n} = board\r\n\r\nconst pieceIcons = {\r\n    rook: '<i class=\"fas fa-chess-rook piece-icon\"></i>',\r\n    knight: '<i class=\"fas fa-chess-knight piece-icon\"></i>',\r\n    bishop: '<i class=\"fas fa-chess-bishop piece-icon\"></i>',\r\n    queen: '<i class=\"fas fa-chess-queen piece-icon\"></i>',\r\n    king: '<i class=\"fas fa-chess-king piece-icon\"></i>',\r\n    pawn: '<i class=\"fas fa-chess-pawn piece-icon\"></i>'\r\n}\r\n\r\nconst letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\n\r\nexport default function GameBoard(props) {\r\n    const {\r\n        roomId,\r\n        teamRef,\r\n        teamState,\r\n        socket,\r\n        isSocketConnected,\r\n        usernameRef,\r\n        usernameState,\r\n        teamUpRef,\r\n        teamUpState,\r\n        setTeamUp,\r\n        watchers,\r\n        isGameActiveRef,\r\n        isGameActiveState,\r\n        updatePiecesTaken,\r\n        gamePendingHeading,\r\n        gamePendingButtonText,\r\n        handleOverlayButtonClick,\r\n        setGamePendingHeading,\r\n        setGamePendingButtonText\r\n    } = props\r\n\r\n    const [screenWidth, setScreenWidth] = useState(window.innerWidth)\r\n\r\n    const [boardSquaresState, setBoardSquaresState] = useState([])\r\n\r\n    // reference will be same as boardSquaresState but will be used as a reference for functions rather than for rendering the board\r\n    const boardSquaresRef = useRef([])\r\n    const setBoardSquaresRef = data => {\r\n        boardSquaresRef.current = data\r\n    }\r\n\r\n    // const [pieces, setPieces] = useState([])\r\n    const pieces = useRef([])\r\n    const setPieces = data => {\r\n        pieces.current = data\r\n        if (pieces.current.length > 0 && boardSquaresRef.current.length > 0) {\r\n            renderPieces()\r\n        }\r\n    }\r\n\r\n    const currentlySelectedPiece = useRef({})\r\n    const setCurrentlySelectedPiece = data => {\r\n        currentlySelectedPiece.current = data\r\n    }\r\n    // const [selectedPieceOpenSpots, setSelectedPieceOpenSpots] = useState([])\r\n    const selectedPieceOpenSpots = useRef([])\r\n\r\n    // when user changes this ref, also update the shown circles on the board\r\n    const setSelectedPieceOpenSpots = data => {\r\n        selectedPieceOpenSpots.current = data\r\n\r\n        // first make sure all circles are hidden\r\n        document.querySelectorAll('.square-available-circle').forEach(circle => {\r\n            circle.style.opacity = 0\r\n        })\r\n\r\n        // now show a circle on each square that is available\r\n        selectedPieceOpenSpots.current.forEach(square => {\r\n            // get reference to square at the given loaction\r\n            const squareNode = document.querySelector(`[data-location=${square.letter + square.number}]`)\r\n            // get reference to ciricle inside of square node\r\n            const circle = squareNode.children[0]\r\n            // update opacity of the circle\r\n            circle.style.opacity = .6\r\n        })\r\n    }\r\n\r\n    // on component load, ...\r\n    useEffect(() => {\r\n        // if no pieces are set in the state, generate all board pieces and add them to the state\r\n        if (pieces.current.length < 1) {\r\n            setPieces(createNewBoardPieces())\r\n        }\r\n\r\n        // when window inner width changes, update the width in the state\r\n        window.addEventListener('resize', () => {\r\n            setScreenWidth(window.innerWidth)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (socket.current) {\r\n            socket.current.on('opponentMove', move => {\r\n                console.log('opponent has moved')\r\n                forceMove(move.startLocation, move.endLocation)\r\n                // now update which team is able to move a piece\r\n                if (teamUpRef.current === 'white') {\r\n                    setTeamUp('black')\r\n                } else if (teamUpRef.current === 'black') {\r\n                    setTeamUp('white')\r\n                }\r\n            })\r\n\r\n            socket.current.on('roomJoined', room => {\r\n                // if room.pieces has more than 0 items, set the state to that\r\n                if (room.pieces.length > 0) {\r\n                    // because each piece is now just an object in server, create array of pieces as instances of their respective piece class\r\n                    const piecesWithInstances = createPiecesInstancesArray(room.pieces)\r\n                    // set the new array of pieces to the state\r\n                    setPieces(piecesWithInstances)\r\n                }\r\n            })\r\n\r\n            socket.current.on('resetGame', () => {\r\n                // on game reset, reset board pieces\r\n                setPieces(createNewBoardPieces())\r\n            })\r\n        }\r\n    }, [isSocketConnected])\r\n\r\n    // render board when the team is changed\r\n    useEffect(() => {\r\n        console.log('should create board for team ', teamState)\r\n        if (teamState === 'white' || teamState === 'watcher') {\r\n            createTeamBoard('white')\r\n        } else if (teamState === 'black') {\r\n            createTeamBoard('black');\r\n        }\r\n    }, [teamState])\r\n\r\n    useEffect(() => {\r\n        if (boardSquaresState.length > 0 && pieces.current.length > 0) {\r\n            // update board squares reference to contain up to date version of board\r\n            setBoardSquaresRef(boardSquaresState)\r\n            renderPieces()\r\n            console.log('creating click event listeners')\r\n            // now that boards are loaded back on to the page, add event listeners to each square\r\n            // createClickEventListener()\r\n        }\r\n    }, [boardSquaresState])\r\n\r\n    // function to get reference to piece instance in state array of all pieces\r\n    const getPieceReference = (location) => {\r\n        const pieceArr = pieces.current.filter(piece => {\r\n            const { letter, number } = piece.currentLocation;\r\n            return letter === location.letter && number === location.number\r\n        })\r\n        const piece = pieceArr[0]\r\n        return piece\r\n    }\r\n\r\n    const updatePieceLocation = (currentLocation, newLocation) => {\r\n        const piece = getPieceReference(currentLocation)\r\n\r\n        piece.currentLocation = { letter: newLocation.letter, number: newLocation.number }\r\n    }\r\n\r\n    const addPiece = (piece) => {\r\n        setPieces([...pieces.current, piece])\r\n    }\r\n\r\n    const removePiece = (pieceLocation) => {\r\n        // get pieces from array of pieces excpet piece to remove\r\n        const newPiecesArr = pieces.current.filter(piece => {\r\n            const { letter, number } = piece.currentLocation\r\n\r\n            return letter !== pieceLocation.letter || number !== pieceLocation.number\r\n        })\r\n\r\n        return newPiecesArr\r\n    }\r\n\r\n    const movePiece = (selectedPiece, newLocation) => {\r\n        // get piece at clicked spot, will be null if no piece\r\n        const pieceAtNewSpot = getPieceReference(newLocation)\r\n\r\n        // this is an array of length 1 if square is open\r\n        const newSquareisOpen = selectedPieceOpenSpots.current.filter(spot => spot.letter === newLocation.letter && spot.number === newLocation.number)\r\n        // if new square is not available, return false\r\n        if (newSquareisOpen.length === 0) {\r\n            return false\r\n        } else {\r\n            // send message to server that a piece was just moved\r\n            socket.current.emit('userMovedPiece', { startLocation: selectedPiece.currentLocation, endLocation: newLocation })\r\n            // update which team is up\r\n            if (teamUpRef.current === 'black') {\r\n                setTeamUp('white')\r\n            } else if (teamUpRef.current === 'white') {\r\n                setTeamUp('black')\r\n            }\r\n\r\n            // if there is another piece on that square, remove it from the state\r\n            if (pieceAtNewSpot) {\r\n                // remove piece at the new location\r\n                const newPiecesArr = removePiece(newLocation)\r\n                // update the location of the moved piece\r\n                updatePieceLocation(selectedPiece.currentLocation, newLocation)\r\n                // update pieces state with new array of pieces\r\n                setPieces(newPiecesArr)\r\n                // update array of pieces taken\r\n                updatePiecesTaken(pieceAtNewSpot)\r\n                // send piece taken to server\r\n                socket.current.emit('pieceTaken', pieceAtNewSpot)\r\n\r\n                // if piece taken is the king, emit the loss to the server\r\n                if (pieceAtNewSpot.pieceType === 'king') {\r\n                    socket.current.emit('kingTaken', teamRef.current)\r\n                }\r\n            } else {\r\n                // if no piece is at new square, just update the pieces on the board\r\n                selectedPiece.setCurrentLocation({ letter: newLocation.letter, number: newLocation.number })\r\n                renderPieces();\r\n            }\r\n        }\r\n    }\r\n\r\n    // force a piece to move if server sends opponent's move\r\n    const forceMove = (startLocation, newLocation) => {\r\n        console.log('start location: ', startLocation)\r\n        const selectedPiece = getPieceReference(startLocation)\r\n        console.log(pieces.current)\r\n        const pieceAtNewSpot = getPieceReference(newLocation)\r\n\r\n        // if there is another piece on that square, remove it from the state\r\n        if (pieceAtNewSpot) {\r\n            // remove piece at the new location\r\n            const newPiecesArr = removePiece(newLocation)\r\n            // update the location of the moved piece\r\n            updatePieceLocation(selectedPiece.currentLocation, newLocation)\r\n            // update pieces state with new array of pieces\r\n            setPieces(newPiecesArr)\r\n            // update array of pieces taken\r\n            updatePiecesTaken(pieceAtNewSpot)\r\n        } else {\r\n            // if no piece is at new square, just update the pieces on the board\r\n            selectedPiece.setCurrentLocation({ letter: newLocation.letter, number: newLocation.number })\r\n            renderPieces();\r\n        }\r\n    }\r\n\r\n    const createTeamBoard = team => {\r\n        // create each square of board and push it to an array\r\n        let boardSquares = []\r\n\r\n        let isDarkSquare = true\r\n        for (let i = 8; i > 0; i--) {\r\n            letters.forEach(letter => {\r\n                boardSquares.push(<div className={isDarkSquare ? 'board-square square-light' : 'board-square square-dark'} data-letter={letter} data-number={i} data-location={letter + i}>\r\n                    <div className='square-available-circle'></div>\r\n                    <div className='square-clickable' onClick={handleSquareClick}></div>\r\n                </div>)\r\n                // only change isDarkSquare boolean if not on last letter\r\n                if (letter !== 'h') {\r\n                    isDarkSquare = !isDarkSquare\r\n                }\r\n            })\r\n        }\r\n\r\n        // if the team is black, reverse the board array\r\n        if (team === 'black') {\r\n            boardSquares = boardSquares.reverse()\r\n        }\r\n        console.log('setting board squares state')\r\n        return setBoardSquaresState(boardSquares)\r\n    }\r\n\r\n    const renderPieces = () => {\r\n        console.log('rendering pieces')\r\n        // clear all pieces off of board before rendering back to board\r\n        document.querySelectorAll('.piece-icon-container').forEach(iconEle => {\r\n            iconEle.remove()\r\n        })\r\n\r\n        pieces.current.forEach(piece => {\r\n            const pieceLocation = piece.currentLocation.letter + piece.currentLocation.number\r\n            // square on board for piece to be added to\r\n            const locationNode = document.querySelector(`[data-location=${pieceLocation}]`)\r\n            // create element to contain piece icon\r\n            const iconEle = document.createElement('div')\r\n            iconEle.innerHTML = pieceIcons[piece.pieceType]\r\n            iconEle.className = 'piece-icon-container ' + `icon-container-${piece.color}`\r\n\r\n            // append piece to square on board\r\n            locationNode.appendChild(iconEle)\r\n        })\r\n\r\n        // clear all circles from board\r\n        document.querySelectorAll('.square-available-circle').forEach(circleEle => {\r\n            circleEle.style.opacity = 0\r\n        })\r\n\r\n        // reset states\r\n        setCurrentlySelectedPiece({})\r\n\r\n        setSelectedPieceOpenSpots([])\r\n\r\n        // send message to server that pieces array has changed since this function gets called when a piece gets moved\r\n        if (isSocketConnected) {\r\n            console.log('updating pieces on server')\r\n            socket.current.emit('piecesUpdate', { pieces: pieces.current, teamUp: teamUpRef.current })\r\n        }\r\n    }\r\n\r\n    const handleSquareClick = (event) => {\r\n        console.log('click')\r\n        // if the team that is up is not the user's team or game is not active, don't let anything happen on click\r\n        if (teamUpRef.current !== teamRef.current || !isGameActiveRef.current) {\r\n            console.log('you are not up')\r\n            return\r\n        }\r\n        const clickedLocationLetter = event.target.parentElement.getAttribute('data-letter')\r\n        const clickedLocationNumber = parseInt(event.target.parentElement.getAttribute('data-number'))\r\n        // get the piece at the given square, if no piece will be undefined\r\n        const pieceAtClickedSquare = getPieceReference({ letter: clickedLocationLetter, number: clickedLocationNumber })\r\n        // get the currently selected piece, will be undefined if no piece is selected\r\n        let selectedPiece = getPieceReference(currentlySelectedPiece.current)\r\n        // if a piece is selected and a piece is at the square you are trying to move to , check if they are the same color\r\n        let piecesAreSameTeam = selectedPiece && pieceAtClickedSquare ? selectedPiece.color === pieceAtClickedSquare.color : false\r\n\r\n        console.log(pieceAtClickedSquare)\r\n        // if there is a selected piece, user must be looking to move that piece\r\n        if (selectedPiece && !piecesAreSameTeam && (selectedPiece.currentLocation.letter !== clickedLocationLetter || selectedPiece.currentLocation.number !== clickedLocationNumber)) {\r\n            movePiece(selectedPiece, { letter: clickedLocationLetter, number: clickedLocationNumber })\r\n        }\r\n        // if user is clicking a piece to see where it can move to, show available squares\r\n        else if (pieceAtClickedSquare) {\r\n            // update state to contain open spots for selcted piece\r\n            // setSelectedPieceOpenSpots([])\r\n\r\n            // if another square is already clicked and user is swithcing to another piece\r\n            if (selectedPiece && (clickedLocationLetter !== selectedPiece.currentLocation.letter || clickedLocationNumber !== selectedPiece.currentLocation.number)) {\r\n                // update currently selected piece state to new piece\r\n                setCurrentlySelectedPiece({ letter: clickedLocationLetter, number: clickedLocationNumber })\r\n                // update available spots state\r\n                setSelectedPieceOpenSpots(getPotentialMoves(pieceAtClickedSquare, pieces.current))\r\n            }\r\n            // if user is just re-selcting their currently selcted piece, remove open spots from board\r\n            else if (selectedPiece && clickedLocationLetter === selectedPiece.currentLocation.letter && clickedLocationNumber === selectedPiece.currentLocation.number) {\r\n                setSelectedPieceOpenSpots([])\r\n                // reset currently selected piece state\r\n                setCurrentlySelectedPiece({})\r\n            }\r\n\r\n            // if no other piece is currently selected, select piece and show available spots if team is same as user's team\r\n            else if (!selectedPiece && pieceAtClickedSquare.color === teamRef.current) {\r\n                setCurrentlySelectedPiece({ letter: clickedLocationLetter, number: clickedLocationNumber })\r\n                setSelectedPieceOpenSpots(getPotentialMoves(pieceAtClickedSquare, pieces.current))\r\n            }\r\n\r\n            else {\r\n                console.log('user is on a different team than selected piece')\r\n            }\r\n\r\n        }\r\n\r\n        else {\r\n            console.log('nothing is happening')\r\n        }\r\n    }\r\n\r\n    return (\r\n        // based on screen's width, determine height of board\r\n        <div className='board' style={screenWidth < 850 ? { height: `${screenWidth}px` } : { height: `850px` }}>\r\n            {/* set font size to be inherited by each piece icon */}\r\n            <div className='board-squares-wrapper' style={screenWidth < 850 ? {fontSize: `${screenWidth / 8 * .8}px`} : {fontSize: `${850 / 8 * .8}px`}}>\r\n                {boardSquaresState.map(square => square)}\r\n            </div>\r\n            <div className={`pending-game-overlay${!isGameActiveState ? ' show-pending-overlay' : ''}`}>\r\n                <div className='pending-game-text-container'>\r\n                    <h2 className='pending-game-header'>{gamePendingHeading}</h2>\r\n                    <p>\r\n                        {`Invite your friends!  Send them your current url or have them join with the room's ID of ${roomId}`}\r\n                    </p>\r\n                    {gamePendingButtonText && teamState !== 'watcher' ?\r\n                        // show button if there is text for the button\r\n                        <button className='btn btn-primary pending-game-button' onClick={handleOverlayButtonClick}>{gamePendingButtonText}</button> :\r\n                        false\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","D:\\code\\personal-projects\\chess-game\\src\\pages\\Home\\index.js",["109"],"D:\\code\\personal-projects\\chess-game\\src\\components\\GameBoard\\board.js",["110","111","112"],"import React from 'react'\r\n\r\nimport Pawn from '../../classes/Pawn'\r\nimport Knight from '../../classes/Knight'\r\nimport Rook from '../../classes/Rook'\r\nimport Bishop from '../../classes/Bishop'\r\nimport Queen from '../../classes/Queen'\r\nimport King from '../../classes/King'\r\n\r\nconst letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\n\r\nfunction createNewBoardPieces() {\r\n    const pawns = []\r\n    // create white pawns and push them to the array\r\n    for (let i = 0; i < 8; i++) {\r\n        let newPawn = new Pawn({ letter: letters[i], number: 2 }, 'white')\r\n\r\n        pawns.push(newPawn)\r\n    }\r\n    // create black pawns and push them to the array\r\n    for (let i = 0; i < 8; i++) {\r\n        let newPawn = new Pawn({ letter: letters[i], number: 7 }, 'black')\r\n\r\n        pawns.push(newPawn)\r\n    }\r\n\r\n    const knights = [\r\n        new Knight({ letter: 'b', number: 1 }, 'white'),\r\n        new Knight({ letter: 'g', number: 1 }, 'white'),\r\n        new Knight({ letter: 'b', number: 8 }, 'black'),\r\n        new Knight({ letter: 'g', number: 8 }, 'black')\r\n    ]\r\n\r\n    const rooks = [\r\n        new Rook({ letter: 'a', number: 1 }, 'white'),\r\n        new Rook({ letter: 'h', number: 1 }, 'white'),\r\n        new Rook({ letter: 'a', number: 8 }, 'black'),\r\n        new Rook({ letter: 'h', number: 8 }, 'black'),\r\n    ]\r\n\r\n    const bishops = [\r\n        new Bishop({ letter: 'c', number: 1 }, 'white'),\r\n        new Bishop({ letter: 'f', number: 1 }, 'white'),\r\n        new Bishop({ letter: 'c', number: 8 }, 'black'),\r\n        new Bishop({ letter: 'f', number: 8 }, 'black'),\r\n    ]\r\n\r\n    const queens = [\r\n        new Queen({ letter: 'd', number: 1 }, 'white'),\r\n        new Queen({ letter: 'd', number: 8 }, 'black')\r\n    ]\r\n\r\n    const kings = [\r\n        new King({ letter: 'e', number: 1 }, 'white'),\r\n        new King({ letter: 'e', number: 8 }, 'black')\r\n    ]\r\n\r\n    return [...queens, ...bishops, ...rooks, ...knights, ...pawns, ...kings]\r\n}\r\n\r\nfunction createWhiteTeamBoard(squareClickFunction) {\r\n    console.log('creating board')\r\n    // create each square of board and push it to an array\r\n    const boardSquares = []\r\n\r\n    let isDarkSquare = true\r\n    for (let i = 8; i > 0; i--) {\r\n        letters.forEach(letter => {\r\n            boardSquares.push(<div className={isDarkSquare ? 'board-square square-light' : 'board-square square-dark'} data-letter={letter} data-number={i} data-location={letter + i}>\r\n                <div className='square-available-circle'></div>\r\n                <div className='square-clickable' onClick={squareClickFunction}></div>\r\n            </div>)\r\n            // only change isDarkSquare boolean if not on last letter\r\n            if (letter !== 'h') {\r\n                isDarkSquare = !isDarkSquare\r\n            }\r\n        })\r\n    }\r\n\r\n    return boardSquares\r\n}\r\n\r\nfunction createBlackTeamBoard(squareClickFunction) {\r\n    // because board for black team is the reverse of the white team's, we can\r\n    // just call the white board creation function and reverse the array\r\n    return createWhiteTeamBoard(squareClickFunction).reverse()\r\n}\r\n\r\nfunction getPotentialMoves(chosenPiece, pieces, getPieceReferenceFunc) {\r\n    // find which piece is at the given location\r\n    // const chosenPiece = getPieceReferenceFunc(pieceLocation)\r\n\r\n    // get possible locations of piece\r\n    let possibleLocations = chosenPiece.getPossibleMoves()\r\n\r\n    // if piece is a pawn at it's starting spot, allow a two square move\r\n    if (chosenPiece.pieceType === 'pawn') {\r\n        // if piece is white and at number of 2, allow 2 square jump\r\n        if (chosenPiece.color === 'white' && chosenPiece.currentLocation.number === 2) {\r\n            possibleLocations.push({ letter: chosenPiece.currentLocation.letter, number: 4 })\r\n        }\r\n        // if piece is black and at number of 7, allow 2 square jump\r\n        else if (chosenPiece.color === 'black' && chosenPiece.currentLocation.number === 7) {\r\n            possibleLocations.push({ letter: chosenPiece.currentLocation.letter, number: 5 })\r\n        }\r\n\r\n        // if piece is white and there is a piece up and to it's diagonal, add that square as an option\r\n        if (chosenPiece.color === 'white') {\r\n            // filter pieces for any pieces to the pawn's diagonal\r\n            const diagonalPieces = pieces.filter(pieces => {\r\n                const { letter, number } = pieces.currentLocation\r\n                const letterIndex = letters.indexOf(chosenPiece.currentLocation.letter)\r\n                const upAndLeftSquareLetter = letters[letterIndex - 1]\r\n                const upAndRightSquareLetter = letters[letterIndex + 1]\r\n                return (letter === upAndLeftSquareLetter || letter === upAndRightSquareLetter) && number === chosenPiece.currentLocation.number + 1\r\n            })\r\n            diagonalPieces.forEach(piece => possibleLocations.push(piece.currentLocation))\r\n        }\r\n        // allow diagonal attacks for black pieces as well\r\n        else if (chosenPiece.color === 'black') {\r\n            // filter pieces for any pieces to the pawn's diagonal\r\n            const diagonalPieces = pieces.filter(pieces => {\r\n                const { letter, number } = pieces.currentLocation\r\n                const letterIndex = letters.indexOf(chosenPiece.currentLocation.letter)\r\n                const downAndLeftSquareLetter = letters[letterIndex - 1]\r\n                const downAndRightSquareLetter = letters[letterIndex + 1]\r\n                return (letter === downAndLeftSquareLetter || letter === downAndRightSquareLetter) && number === chosenPiece.currentLocation.number - 1\r\n            })\r\n            diagonalPieces.forEach(piece => possibleLocations.push(piece.currentLocation))\r\n        }\r\n    }\r\n\r\n    // locations of friendly pieces blocking a path\r\n    const blockedSpots = []\r\n\r\n    // filter possible locations by pieces locations of other pieces on board\r\n    let availableSpots = possibleLocations.filter(newLocation => {\r\n        // iterate over pieces on board\r\n        for (var i = 0; i < pieces.length; i++) {\r\n            let piece = pieces[i]\r\n\r\n            // check if piece's location matches potential location and is not friendly\r\n            if (piece.currentLocation.letter === newLocation.letter &&\r\n                piece.currentLocation.number === newLocation.number) {\r\n                // if piece being moved is a knight, we don't need to worry about a path being blocked by a friendly piece\r\n                if (chosenPiece.pieceType === 'knight') {\r\n                    // check if piece is of same color as knight\r\n\r\n                    if (piece.color === chosenPiece.color) {\r\n                        // if pieces are same color, don't let knight move there\r\n                        return false\r\n                    } else {\r\n                        // if pieces are different colors, allow knight to move there\r\n                        return true\r\n                    }\r\n                } else if (piece.color === chosenPiece.color) {\r\n                    // add location of piece to blockedSpots array\r\n                    blockedSpots.push(piece.currentLocation)\r\n                    // return false to remove this spot option\r\n                    return false\r\n                } else if (piece.color !== chosenPiece.color) {\r\n                    // if piece is an enemy piece, add that piece to blocked spots but keep the spot as available\r\n                    // this will restrict player from accessing any spots beyond the enemy\r\n                    blockedSpots.push(piece.currentLocation)\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        // return true if nothing has been returned yet\r\n        return true\r\n    })\r\n\r\n    // if any paths are blocked, remove the blocked spots from possible moves\r\n    if (blockedSpots.length > 0) {\r\n        availableSpots = chosenPiece.removeBlockedPaths(blockedSpots, availableSpots)\r\n    }\r\n\r\n    return availableSpots\r\n}\r\n\r\nfunction createPiecesInstancesArray(piecesArr) {\r\n    const pieces = []\r\n    piecesArr.forEach(piece => {\r\n        const { startLocation, color, currentLocation } = piece\r\n\r\n        // based on what the piece is, create an instance of that piece and push it to the new arr\r\n        switch(piece.pieceType) {\r\n            case 'bishop':\r\n                pieces.push(new Bishop(startLocation, color, currentLocation))\r\n                break;\r\n            case 'king':\r\n                pieces.push(new King(startLocation, color, currentLocation))\r\n                break;\r\n            case 'knight':\r\n                pieces.push(new Knight(startLocation, color, currentLocation))\r\n                break;\r\n            case 'pawn':\r\n                pieces.push(new Pawn(startLocation, color, currentLocation))\r\n                break;\r\n            case 'queen':\r\n                pieces.push(new Queen(startLocation, color, currentLocation))\r\n                break;\r\n            case 'rook':\r\n                pieces.push(new Rook(startLocation, color, currentLocation))\r\n                break;\r\n        }\r\n    })\r\n\r\n    return pieces\r\n}\r\n\r\nexport default {\r\n    createNewBoardPieces: createNewBoardPieces,\r\n    createWhiteTeamBoard: createWhiteTeamBoard,\r\n    createBlackTeamBoard: createBlackTeamBoard,\r\n    getPotentialMoves: getPotentialMoves,\r\n    createPiecesInstancesArray: createPiecesInstancesArray\r\n}","D:\\code\\personal-projects\\chess-game\\src\\classes\\King.js",[],"D:\\code\\personal-projects\\chess-game\\src\\components\\PlayersAside\\index.js",["113","114","115"],"import React, { useState, useRef, useEffect } from 'react'\r\nimport './index.css'\r\n\r\nconst pieceIcons = {\r\n    rook: <i class=\"fas fa-chess-rook taken-piece-icon\"></i>,\r\n    knight: <i class=\"fas fa-chess-knight taken-piece-icon\"></i>,\r\n    bishop: <i class=\"fas fa-chess-bishop taken-piece-icon\"></i>,\r\n    queen: <i class=\"fas fa-chess-queen taken-piece-icon\"></i>,\r\n    king: <i class=\"fas fa-chess-king taken-piece-icon\"></i>,\r\n    pawn: <i class=\"fas fa-chess-pawn taken-piece-icon\"></i>\r\n}\r\n\r\nexport default function PlayersAside(props) {\r\n    const { \r\n        socket,\r\n        isSocketConnected,\r\n        teamRef,\r\n        teamState, \r\n        whitePiecesTakenState, \r\n        blackPiecesTakenState, \r\n        whiteUsername, \r\n        blackUsername, \r\n        usernameRef,\r\n        usernameState,\r\n        watchers,\r\n    } = props\r\n    \r\n    const [drawIsAsked, setDrawIsAsked] = useState(false)\r\n    \r\n        useEffect(() => {\r\n            if (socket.current) {\r\n                socket.current.on('userWantsDraw', () => {\r\n                    // if the current user is on either team, ask if they want a draw\r\n                    if (teamRef.current === 'white' || teamRef.current === 'black') {\r\n                        setDrawIsAsked(true)\r\n                    }\r\n                })\r\n            }\r\n        }, [isSocketConnected])\r\n    \r\n    const askForDraw = () => {\r\n        // emite to server that user wants to draw\r\n        socket.current.emit('userWantsDraw')\r\n    }\r\n\r\n    const answerDraw = (doesAccept) => {\r\n        console.log('you answered draw with ', doesAccept)\r\n        // hide the text asking for a draw\r\n        setDrawIsAsked(false)\r\n\r\n        // if user accepts draw, send message to server to draw the game\r\n        if (doesAccept) {\r\n            socket.current.emit('userAcceptsDraw')\r\n        }\r\n    }\r\n\r\n    const playerResign = () => {\r\n        // emit to other users that user has resigned\r\n        socket.current.emit('resign', { username: usernameRef.current, team: teamRef.current })\r\n    }\r\n\r\n    const tradePlacesWithSpectator = (spectator) => {\r\n        // send message to server that a user and spectator are trading spots\r\n        socket.current.emit('givingSpotToSpectator', {\r\n            user: {\r\n                username: usernameRef.current,\r\n                team: teamRef.current\r\n            },\r\n            spectator: spectator\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <div className='player-btns'>\r\n                <button onClick={askForDraw}>Draw</button>\r\n                <button onClick={playerResign}>Resign</button>\r\n            </div>\r\n            <div className='draw-question-wrapper' style={drawIsAsked ? {} : {opacity: 0}}>\r\n                <p>Would you like to call it a draw?</p>\r\n                <button className='draw-btn-yes' onClick={() => answerDraw(true)}>Yes</button>\r\n                <button className='draw-btn-no' onClick={() => answerDraw(false)}>No</button>\r\n            </div>\r\n            <div className='player-info-container'>\r\n                <h3 className='player-username'>\r\n                    <span><i class=\"fas fa-chess-king team-icon icon-white\"></i> </span>\r\n                    {!whiteUsername ? 'No Player': whiteUsername === usernameState ? 'You': whiteUsername}\r\n                </h3>\r\n                <div className='taken-pieces-container taken-pieces-black'>\r\n                    {blackPiecesTakenState.map(piece => {\r\n                        return (\r\n                            <div className='taken-piece-container'>\r\n                                {pieceIcons[piece]}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <div className='player-info-container'>\r\n                <h3 className='player-username'>\r\n                    <span><i class=\"fas fa-chess-king team-icon icon-black\"></i> </span>\r\n                    {!blackUsername ? 'No Player': blackUsername === usernameState ? 'You': blackUsername}\r\n                </h3>\r\n                <div className='taken-pieces-container taken-pieces-white'>\r\n                    {whitePiecesTakenState.map(piece => {\r\n                        return (\r\n                            <div className='taken-piece-container'>\r\n                                {pieceIcons[piece]}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <div className='spectators-container'>\r\n                {watchers.map(watcher => {\r\n                    return <p>\r\n                        {watcher === usernameRef.current ? 'You' : watcher} \r\n                        <span>\r\n                            {/* if user is on a team, allow them to give their place to a spectator */}\r\n                            {teamRef.current === 'white' || teamRef.current === 'black' ? \r\n                                <button className='btn btn-primary' onClick={() => tradePlacesWithSpectator(watcher)}>Trade Places</button> :\r\n                                ''\r\n                            }\r\n                        </span>\r\n                    </p>\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\chess-game\\src\\components\\HomeHeader\\index.js",[],{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":1,"column":8,"nodeType":"122","messageId":"123","endLine":1,"endColumn":12},{"ruleId":"124","severity":1,"message":"125","line":313,"column":8,"nodeType":"126","endLine":313,"endColumn":10,"suggestions":"127"},{"ruleId":"120","severity":1,"message":"128","line":1,"column":7,"nodeType":"122","messageId":"123","endLine":1,"endColumn":11},{"ruleId":"120","severity":1,"message":"129","line":2,"column":7,"nodeType":"122","messageId":"123","endLine":2,"endColumn":13},{"ruleId":"120","severity":1,"message":"130","line":3,"column":7,"nodeType":"122","messageId":"123","endLine":3,"endColumn":11},{"ruleId":"120","severity":1,"message":"131","line":4,"column":7,"nodeType":"122","messageId":"123","endLine":4,"endColumn":13},{"ruleId":"120","severity":1,"message":"132","line":5,"column":7,"nodeType":"122","messageId":"123","endLine":5,"endColumn":12},{"ruleId":"133","severity":1,"message":"134","line":26,"column":86,"nodeType":"135","messageId":"136","endLine":26,"endColumn":88},{"ruleId":"133","severity":1,"message":"134","line":26,"column":142,"nodeType":"135","messageId":"136","endLine":26,"endColumn":144},{"ruleId":"137","severity":1,"message":"138","line":69,"column":5,"nodeType":"139","messageId":"136","endLine":71,"endColumn":6},{"ruleId":"116","replacedBy":"140"},{"ruleId":"118","replacedBy":"141"},{"ruleId":"133","severity":1,"message":"134","line":11,"column":36,"nodeType":"135","messageId":"136","endLine":11,"endColumn":38},{"ruleId":"120","severity":1,"message":"142","line":1,"column":38,"nodeType":"122","messageId":"123","endLine":1,"endColumn":47},{"ruleId":"120","severity":1,"message":"143","line":4,"column":10,"nodeType":"122","messageId":"123","endLine":4,"endColumn":19},{"ruleId":"120","severity":1,"message":"144","line":5,"column":10,"nodeType":"122","messageId":"123","endLine":5,"endColumn":16},{"ruleId":"120","severity":1,"message":"145","line":31,"column":9,"nodeType":"122","messageId":"123","endLine":31,"endColumn":20},{"ruleId":"120","severity":1,"message":"146","line":32,"column":9,"nodeType":"122","messageId":"123","endLine":32,"endColumn":22},{"ruleId":"120","severity":1,"message":"147","line":34,"column":9,"nodeType":"122","messageId":"123","endLine":34,"endColumn":20},{"ruleId":"120","severity":1,"message":"148","line":36,"column":9,"nodeType":"122","messageId":"123","endLine":36,"endColumn":17},{"ruleId":"120","severity":1,"message":"149","line":43,"column":9,"nodeType":"122","messageId":"123","endLine":43,"endColumn":30},{"ruleId":"120","severity":1,"message":"150","line":44,"column":9,"nodeType":"122","messageId":"123","endLine":44,"endColumn":33},{"ruleId":"124","severity":1,"message":"151","line":104,"column":8,"nodeType":"126","endLine":104,"endColumn":10,"suggestions":"152"},{"ruleId":"124","severity":1,"message":"153","line":134,"column":8,"nodeType":"126","endLine":134,"endColumn":27,"suggestions":"154"},{"ruleId":"124","severity":1,"message":"155","line":144,"column":8,"nodeType":"126","endLine":144,"endColumn":19,"suggestions":"156"},{"ruleId":"124","severity":1,"message":"157","line":155,"column":8,"nodeType":"126","endLine":155,"endColumn":27,"suggestions":"158"},{"ruleId":"120","severity":1,"message":"159","line":173,"column":11,"nodeType":"122","messageId":"123","endLine":173,"endColumn":19},{"ruleId":"160","severity":1,"message":"161","line":262,"column":29,"nodeType":"162","messageId":"163","endLine":271,"endColumn":14},{"ruleId":"164","severity":1,"message":"165","line":296,"column":57,"nodeType":"135","messageId":"166","endLine":296,"endColumn":58},{"ruleId":"120","severity":1,"message":"167","line":1,"column":28,"nodeType":"122","messageId":"123","endLine":1,"endColumn":36},{"ruleId":"160","severity":1,"message":"168","line":68,"column":25,"nodeType":"162","messageId":"163","endLine":77,"endColumn":10},{"ruleId":"169","severity":1,"message":"170","line":187,"column":9,"nodeType":"171","messageId":"172","endLine":206,"endColumn":10},{"ruleId":"173","severity":1,"message":"174","line":212,"column":1,"nodeType":"175","endLine":218,"endColumn":2},{"ruleId":"120","severity":1,"message":"176","line":1,"column":27,"nodeType":"122","messageId":"123","endLine":1,"endColumn":33},{"ruleId":"120","severity":1,"message":"177","line":18,"column":9,"nodeType":"122","messageId":"123","endLine":18,"endColumn":18},{"ruleId":"124","severity":1,"message":"178","line":39,"column":12,"nodeType":"126","endLine":39,"endColumn":31,"suggestions":"179"},"no-native-reassign",["180"],"no-negated-in-lhs",["181"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setSocket'. Either include it or remove the dependency array.","ArrayExpression",["182"],"'Pawn' is assigned a value but never used.","'Knight' is assigned a value but never used.","'Rook' is assigned a value but never used.","'Bishop' is assigned a value but never used.","'Queen' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-dupe-class-members","Duplicate name 'addPiece'.","MethodDefinition",["180"],["181"],"'Component' is defined but never used.","'useParams' is defined but never used.","'render' is defined but never used.","'usernameRef' is assigned a value but never used.","'usernameState' is assigned a value but never used.","'teamUpState' is assigned a value but never used.","'watchers' is assigned a value but never used.","'setGamePendingHeading' is assigned a value but never used.","'setGamePendingButtonText' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPieces'. Either include it or remove the dependency array.",["183"],"React Hook useEffect has missing dependencies: 'forceMove', 'setPieces', 'setTeamUp', 'socket', and 'teamUpRef'. Either include them or remove the dependency array.",["184"],"React Hook useEffect has a missing dependency: 'createTeamBoard'. Either include it or remove the dependency array.",["185"],"React Hook useEffect has a missing dependency: 'renderPieces'. Either include it or remove the dependency array.",["186"],"'addPiece' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'boardSquares', 'isDarkSquare', 'isDarkSquare', 'isDarkSquare'.","ArrowFunctionExpression","unsafeRefs","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'useState' is defined but never used.","Function declared in a loop contains unsafe references to variable(s) 'isDarkSquare', 'isDarkSquare', 'isDarkSquare'.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useRef' is defined but never used.","'teamState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'socket' and 'teamRef'. Either include them or remove the dependency array.",["187"],"no-global-assign","no-unsafe-negation",{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},"Update the dependencies array to be: [setSocket]",{"range":"200","text":"201"},"Update the dependencies array to be: [setPieces]",{"range":"202","text":"203"},"Update the dependencies array to be: [forceMove, isSocketConnected, setPieces, setTeamUp, socket, teamUpRef]",{"range":"204","text":"205"},"Update the dependencies array to be: [createTeamBoard, teamState]",{"range":"206","text":"207"},"Update the dependencies array to be: [boardSquaresState, renderPieces]",{"range":"208","text":"209"},"Update the dependencies array to be: [isSocketConnected, socket, teamRef]",{"range":"210","text":"211"},[12838,12840],"[setSocket]",[3674,3676],"[setPieces]",[4966,4985],"[forceMove, isSocketConnected, setPieces, setTeamUp, socket, teamUpRef]",[5329,5340],"[createTeamBoard, teamState]",[5826,5845],"[boardSquaresState, renderPieces]",[1321,1340],"[isSocketConnected, socket, teamRef]"]