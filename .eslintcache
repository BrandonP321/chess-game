[{"D:\\code\\personal-projects\\chess-game\\src\\index.js":"1","D:\\code\\personal-projects\\chess-game\\src\\App.js":"2","D:\\code\\personal-projects\\chess-game\\src\\reportWebVitals.js":"3","D:\\code\\personal-projects\\chess-game\\src\\pages\\GameRoom\\index.js":"4","D:\\code\\personal-projects\\chess-game\\src\\classes\\Board.js":"5","D:\\code\\personal-projects\\chess-game\\src\\classes\\Pawn.js":"6","D:\\code\\personal-projects\\chess-game\\src\\classes\\Rook.js":"7","D:\\code\\personal-projects\\chess-game\\src\\classes\\Bishop.js":"8","D:\\code\\personal-projects\\chess-game\\src\\classes\\Queen.js":"9","D:\\code\\personal-projects\\chess-game\\src\\classes\\Knight.js":"10","D:\\code\\personal-projects\\chess-game\\src\\classes\\Piece.js":"11","D:\\code\\personal-projects\\chess-game\\src\\components\\GameBoard\\index.js":"12","D:\\code\\personal-projects\\chess-game\\src\\pages\\Home\\index.js":"13","D:\\code\\personal-projects\\chess-game\\src\\components\\GameBoard\\board.js":"14"},{"size":500,"mtime":499162500000,"results":"15","hashOfConfig":"16"},{"size":541,"mtime":1608870746308,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":3730,"mtime":1608870746329,"results":"19","hashOfConfig":"16"},{"size":4713,"mtime":1608616119728,"results":"20","hashOfConfig":"16"},{"size":1381,"mtime":1608870746311,"results":"21","hashOfConfig":"16"},{"size":2432,"mtime":1608870746322,"results":"22","hashOfConfig":"16"},{"size":2670,"mtime":1608870746310,"results":"23","hashOfConfig":"16"},{"size":5137,"mtime":1608870746321,"results":"24","hashOfConfig":"16"},{"size":1202,"mtime":1608634617932,"results":"25","hashOfConfig":"16"},{"size":1296,"mtime":1608634617934,"results":"26","hashOfConfig":"16"},{"size":14468,"mtime":1608870746326,"results":"27","hashOfConfig":"16"},{"size":1895,"mtime":1608870746341,"results":"28","hashOfConfig":"16"},{"size":7970,"mtime":1608870746323,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"b24jsc",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"32"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"32"},"D:\\code\\personal-projects\\chess-game\\src\\index.js",[],["68","69"],"D:\\code\\personal-projects\\chess-game\\src\\App.js",["70"],"import logo from './logo.svg';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport './App.css';\r\nimport GameRoom from './pages/GameRoom'\r\nimport Home from './pages/Home'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path='/'>\r\n            <Home />\r\n          </Route>\r\n          <Route exact path='/game/:room'>\r\n            <GameRoom />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\code\\personal-projects\\chess-game\\src\\reportWebVitals.js",[],"D:\\code\\personal-projects\\chess-game\\src\\pages\\GameRoom\\index.js",["71"],"import React, { Component } from 'react'\r\nimport GameBoard from '../../components/GameBoard'\r\nimport './index.css'\r\n\r\nexport default class GameRoom extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>hi</h1>\r\n                <GameBoard />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","D:\\code\\personal-projects\\chess-game\\src\\classes\\Board.js",["72","73","74","75","76","77","78","79"],"const Pawn = require('./Pawn')\r\nconst Knight = require('./Knight')\r\nconst Rook = require('./Rook')\r\nconst Bishop = require('./Bishop')\r\nconst Queen = require('./Queen')\r\n\r\n\r\nclass Board {\r\n    constructor(pieces = []) {\r\n        this.pieces = pieces\r\n        this.letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\n    }\r\n\r\n    addPiece(piece) {\r\n        // add a new piece to the pieces array\r\n        this.pieces.push(piece)\r\n    }\r\n\r\n    removePiece(piece) {\r\n        // remove piece when it is taken off the board\r\n        // this.pieces = this.pieces.filter()\r\n    }\r\n\r\n    getPotentialMoves(pieceLocation) {\r\n        // find which piece is at the given location\r\n        const chosenPiece = this.pieces.filter(piece => piece.currentLocation.letter == pieceLocation.letter && piece.currentLocation.number == pieceLocation.number)[0]\r\n\r\n        // get possible locations of piece\r\n        let possibleLocations = chosenPiece.getPossibleMoves()\r\n\r\n        // locations of friendly pieces blocking a path\r\n        const blockedSpots = []\r\n\r\n        // filter possible locations by pieces locations of other pieces on board\r\n        let availableSpots = possibleLocations.filter(newLocation => {\r\n            // iterate over pieces on board\r\n            for (var i = 0; i < this.pieces.length; i++) {\r\n                let piece = this.pieces[i]\r\n\r\n\r\n                // if piece's location matches potential location and is not friendly\r\n                if (piece.currentLocation.letter === newLocation.letter &&\r\n                    piece.currentLocation.number === newLocation.number) {\r\n                    // if piece being moved is a knight, we don't need to worry about a path being blocked by a friendly piece\r\n                    if (chosenPiece.pieceType === 'knight') {\r\n                        return false\r\n                    } else if (piece.color === chosenPiece.color) {\r\n                        // add location of piece to blockedSpots array\r\n                        blockedSpots.push(piece.currentLocation)\r\n                        // return false to remove this spot option\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n            // return true if nothing has been returned yet\r\n            return true\r\n        })\r\n        \r\n        console.log('spots before removing paths:')\r\n        // if any paths are blocked, remove the blocked spots from possible moves\r\n        if (blockedSpots.length > 0) {\r\n            availableSpots = chosenPiece.removeBlockedPaths(blockedSpots, availableSpots)\r\n        }\r\n\r\n        \r\n        return availableSpots\r\n    }\r\n\r\n    addPiece(piece) {\r\n        this.pieces.push(piece)\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = Board;\r\n\r\n\r\n\r\n\r\n// // add all pieces to board\r\n// const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\n\r\n// const pawns = []\r\n// // create white pawns and push them to the array\r\n// for (let i = 0; i < 8; i++) {\r\n//     let newPawn = new Pawn({ letter: letters[i], number: 2 }, 'white')\r\n    \r\n//     pawns.push(newPawn)\r\n// }\r\n// // create black pawns and push them to the array\r\n// for (let i = 0; i < 8; i++) {\r\n//     let newPawn = new Pawn({ letter: letters[i], number: 7 }, 'black')\r\n    \r\n//     pawns.push(newPawn)\r\n// }\r\n\r\n// const knights = [\r\n//     new Knight({ letter: 'b', number: 1 }, 'white'),\r\n//     new Knight({ letter: 'g', number: 1 }, 'white'),\r\n//     new Knight({ letter: 'b', number: 8 }, 'black'),\r\n//     new Knight({ letter: 'g', number: 8 }, 'black')\r\n// ]\r\n\r\n// const rooks = [\r\n//     new Rook({ letter: 'a', number: 1 }, 'white'),\r\n//     new Rook({ letter: 'h', number: 1 }, 'white'),\r\n//     new Rook({ letter: 'a', number: 8 }, 'black'),\r\n//     new Rook({ letter: 'h', number: 8 }, 'black'),\r\n// ]\r\n\r\n// const bishops = [\r\n//     new Bishop({ letter: 'c', number: 1 }, 'white'),\r\n//     new Bishop({ letter: 'f', number: 1 }, 'white'),\r\n//     new Bishop({ letter: 'c', number: 8 }, 'black'),\r\n//     new Bishop({ letter: 'f', number: 8 }, 'black'),\r\n// ]\r\n\r\n// const queens = [\r\n//     new Queen({ letter: 'd', number: 1 }, 'white'),\r\n//     new Queen({ letter: 'd', number: 8 }, 'black')\r\n// ]\r\n\r\n// // push pieces from their arrays to the new Board\r\n// // const board = new Board([...pawns, ...knights, ...rooks, ...bishops, ...queens])\r\n\r\n// const board = new Board([\r\n//     new Rook({ letter: 'd', number: 3}, 'white'), \r\n//     new Pawn({ letter: 'f', number: 3 }, 'white'),\r\n//     new Pawn({ letter: 'd', number: 1 }, 'white'),\r\n//     new Pawn({ letter: 'a', number: 3 }, 'white'),\r\n//     new Pawn({ letter: 'd', number: 7 }, 'white'),\r\n// ])\r\n\r\n// console.log('moves:')\r\n// console.log(board.getPotentialMoves({ letter: 'd', number: 3 }).length)",["80","81"],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Pawn.js",["82"],"const Piece = require('./Piece')\r\n\r\nclass Pawn extends Piece {\r\n    constructor(startLocation, color) {\r\n        super(startLocation, color)\r\n        this.pieceType = 'pawn'\r\n        this.moveChanges = [\r\n            {\r\n                letter: 0,\r\n                number: this.color == 'black' ? -1: 1\r\n            }\r\n        ]\r\n    }\r\n    \r\n    removeBlockedPaths(blockedSpotsArr, availableSpotsArr) {\r\n        let availableSpots = availableSpotsArr;\r\n\r\n        blockedSpotsArr.forEach(spot => {\r\n            // if spot is on a different letter square than current, ignore since that piece can be attacked\r\n            if (spot.letter !== this.currentLocation.letter) {\r\n                return false\r\n            }\r\n            // if blocked spot is above current, block all spots above it including it\r\n            if (spot.number > this.currentLocation.number) {\r\n                availableSpots = availableSpots.filter(openSpot => openSpot.number >= spot.number && openSpot.letter !== this.currentLocation.letter)\r\n            } else {\r\n                // if blocked spot is below current, block all spots beneath it including it\r\n                availableSpots = availableSpots.filter(openSpot => openSpot.number <= spot.number && openSpot.letter !== this.currentLocation.letter)\r\n            }\r\n        })\r\n\r\n        return availableSpots\r\n    }\r\n}\r\n\r\nmodule.exports = Pawn;\r\n","D:\\code\\personal-projects\\chess-game\\src\\classes\\Rook.js",[],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Bishop.js",[],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Queen.js",[],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Knight.js",[],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Piece.js",[],["83","84"],"D:\\code\\personal-projects\\chess-game\\src\\components\\GameBoard\\index.js",["85","86","87","88","89","90","91","92","93","94","95","96","97"],"import React, { useState, useEffect, Component } from 'react'\r\n// import Queen from '../../classes/Queen'\r\n// import Board from '../../classes/Board'\r\nimport createNewBoard from './createBoard'\r\nimport './index.css'\r\n\r\nexport default function GameBoard() {\r\n    const pieceIcons = {\r\n        rook: '<i class=\"fas fa-chess-rook\"></i>',\r\n        knight: '<i class=\"fas fa-chess-knight\"></i>',\r\n        bishop: '<i class=\"fas fa-chess-bishop\"></i>',\r\n        queen: '<i class=\"fas fa-chess-queen\"></i>',\r\n        king: '<i class=\"fas fa-chess-king\"></i>',\r\n        pawn: '<i class=\"fas fa-chess-pawn\"></i>'\r\n    }\r\n\r\n\r\n    const [pieces, setPieces] = useState(createNewBoard())\r\n    const [currentlySelectedPiece, setCurrentlySelectedPiece] = useState({})\r\n\r\n\r\n    // update piece locations on page when location in state changes\r\n    useEffect(() => {\r\n        pieces.forEach(piece => {\r\n            const pieceLocation = piece.currentLocation.letter + piece.currentLocation.number\r\n            // square on board for piece to be added to\r\n            const locationNode = document.querySelector(`[data-location=${pieceLocation}]`)\r\n            // create element to contain piece icon\r\n            const iconEle = document.createElement('div')\r\n            iconEle.innerHTML = pieceIcons[piece.pieceType]\r\n            iconEle.className = 'piece-icon-container'\r\n\r\n            // append piece to square on board\r\n            locationNode.appendChild(iconEle)\r\n        })\r\n    }, [pieces])\r\n\r\n    const addPiece = (piece) => {\r\n        setPieces([...pieces, piece])\r\n    }\r\n\r\n    const removePiece = (pieceLocation) => {\r\n        // remove piece by location\r\n    }\r\n\r\n    const getPotentialMoves = (pieceLocation) => {\r\n        // find which piece is at the given location\r\n        const chosenPiece = pieces.filter(piece => piece.currentLocation.letter == pieceLocation.letter && piece.currentLocation.number == pieceLocation.number)[0]\r\n        console.log(pieceLocation)\r\n        // get possible locations of piece\r\n        let possibleLocations = chosenPiece.getPossibleMoves()\r\n\r\n        // locations of friendly pieces blocking a path\r\n        const blockedSpots = []\r\n\r\n        // filter possible locations by pieces locations of other pieces on board\r\n        let availableSpots = possibleLocations.filter(newLocation => {\r\n            // iterate over pieces on board\r\n            for (var i = 0; i < pieces.length; i++) {\r\n                let piece = pieces[i]\r\n\r\n                // if piece's location matches potential location and is not friendly\r\n                if (piece.currentLocation.letter === newLocation.letter &&\r\n                    piece.currentLocation.number === newLocation.number) {\r\n                    // if piece being moved is a knight, we don't need to worry about a path being blocked by a friendly piece\r\n                    if (chosenPiece.pieceType === 'knight') {\r\n                        return false\r\n                    } else if (piece.color === chosenPiece.color) {\r\n                        // add location of piece to blockedSpots array\r\n                        blockedSpots.push(piece.currentLocation)\r\n                        // return false to remove this spot option\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n            // return true if nothing has been returned yet\r\n            return true\r\n        })\r\n\r\n        // if any paths are blocked, remove the blocked spots from possible moves\r\n        if (blockedSpots.length > 0) {\r\n            availableSpots = chosenPiece.removeBlockedPaths(blockedSpots, availableSpots)\r\n        }\r\n\r\n        return availableSpots\r\n    }\r\n\r\n    const squareClick = (event) => {\r\n        // get location of square clicked\r\n        const locationLetter = event.target.parentElement.getAttribute('data-letter')\r\n        const locationNumber = parseInt(event.target.parentElement.getAttribute('data-number'))\r\n        const location = locationLetter + locationNumber\r\n\r\n        // if user is currently searching for a square to move a piece to, validate the move\r\n\r\n        // if user is clicking a piece to see where it can move to, show available options\r\n        // TODO: add if statement to this later\r\n\r\n        // check that square clicked has a piece on it\r\n        if (pieces.filter(piece => piece.currentLocation.letter === locationLetter && piece.currentLocation.number === locationNumber).length > 0) {\r\n            // first make sure no squares are being shown as having an open spot\r\n            const allSquares = document.querySelectorAll('.square-available-circle')\r\n            allSquares.forEach(square => {\r\n                square.style.opacity = 0\r\n            })\r\n            // if user is clicking a square other than the currently selected square, show possible move locations\r\n            if (locationLetter !== currentlySelectedPiece.letter || locationNumber !== currentlySelectedPiece.number) {\r\n                // update currently selected square in state\r\n                setCurrentlySelectedPiece({ letter: locationLetter, number: locationNumber })\r\n                const openSquares = getPotentialMoves({ letter: locationLetter, number: locationNumber })\r\n\r\n                openSquares.forEach(square => {\r\n                    // identify square at the given location\r\n                    const squareNode = document.querySelector(`[data-location=${square.letter + square.number}]`)\r\n                    // reference circle element showing that the square is open\r\n                    const squareCircle = squareNode.children[0]\r\n                    // give circle and opacity of .6\r\n                    squareCircle.style.opacity = .6\r\n                })\r\n            }  else {\r\n                // if user is clicking the piece they already have selected, reset state to nothing\r\n                setCurrentlySelectedPiece({})\r\n            }\r\n        }\r\n    }\r\n\r\n    console.log(getPotentialMoves({ letter: 'b', number: 1 }))\r\n\r\n    const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\n    // create each square of board and push it to an array\r\n    const boardSquares = []\r\n\r\n    let isDarkSquare = true\r\n    for (let i = 8; i > 0; i--) {\r\n        letters.forEach(letter => {\r\n            boardSquares.push(<div className={isDarkSquare ? 'board-square square-light' : 'board-square square-dark'} data-letter={letter} data-number={i} data-location={letter + i}>\r\n                <div className='square-available-circle'></div>\r\n                <div className='square-clickable' onClick={squareClick}></div>\r\n            </div>)\r\n            // only change isDarkSquare boolean if not on last letter\r\n            if (letter !== 'h') {\r\n                isDarkSquare = !isDarkSquare\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='board'>\r\n            {boardSquares.map(square => square)}\r\n        </div>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\chess-game\\src\\pages\\Home\\index.js",["98","99"],"import React, { useEffect, useState} from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nconst ENDPOINT = 'http://localhost:8000'\r\n\r\nexport default function Home() {\r\n    \r\n    let socket;\r\n\r\n    // on load, connect to socket server\r\n    useEffect(() => {\r\n        socket = socketIOClient(ENDPOINT)\r\n        \r\n        socket.on('connect', () => {\r\n            console.log('connected')\r\n        })\r\n        \r\n        socket.on('newRoomCreated', room => {\r\n            console.log('created room ' + room)\r\n            // redirect to game room with room's id\r\n            window.location.href = '/game/' + room\r\n        })\r\n        \r\n        socket.on('allowRoomJoin', room => {\r\n            // redirect to the game with the given room id\r\n            window.location.href = '/game/' + room\r\n        })\r\n\r\n    }, [])\r\n\r\n    const handleNewRoomCreate = () => {\r\n        // tell socket.io server to make a new room for the user\r\n        socket.emit('createNewRoom')\r\n    }\r\n\r\n    const handleAttemptRoomJoin = (event) => {\r\n        event.preventDefault();\r\n        \r\n        // roomid from input field\r\n        const roomId = event.target.children[0].value\r\n\r\n        // tell socket.io server to check for a room with the given id\r\n        socket.emit('joinExistingRoom', roomId)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h2>Create New Room</h2>\r\n                <button className='new-room-btn' onClick={handleNewRoomCreate}>Create New Room</button>\r\n            </div>\r\n            <div>\r\n                <h2>Join Existing Room</h2>\r\n                <form className='join-room-form' onSubmit={handleAttemptRoomJoin}>\r\n                    <input className='form-control' type='text' placeholder='Room ID'></input>\r\n                    <button className='join-room-btn'>Join</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\chess-game\\src\\components\\GameBoard\\board.js",["100","101"],"import React from 'react'\r\n\r\nimport Pawn from '../../classes/Pawn'\r\nimport Knight from '../../classes/Knight'\r\nimport Rook from '../../classes/Rook'\r\nimport Bishop from '../../classes/Bishop'\r\nimport Queen from '../../classes/Queen'\r\n\r\nconst letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\n\r\nfunction createNewBoardPieces() {\r\n    const pawns = []\r\n    // create white pawns and push them to the array\r\n    for (let i = 0; i < 8; i++) {\r\n        let newPawn = new Pawn({ letter: letters[i], number: 2 }, 'white')\r\n\r\n        pawns.push(newPawn)\r\n    }\r\n    // create black pawns and push them to the array\r\n    for (let i = 0; i < 8; i++) {\r\n        let newPawn = new Pawn({ letter: letters[i], number: 7 }, 'black')\r\n\r\n        pawns.push(newPawn)\r\n    }\r\n\r\n    const knights = [\r\n        new Knight({ letter: 'b', number: 1 }, 'white'),\r\n        new Knight({ letter: 'g', number: 1 }, 'white'),\r\n        new Knight({ letter: 'b', number: 8 }, 'black'),\r\n        new Knight({ letter: 'g', number: 8 }, 'black')\r\n    ]\r\n\r\n    const rooks = [\r\n        new Rook({ letter: 'a', number: 1 }, 'white'),\r\n        new Rook({ letter: 'h', number: 1 }, 'white'),\r\n        new Rook({ letter: 'a', number: 8 }, 'black'),\r\n        new Rook({ letter: 'h', number: 8 }, 'black'),\r\n    ]\r\n\r\n    const bishops = [\r\n        new Bishop({ letter: 'c', number: 1 }, 'white'),\r\n        new Bishop({ letter: 'f', number: 1 }, 'white'),\r\n        new Bishop({ letter: 'c', number: 8 }, 'black'),\r\n        new Bishop({ letter: 'f', number: 8 }, 'black'),\r\n    ]\r\n\r\n    const queens = [\r\n        new Queen({ letter: 'd', number: 1 }, 'white'),\r\n        new Queen({ letter: 'd', number: 8 }, 'black')\r\n    ]\r\n\r\n    return [...queens, ...bishops, ...rooks, ...knights, ...pawns]\r\n}\r\n\r\nfunction createWhiteTeamBoard(squareClickFunction) {\r\n    console.log('creating board')\r\n    // create each square of board and push it to an array\r\n    const boardSquares = []\r\n\r\n    let isDarkSquare = true\r\n    for (let i = 8; i > 0; i--) {\r\n        letters.forEach(letter => {\r\n            boardSquares.push(<div className={isDarkSquare ? 'board-square square-light' : 'board-square square-dark'} data-letter={letter} data-number={i} data-location={letter + i}>\r\n                <div className='square-available-circle'></div>\r\n                <div className='square-clickable' onClick={squareClickFunction}></div>\r\n            </div>)\r\n            // only change isDarkSquare boolean if not on last letter\r\n            if (letter !== 'h') {\r\n                isDarkSquare = !isDarkSquare\r\n            }\r\n        })\r\n    }\r\n\r\n    return boardSquares\r\n}\r\n\r\nfunction createBlackTeamBoard(squareClickFunction) {\r\n    // because board for black team is the reverse of the white team's, we can\r\n    // just call the white board creation function and reverse the array\r\n    return createWhiteTeamBoard(squareClickFunction).reverse()\r\n}\r\n\r\nfunction getPotentialMoves(chosenPiece, pieces, getPieceReferenceFunc) {\r\n    // find which piece is at the given location\r\n    // const chosenPiece = getPieceReferenceFunc(pieceLocation)\r\n\r\n    // get possible locations of piece\r\n    let possibleLocations = chosenPiece.getPossibleMoves()\r\n\r\n    // if piece is a pawn at it's starting spot, allow a two square move\r\n    if (chosenPiece.pieceType === 'pawn') {\r\n        // if piece is white and at number of 2, allow 2 square jump\r\n        if (chosenPiece.color === 'white' && chosenPiece.currentLocation.number === 2) {\r\n            possibleLocations.push({ letter: chosenPiece.currentLocation.letter, number: 4 })\r\n        }\r\n        // if piece is black and at number of 7, allow 2 square jump\r\n        else if (chosenPiece.color === 'black' && chosenPiece.currentLocation.number === 7) {\r\n            possibleLocations.push({ letter: chosenPiece.currentLocation.letter, number: 5 })\r\n        }\r\n\r\n        // if piece is white and there is a piece up and to it's diagonal, add that square as an option\r\n        if (chosenPiece.color === 'white') {\r\n            // filter pieces for any pieces to the pawn's diagonal\r\n            const diagonalPieces = pieces.filter(pieces => {\r\n                const { letter, number } = pieces.currentLocation\r\n                const letterIndex = letters.indexOf(chosenPiece.currentLocation.letter)\r\n                const upAndLeftSquareLetter = letters[letterIndex - 1]\r\n                const upAndRightSquareLetter = letters[letterIndex + 1]\r\n                return (letter === upAndLeftSquareLetter || letter === upAndRightSquareLetter) && number === chosenPiece.currentLocation.number + 1\r\n            })\r\n            diagonalPieces.forEach(piece => possibleLocations.push(piece.currentLocation))\r\n        }\r\n        // allow diagonal attacks for black pieces as well\r\n        else if (chosenPiece.color === 'black') {\r\n            // filter pieces for any pieces to the pawn's diagonal\r\n            const diagonalPieces = pieces.filter(pieces => {\r\n                const { letter, number } = pieces.currentLocation\r\n                const letterIndex = letters.indexOf(chosenPiece.currentLocation.letter)\r\n                const downAndLeftSquareLetter = letters[letterIndex - 1]\r\n                const downAndRightSquareLetter = letters[letterIndex + 1]\r\n                return (letter === downAndLeftSquareLetter || letter === downAndRightSquareLetter) && number === chosenPiece.currentLocation.number - 1\r\n            })\r\n            diagonalPieces.forEach(piece => possibleLocations.push(piece.currentLocation))\r\n        }\r\n    }\r\n\r\n    // locations of friendly pieces blocking a path\r\n    const blockedSpots = []\r\n\r\n    // filter possible locations by pieces locations of other pieces on board\r\n    let availableSpots = possibleLocations.filter(newLocation => {\r\n        // iterate over pieces on board\r\n        for (var i = 0; i < pieces.length; i++) {\r\n            let piece = pieces[i]\r\n\r\n            // check if piece's location matches potential location and is not friendly\r\n            if (piece.currentLocation.letter === newLocation.letter &&\r\n                piece.currentLocation.number === newLocation.number) {\r\n                // if piece being moved is a knight, we don't need to worry about a path being blocked by a friendly piece\r\n                if (chosenPiece.pieceType === 'knight') {\r\n                    // check if piece is of same color as knight\r\n\r\n                    if (piece.color === chosenPiece.color) {\r\n                        // if pieces are same color, don't let knight move there\r\n                        return false\r\n                    } else {\r\n                        // if pieces are different colors, allow knight to move there\r\n                        return true\r\n                    }\r\n                } else if (piece.color === chosenPiece.color) {\r\n                    // add location of piece to blockedSpots array\r\n                    blockedSpots.push(piece.currentLocation)\r\n                    // return false to remove this spot option\r\n                    return false\r\n                } else if (piece.color !== chosenPiece.color) {\r\n                    // if piece is an enemy piece, add that piece to blocked spots but keep the spot as available\r\n                    // this will restrict player from accessing any spots beyond the enemy\r\n                    blockedSpots.push(piece.currentLocation)\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        // return true if nothing has been returned yet\r\n        return true\r\n    })\r\n\r\n    // if any paths are blocked, remove the blocked spots from possible moves\r\n    if (blockedSpots.length > 0) {\r\n        availableSpots = chosenPiece.removeBlockedPaths(blockedSpots, availableSpots)\r\n    }\r\n\r\n    return availableSpots\r\n}\r\n\r\nexport default {\r\n    createNewBoardPieces: createNewBoardPieces,\r\n    createWhiteTeamBoard: createWhiteTeamBoard,\r\n    createBlackTeamBoard: createBlackTeamBoard,\r\n    getPotentialMoves: getPotentialMoves\r\n}",{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":1,"column":8,"nodeType":"108","messageId":"109","endLine":1,"endColumn":12},{"ruleId":"110","severity":1,"message":"111","line":77,"column":8,"nodeType":"112","endLine":77,"endColumn":16,"suggestions":"113"},{"ruleId":"106","severity":1,"message":"114","line":1,"column":7,"nodeType":"108","messageId":"109","endLine":1,"endColumn":11},{"ruleId":"106","severity":1,"message":"115","line":2,"column":7,"nodeType":"108","messageId":"109","endLine":2,"endColumn":13},{"ruleId":"106","severity":1,"message":"116","line":3,"column":7,"nodeType":"108","messageId":"109","endLine":3,"endColumn":11},{"ruleId":"106","severity":1,"message":"117","line":4,"column":7,"nodeType":"108","messageId":"109","endLine":4,"endColumn":13},{"ruleId":"106","severity":1,"message":"118","line":5,"column":7,"nodeType":"108","messageId":"109","endLine":5,"endColumn":12},{"ruleId":"119","severity":1,"message":"120","line":26,"column":86,"nodeType":"121","messageId":"122","endLine":26,"endColumn":88},{"ruleId":"119","severity":1,"message":"120","line":26,"column":142,"nodeType":"121","messageId":"122","endLine":26,"endColumn":144},{"ruleId":"123","severity":1,"message":"124","line":69,"column":5,"nodeType":"125","messageId":"122","endLine":71,"endColumn":6},{"ruleId":"102","replacedBy":"126"},{"ruleId":"104","replacedBy":"127"},{"ruleId":"119","severity":1,"message":"120","line":10,"column":36,"nodeType":"121","messageId":"122","endLine":10,"endColumn":38},{"ruleId":"102","replacedBy":"128"},{"ruleId":"104","replacedBy":"129"},{"ruleId":"106","severity":1,"message":"130","line":1,"column":38,"nodeType":"108","messageId":"109","endLine":1,"endColumn":47},{"ruleId":"106","severity":1,"message":"131","line":4,"column":10,"nodeType":"108","messageId":"109","endLine":4,"endColumn":19},{"ruleId":"106","severity":1,"message":"132","line":5,"column":10,"nodeType":"108","messageId":"109","endLine":5,"endColumn":16},{"ruleId":"106","severity":1,"message":"133","line":7,"column":31,"nodeType":"108","messageId":"109","endLine":7,"endColumn":51},{"ruleId":"106","severity":1,"message":"134","line":7,"column":53,"nodeType":"108","messageId":"109","endLine":7,"endColumn":73},{"ruleId":"106","severity":1,"message":"135","line":21,"column":27,"nodeType":"108","messageId":"109","endLine":21,"endColumn":35},{"ruleId":"106","severity":1,"message":"136","line":24,"column":12,"nodeType":"108","messageId":"109","endLine":24,"endColumn":25},{"ruleId":"110","severity":1,"message":"137","line":78,"column":8,"nodeType":"112","endLine":78,"endColumn":10,"suggestions":"138"},{"ruleId":"110","severity":1,"message":"139","line":87,"column":8,"nodeType":"112","endLine":87,"endColumn":16,"suggestions":"140"},{"ruleId":"110","severity":1,"message":"141","line":106,"column":8,"nodeType":"112","endLine":106,"endColumn":27,"suggestions":"142"},{"ruleId":"106","severity":1,"message":"143","line":124,"column":11,"nodeType":"108","messageId":"109","endLine":124,"endColumn":19},{"ruleId":"144","severity":1,"message":"145","line":198,"column":29,"nodeType":"146","messageId":"147","endLine":207,"endColumn":14},{"ruleId":"148","severity":1,"message":"149","line":232,"column":57,"nodeType":"121","messageId":"150","endLine":232,"endColumn":58},{"ruleId":"106","severity":1,"message":"151","line":1,"column":28,"nodeType":"108","messageId":"109","endLine":1,"endColumn":36},{"ruleId":"110","severity":1,"message":"152","line":12,"column":18,"nodeType":"153","endLine":12,"endColumn":42},{"ruleId":"144","severity":1,"message":"154","line":62,"column":25,"nodeType":"146","messageId":"147","endLine":71,"endColumn":10},{"ruleId":"155","severity":1,"message":"156","line":175,"column":1,"nodeType":"157","endLine":180,"endColumn":2},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'room' and 'show'. Either include them or remove the dependency array. You can also do a functional update 'setShow(s => ...)' if you only need 'show' in the 'setShow' call.","ArrayExpression",["160"],"'Pawn' is assigned a value but never used.","'Knight' is assigned a value but never used.","'Rook' is assigned a value but never used.","'Bishop' is assigned a value but never used.","'Queen' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-dupe-class-members","Duplicate name 'addPiece'.","MethodDefinition",["158"],["159"],["158"],["159"],"'Component' is defined but never used.","'useParams' is defined but never used.","'render' is defined but never used.","'createWhiteTeamBoard' is assigned a value but never used.","'createBlackTeamBoard' is assigned a value but never used.","'username' is assigned a value but never used.","'doRemovePiece' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPieces'. Either include it or remove the dependency array.",["161"],"React Hook useEffect has a missing dependency: 'forceMove'. Either include it or remove the dependency array.",["162"],"React Hook useEffect has missing dependencies: 'createClickEventListener' and 'renderPieces'. Either include them or remove the dependency array.",["163"],"'addPiece' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'boardSquares', 'isDarkSquare', 'isDarkSquare', 'isDarkSquare'.","ArrowFunctionExpression","unsafeRefs","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'useState' is defined but never used.","Assignments to the 'socket' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Function declared in a loop contains unsafe references to variable(s) 'isDarkSquare', 'isDarkSquare', 'isDarkSquare'.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},"Update the dependencies array to be: [room, show, socket]",{"range":"172","text":"173"},"Update the dependencies array to be: [setPieces]",{"range":"174","text":"175"},"Update the dependencies array to be: [forceMove, socket]",{"range":"176","text":"177"},"Update the dependencies array to be: [boardSquaresState, createClickEventListener, renderPieces]",{"range":"178","text":"179"},[2386,2394],"[room, show, socket]",[3199,3201],"[setPieces]",[3435,3443],"[forceMove, socket]",[4137,4156],"[boardSquaresState, createClickEventListener, renderPieces]"]