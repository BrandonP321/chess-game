[{"D:\\code\\personal-projects\\chess-game\\src\\index.js":"1","D:\\code\\personal-projects\\chess-game\\src\\App.js":"2","D:\\code\\personal-projects\\chess-game\\src\\reportWebVitals.js":"3","D:\\code\\personal-projects\\chess-game\\src\\pages\\GameRoom\\index.js":"4","D:\\code\\personal-projects\\chess-game\\src\\classes\\Board.js":"5","D:\\code\\personal-projects\\chess-game\\src\\classes\\Pawn.js":"6","D:\\code\\personal-projects\\chess-game\\src\\classes\\Rook.js":"7","D:\\code\\personal-projects\\chess-game\\src\\classes\\Bishop.js":"8","D:\\code\\personal-projects\\chess-game\\src\\classes\\Queen.js":"9","D:\\code\\personal-projects\\chess-game\\src\\classes\\Knight.js":"10","D:\\code\\personal-projects\\chess-game\\src\\classes\\Piece.js":"11","D:\\code\\personal-projects\\chess-game\\src\\components\\GameBoard\\index.js":"12","D:\\code\\personal-projects\\chess-game\\src\\pages\\Home\\index.js":"13","D:\\code\\personal-projects\\chess-game\\src\\components\\GameBoard\\board.js":"14","D:\\code\\personal-projects\\chess-game\\src\\classes\\King.js":"15","D:\\code\\personal-projects\\chess-game\\src\\components\\PlayersAside\\index.js":"16","D:\\code\\personal-projects\\chess-game\\src\\components\\HomeHeader\\index.js":"17"},{"size":500,"mtime":499162500000,"results":"18","hashOfConfig":"19"},{"size":541,"mtime":1608870746308,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":17230,"mtime":1609373926455,"results":"22","hashOfConfig":"19"},{"size":4713,"mtime":1608616119728,"results":"23","hashOfConfig":"19"},{"size":1436,"mtime":1609026941923,"results":"24","hashOfConfig":"19"},{"size":2479,"mtime":1609196162734,"results":"25","hashOfConfig":"19"},{"size":2723,"mtime":1609026565317,"results":"26","hashOfConfig":"19"},{"size":5043,"mtime":1609026965386,"results":"27","hashOfConfig":"19"},{"size":1255,"mtime":1609196159672,"results":"28","hashOfConfig":"19"},{"size":1336,"mtime":1609192986139,"results":"29","hashOfConfig":"19"},{"size":17824,"mtime":1609400812420,"results":"30","hashOfConfig":"19"},{"size":2512,"mtime":1609367094178,"results":"31","hashOfConfig":"19"},{"size":9353,"mtime":1609196168060,"results":"32","hashOfConfig":"19"},{"size":1128,"mtime":1609196156988,"results":"33","hashOfConfig":"19"},{"size":5253,"mtime":1609373443258,"results":"34","hashOfConfig":"19"},{"size":260,"mtime":1609317792369,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"b24jsc",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"D:\\code\\personal-projects\\chess-game\\src\\index.js",[],["79","80"],"D:\\code\\personal-projects\\chess-game\\src\\App.js",["81"],"import logo from './logo.svg';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport './App.css';\r\nimport GameRoom from './pages/GameRoom'\r\nimport Home from './pages/Home'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path='/'>\r\n            <Home />\r\n          </Route>\r\n          <Route exact path='/game/:room'>\r\n            <GameRoom />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\code\\personal-projects\\chess-game\\src\\reportWebVitals.js",[],"D:\\code\\personal-projects\\chess-game\\src\\pages\\GameRoom\\index.js",["82"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { Modal, Button } from 'react-bootstrap'\r\nimport socketIOClient from 'socket.io-client'\r\nimport GameBoard from '../../components/GameBoard'\r\nimport PlayersAside from '../../components/PlayersAside'\r\nimport './index.css'\r\n\r\nconst ENDPOINT = 'http://localhost:8000/game'\r\n// const ENDPOINT = 'https://chess-123-server.herokuapp.com/game'\r\n\r\nexport default function GameRoom() {\r\n    // get room id from url\r\n    const { room } = useParams();\r\n\r\n    // controls the state of the modal\r\n    const [showModal, setShowModal] = useState(true)\r\n\r\n    // state of heading and button showing when game is inactive\r\n    const [gamePendingHeading, setGamePendingHeadingState] = useState('Waiting for Second Player')\r\n    const gamePendingHeadingRef = useRef('Waiting for Second Player')\r\n    const setGamePendingHeading = data => {\r\n        gamePendingHeadingRef.current = data\r\n        setGamePendingHeadingState(data)\r\n        console.log('pending heading updated')\r\n    }\r\n    const [gamePendingButtonText, setGamePendingButtonTextState] = useState('')\r\n    const gamePendingButtonTextRef = useRef('')\r\n    const setGamePendingButtonText = data => {\r\n        gamePendingButtonTextRef.current = data\r\n        setGamePendingButtonTextState(data)\r\n    }\r\n\r\n\r\n    // state and ref for people spectating the game\r\n    const [watchers, setWatchersState] = useState([])\r\n    const watchersRef = useRef([])\r\n    const setWatchers = data => {\r\n        setWatchersState(data)\r\n        watchersRef.current = data\r\n    }\r\n\r\n    // state and ref for user's username\r\n    const [usernameState, setUsernameState] = useState('')\r\n    const usernameRef = useRef('')\r\n    const setUsername = data => {\r\n        usernameRef.current = data\r\n        setUsernameState(data)\r\n    }\r\n\r\n    const [whiteUsername, setWhiteUsernameState] = useState('')\r\n    const whiteUsernameRef = useRef('')\r\n    const setWhiteUsername = data => {\r\n        whiteUsernameRef.current = data\r\n        setWhiteUsernameState(data)\r\n    }\r\n    const [blackUsername, setBlackUsernameState] = useState('')\r\n    const blackUsernameRef = useRef('')\r\n    const setBlackUsername = data => {\r\n        blackUsernameRef.current = data\r\n        setBlackUsernameState(data)\r\n    }\r\n\r\n    // state and ref for white pieces taken by black player\r\n    const [whitePiecesTakenState, setWhitePiecesTakenState] = useState([])\r\n    const whitePiecesTakenRef = useRef([])\r\n    const setWhitePiecesTaken = data => {\r\n        whitePiecesTakenRef.current = data\r\n        setWhitePiecesTakenState(data)\r\n    }\r\n\r\n    // state and ref for black pieces taken by white player\r\n    const [blackPiecesTakenState, setBlackPiecesTakenState] = useState([])\r\n    const blackPiecesTakenRef = useRef([])\r\n    const setBlackPiecesTaken = data => {\r\n        blackPiecesTakenRef.current = data;\r\n        setBlackPiecesTakenState(data)\r\n    }\r\n\r\n    // state and ref for user's team\r\n    const [teamState, setTeamState] = useState()\r\n    const teamRef = useRef()\r\n    const setTeam = data => {\r\n        teamRef.current = data;\r\n        setTeamState(data)\r\n    }\r\n    \r\n    // state and ref indicating if game is active\r\n    const [isGameActiveState, setIsGameActiveState] = useState(false)\r\n    const isGameActiveRef = useRef(false)\r\n    const setIsGameActive = data => {\r\n        console.log('game status updated to ', data)\r\n        isGameActiveRef.current = data;\r\n        setIsGameActiveState(data);\r\n        // update boolean for game status on server\r\n        socket.current.emit('gameStatusChange', data)\r\n    }\r\n\r\n    // state and ref for which team is able to move\r\n    const [teamUpState, setTeamUpState] = useState('none')\r\n    const teamUpRef = useRef('none')\r\n    const setTeamUp = data => {\r\n        teamUpRef.current = data\r\n        setTeamUpState(data)\r\n\r\n        // update value on server\r\n        socket.current.emit('updateTeamUp', data)\r\n    }\r\n\r\n    // state indicating if site is connected to the socket.io server\r\n    const [isSocketConnected, setIsSocketConnected] = useState(false)\r\n    // reference to the socket.io connection\r\n    const socket = useRef()\r\n    const setSocket = data => {\r\n        socket.current = data\r\n\r\n        // when the useRef hook for the socket is set, we know we are now connected to the server\r\n        setIsSocketConnected(true)\r\n\r\n        // create socket.io listeners\r\n\r\n        socket.current.on('connect', data => {\r\n            console.log('connected to game name space')\r\n            // make request to join the current room on the server\r\n            socket.current.emit('joinRoom', room)\r\n        })\r\n\r\n        // when the user joins a room, get all current info on that room\r\n        socket.current.on('roomJoined', room => {\r\n            console.log('room joined ', room)\r\n            // update state and reference hooks to contain current info on room\r\n            setBlackUsername(room.blackPlayer)\r\n            setWhiteUsername(room.whitePlayer)\r\n            setTeamUp(room.teamUp)\r\n            setWatchers(room.watchers)\r\n            setWhitePiecesTaken(room.whitePiecesTaken)\r\n            setBlackPiecesTaken(room.blackPiecesTaken)\r\n            setIsGameActive(room.gameStatus)\r\n        })\r\n\r\n        socket.current.on('usernameCreated', newUser => {\r\n            if (newUser) {\r\n                // hide the modal\r\n                setShowModal(!showModal)\r\n                // update hooks for user's username\r\n                setUsername(newUser.username)\r\n                // assign team and username to hooks based on team color\r\n                if (newUser.color === 'white') {\r\n                    setTeam('white')\r\n                    setWhiteUsername(newUser.username)\r\n                } else if (newUser.color === 'black') {\r\n                    setTeam('black')\r\n                    setBlackUsername(newUser.username)\r\n                } else {\r\n                    setTeam('watcher')\r\n                    console.log('setting watchers to ', [...watchers, newUser.username])\r\n                    setWatchers([...watchersRef.current, newUser.username])\r\n                }\r\n                // if there is a user in both the white and black spot, update overlay text for game to start\r\n                if (whiteUsernameRef.current && blackUsernameRef.current) {\r\n                    setGamePendingHeading('Game Ready to Begin')\r\n                    // setGamePendingButtonText(\"Start Game\")\r\n                }\r\n            } else {\r\n                console.log('username taken')\r\n            }\r\n        })\r\n\r\n        socket.current.on('newPlayerJoined', user => {\r\n            // add new user's username to state\r\n            if (user.color === 'white') {\r\n                setWhiteUsername(user.username)\r\n            } else if (user.color === 'black') {\r\n                setBlackUsername(user.username)\r\n            } else {\r\n                console.log('new user joined, watchers: ', [...watchers, user.username])\r\n                setWatchers([...watchersRef.current, user.username])\r\n            }\r\n            console.log(gamePendingHeadingRef.current)\r\n            // if game is waiting on a second user to start, update display to let user start the game\r\n            if (gamePendingHeadingRef.current === 'Waiting for Second Player') {\r\n                setGamePendingHeading(\"Game Ready to Begin\")\r\n                setGamePendingButtonText(\"Start Game\")\r\n            } else if (gamePendingHeadingRef.current === 'User Left, Waiting for New Player') {\r\n                // if user left and game was waiting for a new user, allow game to resume\r\n                setGamePendingHeading('New User Joined')\r\n                setGamePendingButtonText(\"Resume Game\")\r\n            }\r\n        })\r\n\r\n        socket.current.on('notEnoughPlayersToStart', () => {\r\n\r\n        })\r\n\r\n        socket.current.on('startGame', team => {\r\n            console.log('game started ', team)\r\n            // if no team is up, game has not yet started and can be set to white\r\n            if (teamUpRef.current === 'none'){\r\n                console.log('team should be updated')\r\n                setTeamUp(team)\r\n            }\r\n            // remove text from game pending button\r\n            setGamePendingButtonText('')\r\n            setIsGameActive(true)\r\n        })\r\n\r\n        socket.current.on('gameOver', winningTeam => {\r\n            // capitalize color of winning team\r\n            const teamCapitalized = winningTeam.charAt(0).toUpperCase() + winningTeam.slice(1)\r\n            // stop game\r\n            setGamePendingHeading(teamCapitalized + ' Wins')\r\n            setGamePendingButtonText('Start New Game')\r\n            setIsGameActive(false)\r\n        })\r\n\r\n        socket.current.on('gameIsDraw', () => {\r\n            // when the game is a draw, end the game and let the user restart the game\r\n            setIsGameActive(false)\r\n            setGamePendingHeading('Game is a Draw')\r\n            setGamePendingButtonText('Start New Game')\r\n        })\r\n\r\n        socket.current.on('resetGame', () => {\r\n            // reset all states and refs\r\n            setWhitePiecesTaken([])\r\n            setBlackPiecesTaken([])\r\n            setTeamUp('white')\r\n            setIsGameActive(true)\r\n        })\r\n\r\n        socket.current.on('resumeGame', () => {\r\n            // when game is resumed, game status just needs to be updated\r\n            setIsGameActive(true)\r\n        })\r\n\r\n        socket.current.on('userLeft', user => {\r\n            const { team, username } = user\r\n            console.log('user left', user)\r\n            // remove username of player that left and stop the game\r\n            if (team === 'white') {\r\n                setWhiteUsername('')\r\n                setIsGameActive(false)\r\n                setGamePendingHeading('User Left, Waiting for New Player')\r\n            } else if (team === 'black') {\r\n                setBlackUsername('')\r\n                setIsGameActive(false)\r\n                setGamePendingHeading('User Left, Waiting for New Player')\r\n            } else {\r\n                setWatchers(watchersRef.current.filter(watcher => watcher !== username))\r\n            }\r\n        })\r\n\r\n        // when user has left but a spectator is taking over for them\r\n        socket.current.on('userTakingOver', user => {\r\n            // update game status to active\r\n            setIsGameActive(true)\r\n            console.log('user taking over: ', user)\r\n            // assign user's username to appropriate state\r\n            if (user.team === 'white') {\r\n                setWhiteUsername(user.username)\r\n            } else if (user.team === 'black') {\r\n                setBlackUsername(user.username)\r\n            }\r\n            // if you are the user taking over, update your team\r\n            if (usernameRef.current === user.username) {\r\n                setTeam(user.team)\r\n            }\r\n            // remove user from array of watchers in state\r\n            setWatchers(watchersRef.current.filter(watcher => watcher !== user.username))\r\n        })\r\n\r\n        socket.current.on('userResigned', user => {\r\n            console.log(user)\r\n            const teamCapitalized = user.team.charAt(0).toUpperCase() + user.team.slice(1)\r\n            const winningTeam = user.team === 'white' ? 'Black' : 'White'\r\n            // end game and show which team won\r\n            setIsGameActive(false)\r\n            setGamePendingHeading(`${teamCapitalized} Resigned, ${winningTeam} Wins`)\r\n            setGamePendingButtonText('Start New Game')\r\n        })\r\n\r\n        socket.current.on('playerSpectatorTrade', players => {\r\n            const { user, spectator } = players\r\n            // remove spectator from list of spectators and add in player\r\n            const newSpectators = watchersRef.current.filter(watcher => watcher !== spectator)\r\n            newSpectators.push(user.username)\r\n            setWatchers(newSpectators)\r\n\r\n            // based on the player's team, switch their spot with the spectator\r\n            if (user.team === 'white') {\r\n                setWhiteUsername(spectator)\r\n            } else if (user.team === 'black') {\r\n                setBlackUsername(spectator)\r\n            }\r\n\r\n            // if the current user is the spectator or player, update their team\r\n            if (user.username === usernameRef.current) {\r\n                setTeam('watcher')\r\n            } else if (spectator === usernameRef.current) {\r\n                setTeam(user.team)\r\n            }\r\n        })\r\n\r\n        // tell the server when a player is leaving the page\r\n        window.onbeforeunload = () => {\r\n            socket.current.emit('userLeaving', { username: usernameRef.current, team: teamRef.current})\r\n        }\r\n    }\r\n\r\n    // on load, connect to the socket.io server\r\n    useEffect(() => {\r\n        setSocket(socketIOClient(ENDPOINT))\r\n    }, [])\r\n\r\n    // handles closing of the modal to create a username\r\n    const handleModalClose = () => {\r\n        setShowModal(!showModal)\r\n    }\r\n\r\n    const handleModalInputChange = (event) => {\r\n        const value = event.target.value\r\n        setUsername(value)\r\n    }\r\n\r\n    const attemptUsernameCreate = () => {\r\n        socket.current.emit('createUsername', usernameRef.current)\r\n\r\n        // move this code in to a socket.on() once username validation on server\r\n    }\r\n\r\n    const updatePiecesTaken = piece => {\r\n        // based on the pieces color, add that piece to it's appropriate array\r\n        if (piece.color === 'white') {\r\n            setWhitePiecesTaken([...whitePiecesTakenRef.current, piece.pieceType])\r\n        } else if (piece.color === 'black') {\r\n            setBlackPiecesTaken([...blackPiecesTakenRef.current, piece.pieceType])\r\n        }\r\n    }\r\n\r\n    const handleOverlayButtonClick = event => {\r\n        // based on the buttons text, execute the appropriate code\r\n        const btnText = event.target.innerText\r\n        console.log(btnText)\r\n        if (btnText === 'Start Game') {\r\n            socket.current.emit('beginGame')\r\n        } else if (btnText === 'Resume Game') {\r\n            // if game is to be resumed, update the game status\r\n            setIsGameActive(true)\r\n            setGamePendingButtonText('')\r\n            socket.current.emit('resumeGame')\r\n        } else if (btnText === 'Start New Game') {\r\n            socket.current.emit('startNewGame')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='content-wrapper'>\r\n                <div className='game-main-content'>\r\n                    <GameBoard \r\n                        roomId={room}\r\n                        teamRef={teamRef}\r\n                        teamState={teamState} \r\n                        socket={socket} \r\n                        usernameState={usernameState} \r\n                        usernameRef={usernameRef} \r\n                        teamUpRef={teamUpRef}\r\n                        teamUpState={teamUpState} \r\n                        setTeamUp={setTeamUp} \r\n                        isSocketConnected={isSocketConnected}\r\n                        isGameActiveRef={isGameActiveRef}\r\n                        isGameActiveState={isGameActiveState}\r\n                        updatePiecesTaken={updatePiecesTaken}\r\n                        gamePendingHeading={gamePendingHeading}\r\n                        setGamePendingHeading={setGamePendingHeading}\r\n                        gamePendingButtonText={gamePendingButtonText}\r\n                        setGamePendingButtonText={setGamePendingButtonText}\r\n                        handleOverlayButtonClick={handleOverlayButtonClick}\r\n                    />\r\n                </div>\r\n                <div className='game-aside-content'>\r\n                    <PlayersAside \r\n                        teamRef={teamRef} \r\n                        teamState={teamState}\r\n                        whitePiecesTakenRef={whitePiecesTakenRef} \r\n                        whitePiecesTakenState={whitePiecesTakenState} \r\n                        blackPiecesTakenRef={blackPiecesTakenRef} \r\n                        blackPiecesTakenState={blackPiecesTakenState} \r\n                        whiteUsername={whiteUsername}\r\n                        blackUsername={blackUsername}\r\n                        usernameRef={usernameRef}\r\n                        usernameState={usernameState}\r\n                        watchers={watchers}\r\n                        socket={socket}\r\n                        isSocketConnected={isSocketConnected}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <Modal\r\n                show={showModal}\r\n                onHide={handleModalClose}\r\n                backdrop=\"static\"\r\n                keyboard={false}\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>Create a Username</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <input type='text' className='form-control' value={usernameState} placeholder='Username' onChange={handleModalInputChange} />\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" onClick={attemptUsernameCreate}>Let's Go</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n\r\n}\r\n","D:\\code\\personal-projects\\chess-game\\src\\classes\\Board.js",["83","84","85","86","87","88","89","90"],"const Pawn = require('./Pawn')\r\nconst Knight = require('./Knight')\r\nconst Rook = require('./Rook')\r\nconst Bishop = require('./Bishop')\r\nconst Queen = require('./Queen')\r\n\r\n\r\nclass Board {\r\n    constructor(pieces = []) {\r\n        this.pieces = pieces\r\n        this.letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\n    }\r\n\r\n    addPiece(piece) {\r\n        // add a new piece to the pieces array\r\n        this.pieces.push(piece)\r\n    }\r\n\r\n    removePiece(piece) {\r\n        // remove piece when it is taken off the board\r\n        // this.pieces = this.pieces.filter()\r\n    }\r\n\r\n    getPotentialMoves(pieceLocation) {\r\n        // find which piece is at the given location\r\n        const chosenPiece = this.pieces.filter(piece => piece.currentLocation.letter == pieceLocation.letter && piece.currentLocation.number == pieceLocation.number)[0]\r\n\r\n        // get possible locations of piece\r\n        let possibleLocations = chosenPiece.getPossibleMoves()\r\n\r\n        // locations of friendly pieces blocking a path\r\n        const blockedSpots = []\r\n\r\n        // filter possible locations by pieces locations of other pieces on board\r\n        let availableSpots = possibleLocations.filter(newLocation => {\r\n            // iterate over pieces on board\r\n            for (var i = 0; i < this.pieces.length; i++) {\r\n                let piece = this.pieces[i]\r\n\r\n\r\n                // if piece's location matches potential location and is not friendly\r\n                if (piece.currentLocation.letter === newLocation.letter &&\r\n                    piece.currentLocation.number === newLocation.number) {\r\n                    // if piece being moved is a knight, we don't need to worry about a path being blocked by a friendly piece\r\n                    if (chosenPiece.pieceType === 'knight') {\r\n                        return false\r\n                    } else if (piece.color === chosenPiece.color) {\r\n                        // add location of piece to blockedSpots array\r\n                        blockedSpots.push(piece.currentLocation)\r\n                        // return false to remove this spot option\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n            // return true if nothing has been returned yet\r\n            return true\r\n        })\r\n        \r\n        console.log('spots before removing paths:')\r\n        // if any paths are blocked, remove the blocked spots from possible moves\r\n        if (blockedSpots.length > 0) {\r\n            availableSpots = chosenPiece.removeBlockedPaths(blockedSpots, availableSpots)\r\n        }\r\n\r\n        \r\n        return availableSpots\r\n    }\r\n\r\n    addPiece(piece) {\r\n        this.pieces.push(piece)\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = Board;\r\n\r\n\r\n\r\n\r\n// // add all pieces to board\r\n// const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\n\r\n// const pawns = []\r\n// // create white pawns and push them to the array\r\n// for (let i = 0; i < 8; i++) {\r\n//     let newPawn = new Pawn({ letter: letters[i], number: 2 }, 'white')\r\n    \r\n//     pawns.push(newPawn)\r\n// }\r\n// // create black pawns and push them to the array\r\n// for (let i = 0; i < 8; i++) {\r\n//     let newPawn = new Pawn({ letter: letters[i], number: 7 }, 'black')\r\n    \r\n//     pawns.push(newPawn)\r\n// }\r\n\r\n// const knights = [\r\n//     new Knight({ letter: 'b', number: 1 }, 'white'),\r\n//     new Knight({ letter: 'g', number: 1 }, 'white'),\r\n//     new Knight({ letter: 'b', number: 8 }, 'black'),\r\n//     new Knight({ letter: 'g', number: 8 }, 'black')\r\n// ]\r\n\r\n// const rooks = [\r\n//     new Rook({ letter: 'a', number: 1 }, 'white'),\r\n//     new Rook({ letter: 'h', number: 1 }, 'white'),\r\n//     new Rook({ letter: 'a', number: 8 }, 'black'),\r\n//     new Rook({ letter: 'h', number: 8 }, 'black'),\r\n// ]\r\n\r\n// const bishops = [\r\n//     new Bishop({ letter: 'c', number: 1 }, 'white'),\r\n//     new Bishop({ letter: 'f', number: 1 }, 'white'),\r\n//     new Bishop({ letter: 'c', number: 8 }, 'black'),\r\n//     new Bishop({ letter: 'f', number: 8 }, 'black'),\r\n// ]\r\n\r\n// const queens = [\r\n//     new Queen({ letter: 'd', number: 1 }, 'white'),\r\n//     new Queen({ letter: 'd', number: 8 }, 'black')\r\n// ]\r\n\r\n// // push pieces from their arrays to the new Board\r\n// // const board = new Board([...pawns, ...knights, ...rooks, ...bishops, ...queens])\r\n\r\n// const board = new Board([\r\n//     new Rook({ letter: 'd', number: 3}, 'white'), \r\n//     new Pawn({ letter: 'f', number: 3 }, 'white'),\r\n//     new Pawn({ letter: 'd', number: 1 }, 'white'),\r\n//     new Pawn({ letter: 'a', number: 3 }, 'white'),\r\n//     new Pawn({ letter: 'd', number: 7 }, 'white'),\r\n// ])\r\n\r\n// console.log('moves:')\r\n// console.log(board.getPotentialMoves({ letter: 'd', number: 3 }).length)",["91","92"],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Pawn.js",["93"],"// const Piece = require('./Piece')\r\nimport Piece from './Piece'\r\n\r\nexport default class Pawn extends Piece {\r\n    constructor(startLocation, color, currentLocation) {\r\n        super(startLocation, color, currentLocation)\r\n        this.pieceType = 'pawn'\r\n        this.moveChanges = [\r\n            {\r\n                letter: 0,\r\n                number: this.color == 'black' ? -1: 1\r\n            }\r\n        ]\r\n    }\r\n    \r\n    removeBlockedPaths(blockedSpotsArr, availableSpotsArr) {\r\n        let availableSpots = availableSpotsArr;\r\n\r\n        blockedSpotsArr.forEach(spot => {\r\n            // if spot is on a different letter square than current, ignore since that piece can be attacked\r\n            if (spot.letter !== this.currentLocation.letter) {\r\n                return false\r\n            }\r\n            // if blocked spot is above current, block all spots above it including it\r\n            if (spot.number > this.currentLocation.number) {\r\n                availableSpots = availableSpots.filter(openSpot => openSpot.number >= spot.number && openSpot.letter !== this.currentLocation.letter)\r\n            } else {\r\n                // if blocked spot is below current, block all spots beneath it including it\r\n                availableSpots = availableSpots.filter(openSpot => openSpot.number <= spot.number && openSpot.letter !== this.currentLocation.letter)\r\n            }\r\n        })\r\n\r\n        return availableSpots\r\n    }\r\n}\r\n","D:\\code\\personal-projects\\chess-game\\src\\classes\\Rook.js",[],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Bishop.js",[],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Queen.js",[],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Knight.js",[],"D:\\code\\personal-projects\\chess-game\\src\\classes\\Piece.js",[],"D:\\code\\personal-projects\\chess-game\\src\\components\\GameBoard\\index.js",["94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109"],"D:\\code\\personal-projects\\chess-game\\src\\pages\\Home\\index.js",["110"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport HomeHeader from '../../components/HomeHeader'\r\nimport socketIOClient from 'socket.io-client'\r\nimport './index.css'\r\n\r\nconst ENDPOINT = 'http://localhost:8000'\r\n// const ENDPOINT = 'https://chess-123-server.herokuapp.com'\r\n\r\nexport default function Home() {\r\n    const socket = useRef()\r\n    const setSocket = data => {\r\n        socket.current = data\r\n\r\n        // when socket is defined, create listeners\r\n        socket.current.on('connect', () => {\r\n            console.log('connected')\r\n        })\r\n\r\n        socket.current.on('newRoomCreated', room => {\r\n            console.log('created room ' + room)\r\n            // redirect to game room with room's id\r\n            window.location.href = '/game/' + room\r\n        })\r\n\r\n        socket.current.on('allowRoomJoin', room => {\r\n            // redirect to the game with the given room id\r\n            window.location.href = '/game/' + room\r\n        })\r\n    }\r\n\r\n    // on load, connect to socket.io server\r\n    useEffect(() => {\r\n        setSocket(socketIOClient(ENDPOINT))\r\n    }, [])\r\n\r\n    const handleNewRoomCreate = () => {\r\n        // tell socket.io server to make a new room for the user\r\n        socket.current.emit('createNewRoom')\r\n    }\r\n\r\n    const handleAttemptRoomJoin = (event) => {\r\n        event.preventDefault();\r\n\r\n        // roomid from input field\r\n        const roomId = event.target.children[0].value\r\n\r\n        // tell socket.io server to check for a room with the given id\r\n        socket.current.emit('joinExistingRoom', roomId)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='home-bg-white'></div>\r\n            <HomeHeader />\r\n            <div className='home-bg-div'></div>\r\n            <div className='home-content-wrapper'>\r\n                <div className='new-room-wrapper'>\r\n                    <h2>Create New Room</h2>\r\n                    <button className='btn btn-primary new-room-btn' onClick={handleNewRoomCreate}>Create New Room</button>\r\n                </div>\r\n                <div className='join-room-wrapper'>\r\n                    <h2>Join Existing Room</h2>\r\n                    <form className='join-room-form' onSubmit={handleAttemptRoomJoin}>\r\n                        <input className='form-control' type='text' placeholder='Room ID'></input>\r\n                        <button className='btn btn-primary join-room-btn'>Join</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\chess-game\\src\\components\\GameBoard\\board.js",["111","112","113"],"import React from 'react'\r\n\r\nimport Pawn from '../../classes/Pawn'\r\nimport Knight from '../../classes/Knight'\r\nimport Rook from '../../classes/Rook'\r\nimport Bishop from '../../classes/Bishop'\r\nimport Queen from '../../classes/Queen'\r\nimport King from '../../classes/King'\r\n\r\nconst letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\n\r\nfunction createNewBoardPieces() {\r\n    const pawns = []\r\n    // create white pawns and push them to the array\r\n    for (let i = 0; i < 8; i++) {\r\n        let newPawn = new Pawn({ letter: letters[i], number: 2 }, 'white')\r\n\r\n        pawns.push(newPawn)\r\n    }\r\n    // create black pawns and push them to the array\r\n    for (let i = 0; i < 8; i++) {\r\n        let newPawn = new Pawn({ letter: letters[i], number: 7 }, 'black')\r\n\r\n        pawns.push(newPawn)\r\n    }\r\n\r\n    const knights = [\r\n        new Knight({ letter: 'b', number: 1 }, 'white'),\r\n        new Knight({ letter: 'g', number: 1 }, 'white'),\r\n        new Knight({ letter: 'b', number: 8 }, 'black'),\r\n        new Knight({ letter: 'g', number: 8 }, 'black')\r\n    ]\r\n\r\n    const rooks = [\r\n        new Rook({ letter: 'a', number: 1 }, 'white'),\r\n        new Rook({ letter: 'h', number: 1 }, 'white'),\r\n        new Rook({ letter: 'a', number: 8 }, 'black'),\r\n        new Rook({ letter: 'h', number: 8 }, 'black'),\r\n    ]\r\n\r\n    const bishops = [\r\n        new Bishop({ letter: 'c', number: 1 }, 'white'),\r\n        new Bishop({ letter: 'f', number: 1 }, 'white'),\r\n        new Bishop({ letter: 'c', number: 8 }, 'black'),\r\n        new Bishop({ letter: 'f', number: 8 }, 'black'),\r\n    ]\r\n\r\n    const queens = [\r\n        new Queen({ letter: 'd', number: 1 }, 'white'),\r\n        new Queen({ letter: 'd', number: 8 }, 'black')\r\n    ]\r\n\r\n    const kings = [\r\n        new King({ letter: 'e', number: 1 }, 'white'),\r\n        new King({ letter: 'e', number: 8 }, 'black')\r\n    ]\r\n\r\n    return [...queens, ...bishops, ...rooks, ...knights, ...pawns, ...kings]\r\n}\r\n\r\nfunction createWhiteTeamBoard(squareClickFunction) {\r\n    console.log('creating board')\r\n    // create each square of board and push it to an array\r\n    const boardSquares = []\r\n\r\n    let isDarkSquare = true\r\n    for (let i = 8; i > 0; i--) {\r\n        letters.forEach(letter => {\r\n            boardSquares.push(<div className={isDarkSquare ? 'board-square square-light' : 'board-square square-dark'} data-letter={letter} data-number={i} data-location={letter + i}>\r\n                <div className='square-available-circle'></div>\r\n                <div className='square-clickable' onClick={squareClickFunction}></div>\r\n            </div>)\r\n            // only change isDarkSquare boolean if not on last letter\r\n            if (letter !== 'h') {\r\n                isDarkSquare = !isDarkSquare\r\n            }\r\n        })\r\n    }\r\n\r\n    return boardSquares\r\n}\r\n\r\nfunction createBlackTeamBoard(squareClickFunction) {\r\n    // because board for black team is the reverse of the white team's, we can\r\n    // just call the white board creation function and reverse the array\r\n    return createWhiteTeamBoard(squareClickFunction).reverse()\r\n}\r\n\r\nfunction getPotentialMoves(chosenPiece, pieces, getPieceReferenceFunc) {\r\n    // find which piece is at the given location\r\n    // const chosenPiece = getPieceReferenceFunc(pieceLocation)\r\n\r\n    // get possible locations of piece\r\n    let possibleLocations = chosenPiece.getPossibleMoves()\r\n\r\n    // if piece is a pawn at it's starting spot, allow a two square move\r\n    if (chosenPiece.pieceType === 'pawn') {\r\n        // if piece is white and at number of 2, allow 2 square jump\r\n        if (chosenPiece.color === 'white' && chosenPiece.currentLocation.number === 2) {\r\n            possibleLocations.push({ letter: chosenPiece.currentLocation.letter, number: 4 })\r\n        }\r\n        // if piece is black and at number of 7, allow 2 square jump\r\n        else if (chosenPiece.color === 'black' && chosenPiece.currentLocation.number === 7) {\r\n            possibleLocations.push({ letter: chosenPiece.currentLocation.letter, number: 5 })\r\n        }\r\n\r\n        // if piece is white and there is a piece up and to it's diagonal, add that square as an option\r\n        if (chosenPiece.color === 'white') {\r\n            // filter pieces for any pieces to the pawn's diagonal\r\n            const diagonalPieces = pieces.filter(pieces => {\r\n                const { letter, number } = pieces.currentLocation\r\n                const letterIndex = letters.indexOf(chosenPiece.currentLocation.letter)\r\n                const upAndLeftSquareLetter = letters[letterIndex - 1]\r\n                const upAndRightSquareLetter = letters[letterIndex + 1]\r\n                return (letter === upAndLeftSquareLetter || letter === upAndRightSquareLetter) && number === chosenPiece.currentLocation.number + 1\r\n            })\r\n            diagonalPieces.forEach(piece => possibleLocations.push(piece.currentLocation))\r\n        }\r\n        // allow diagonal attacks for black pieces as well\r\n        else if (chosenPiece.color === 'black') {\r\n            // filter pieces for any pieces to the pawn's diagonal\r\n            const diagonalPieces = pieces.filter(pieces => {\r\n                const { letter, number } = pieces.currentLocation\r\n                const letterIndex = letters.indexOf(chosenPiece.currentLocation.letter)\r\n                const downAndLeftSquareLetter = letters[letterIndex - 1]\r\n                const downAndRightSquareLetter = letters[letterIndex + 1]\r\n                return (letter === downAndLeftSquareLetter || letter === downAndRightSquareLetter) && number === chosenPiece.currentLocation.number - 1\r\n            })\r\n            diagonalPieces.forEach(piece => possibleLocations.push(piece.currentLocation))\r\n        }\r\n    }\r\n\r\n    // locations of friendly pieces blocking a path\r\n    const blockedSpots = []\r\n\r\n    // filter possible locations by pieces locations of other pieces on board\r\n    let availableSpots = possibleLocations.filter(newLocation => {\r\n        // iterate over pieces on board\r\n        for (var i = 0; i < pieces.length; i++) {\r\n            let piece = pieces[i]\r\n\r\n            // check if piece's location matches potential location and is not friendly\r\n            if (piece.currentLocation.letter === newLocation.letter &&\r\n                piece.currentLocation.number === newLocation.number) {\r\n                // if piece being moved is a knight, we don't need to worry about a path being blocked by a friendly piece\r\n                if (chosenPiece.pieceType === 'knight') {\r\n                    // check if piece is of same color as knight\r\n\r\n                    if (piece.color === chosenPiece.color) {\r\n                        // if pieces are same color, don't let knight move there\r\n                        return false\r\n                    } else {\r\n                        // if pieces are different colors, allow knight to move there\r\n                        return true\r\n                    }\r\n                } else if (piece.color === chosenPiece.color) {\r\n                    // add location of piece to blockedSpots array\r\n                    blockedSpots.push(piece.currentLocation)\r\n                    // return false to remove this spot option\r\n                    return false\r\n                } else if (piece.color !== chosenPiece.color) {\r\n                    // if piece is an enemy piece, add that piece to blocked spots but keep the spot as available\r\n                    // this will restrict player from accessing any spots beyond the enemy\r\n                    blockedSpots.push(piece.currentLocation)\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        // return true if nothing has been returned yet\r\n        return true\r\n    })\r\n\r\n    // if any paths are blocked, remove the blocked spots from possible moves\r\n    if (blockedSpots.length > 0) {\r\n        availableSpots = chosenPiece.removeBlockedPaths(blockedSpots, availableSpots)\r\n    }\r\n\r\n    return availableSpots\r\n}\r\n\r\nfunction createPiecesInstancesArray(piecesArr) {\r\n    const pieces = []\r\n    piecesArr.forEach(piece => {\r\n        const { startLocation, color, currentLocation } = piece\r\n\r\n        // based on what the piece is, create an instance of that piece and push it to the new arr\r\n        switch(piece.pieceType) {\r\n            case 'bishop':\r\n                pieces.push(new Bishop(startLocation, color, currentLocation))\r\n                break;\r\n            case 'king':\r\n                pieces.push(new King(startLocation, color, currentLocation))\r\n                break;\r\n            case 'knight':\r\n                pieces.push(new Knight(startLocation, color, currentLocation))\r\n                break;\r\n            case 'pawn':\r\n                pieces.push(new Pawn(startLocation, color, currentLocation))\r\n                break;\r\n            case 'queen':\r\n                pieces.push(new Queen(startLocation, color, currentLocation))\r\n                break;\r\n            case 'rook':\r\n                pieces.push(new Rook(startLocation, color, currentLocation))\r\n                break;\r\n        }\r\n    })\r\n\r\n    return pieces\r\n}\r\n\r\nexport default {\r\n    createNewBoardPieces: createNewBoardPieces,\r\n    createWhiteTeamBoard: createWhiteTeamBoard,\r\n    createBlackTeamBoard: createBlackTeamBoard,\r\n    getPotentialMoves: getPotentialMoves,\r\n    createPiecesInstancesArray: createPiecesInstancesArray\r\n}","D:\\code\\personal-projects\\chess-game\\src\\classes\\King.js",[],"D:\\code\\personal-projects\\chess-game\\src\\components\\PlayersAside\\index.js",["114","115","116"],"import React, { useState, useRef, useEffect } from 'react'\r\nimport './index.css'\r\n\r\nconst pieceIcons = {\r\n    rook: <i class=\"fas fa-chess-rook taken-piece-icon\"></i>,\r\n    knight: <i class=\"fas fa-chess-knight taken-piece-icon\"></i>,\r\n    bishop: <i class=\"fas fa-chess-bishop taken-piece-icon\"></i>,\r\n    queen: <i class=\"fas fa-chess-queen taken-piece-icon\"></i>,\r\n    king: <i class=\"fas fa-chess-king taken-piece-icon\"></i>,\r\n    pawn: <i class=\"fas fa-chess-pawn taken-piece-icon\"></i>\r\n}\r\n\r\nexport default function PlayersAside(props) {\r\n    const { \r\n        socket,\r\n        isSocketConnected,\r\n        teamRef,\r\n        teamState, \r\n        whitePiecesTakenState, \r\n        blackPiecesTakenState, \r\n        whiteUsername, \r\n        blackUsername, \r\n        usernameRef,\r\n        usernameState,\r\n        watchers,\r\n    } = props\r\n    \r\n    const [drawIsAsked, setDrawIsAsked] = useState(false)\r\n    \r\n        useEffect(() => {\r\n            if (socket.current) {\r\n                socket.current.on('userWantsDraw', () => {\r\n                    // if the current user is on either team, ask if they want a draw\r\n                    if (teamRef.current === 'white' || teamRef.current === 'black') {\r\n                        setDrawIsAsked(true)\r\n                    }\r\n                })\r\n            }\r\n        }, [isSocketConnected])\r\n    \r\n    const askForDraw = () => {\r\n        // emite to server that user wants to draw\r\n        socket.current.emit('userWantsDraw')\r\n    }\r\n\r\n    const answerDraw = (doesAccept) => {\r\n        console.log('you answered draw with ', doesAccept)\r\n        // hide the text asking for a draw\r\n        setDrawIsAsked(false)\r\n\r\n        // if user accepts draw, send message to server to draw the game\r\n        if (doesAccept) {\r\n            socket.current.emit('userAcceptsDraw')\r\n        }\r\n    }\r\n\r\n    const playerResign = () => {\r\n        // emit to other users that user has resigned\r\n        socket.current.emit('resign', { username: usernameRef.current, team: teamRef.current })\r\n    }\r\n\r\n    const tradePlacesWithSpectator = (spectator) => {\r\n        // send message to server that a user and spectator are trading spots\r\n        socket.current.emit('givingSpotToSpectator', {\r\n            user: {\r\n                username: usernameRef.current,\r\n                team: teamRef.current\r\n            },\r\n            spectator: spectator\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <div className='player-btns'>\r\n                <button onClick={askForDraw}>Draw</button>\r\n                <button onClick={playerResign}>Resign</button>\r\n            </div>\r\n            <div className='draw-question-wrapper' style={drawIsAsked ? {} : {opacity: 0}}>\r\n                <p>Would you like to call it a draw?</p>\r\n                <button className='draw-btn-yes' onClick={() => answerDraw(true)}>Yes</button>\r\n                <button className='draw-btn-no' onClick={() => answerDraw(false)}>No</button>\r\n            </div>\r\n            <div className='player-info-container'>\r\n                <h3 className='player-username'>\r\n                    <span><i class=\"fas fa-chess-king team-icon icon-white\"></i> </span>\r\n                    {!whiteUsername ? 'No Player': whiteUsername === usernameState ? 'You': whiteUsername}\r\n                </h3>\r\n                <div className='taken-pieces-container taken-pieces-black'>\r\n                    {blackPiecesTakenState.map(piece => {\r\n                        return (\r\n                            <div className='taken-piece-container'>\r\n                                {pieceIcons[piece]}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <div className='player-info-container'>\r\n                <h3 className='player-username'>\r\n                    <span><i class=\"fas fa-chess-king team-icon icon-black\"></i> </span>\r\n                    {!blackUsername ? 'No Player': blackUsername === usernameState ? 'You': blackUsername}\r\n                </h3>\r\n                <div className='taken-pieces-container taken-pieces-white'>\r\n                    {whitePiecesTakenState.map(piece => {\r\n                        return (\r\n                            <div className='taken-piece-container'>\r\n                                {pieceIcons[piece]}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <div className='spectators-container'>\r\n                {watchers.map(watcher => {\r\n                    return <p>\r\n                        {watcher === usernameRef.current ? 'You' : watcher} \r\n                        <span>\r\n                            {/* if user is on a team, allow them to give their place to a spectator */}\r\n                            {teamRef.current === 'white' || teamRef.current === 'black' ? \r\n                                <button className='btn btn-primary' onClick={() => tradePlacesWithSpectator(watcher)}>Trade Places</button> :\r\n                                ''\r\n                            }\r\n                        </span>\r\n                    </p>\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\chess-game\\src\\components\\HomeHeader\\index.js",[],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":1,"column":8,"nodeType":"123","messageId":"124","endLine":1,"endColumn":12},{"ruleId":"125","severity":1,"message":"126","line":313,"column":8,"nodeType":"127","endLine":313,"endColumn":10,"suggestions":"128"},{"ruleId":"121","severity":1,"message":"129","line":1,"column":7,"nodeType":"123","messageId":"124","endLine":1,"endColumn":11},{"ruleId":"121","severity":1,"message":"130","line":2,"column":7,"nodeType":"123","messageId":"124","endLine":2,"endColumn":13},{"ruleId":"121","severity":1,"message":"131","line":3,"column":7,"nodeType":"123","messageId":"124","endLine":3,"endColumn":11},{"ruleId":"121","severity":1,"message":"132","line":4,"column":7,"nodeType":"123","messageId":"124","endLine":4,"endColumn":13},{"ruleId":"121","severity":1,"message":"133","line":5,"column":7,"nodeType":"123","messageId":"124","endLine":5,"endColumn":12},{"ruleId":"134","severity":1,"message":"135","line":26,"column":86,"nodeType":"136","messageId":"137","endLine":26,"endColumn":88},{"ruleId":"134","severity":1,"message":"135","line":26,"column":142,"nodeType":"136","messageId":"137","endLine":26,"endColumn":144},{"ruleId":"138","severity":1,"message":"139","line":69,"column":5,"nodeType":"140","messageId":"137","endLine":71,"endColumn":6},{"ruleId":"117","replacedBy":"141"},{"ruleId":"119","replacedBy":"142"},{"ruleId":"134","severity":1,"message":"135","line":11,"column":36,"nodeType":"136","messageId":"137","endLine":11,"endColumn":38},{"ruleId":"121","severity":1,"message":"143","line":1,"column":38,"nodeType":"123","messageId":"124","endLine":1,"endColumn":47},{"ruleId":"121","severity":1,"message":"144","line":4,"column":10,"nodeType":"123","messageId":"124","endLine":4,"endColumn":19},{"ruleId":"121","severity":1,"message":"145","line":5,"column":10,"nodeType":"123","messageId":"124","endLine":5,"endColumn":16},{"ruleId":"121","severity":1,"message":"146","line":31,"column":9,"nodeType":"123","messageId":"124","endLine":31,"endColumn":20},{"ruleId":"121","severity":1,"message":"147","line":32,"column":9,"nodeType":"123","messageId":"124","endLine":32,"endColumn":22},{"ruleId":"121","severity":1,"message":"148","line":34,"column":9,"nodeType":"123","messageId":"124","endLine":34,"endColumn":20},{"ruleId":"121","severity":1,"message":"149","line":36,"column":9,"nodeType":"123","messageId":"124","endLine":36,"endColumn":17},{"ruleId":"121","severity":1,"message":"150","line":43,"column":9,"nodeType":"123","messageId":"124","endLine":43,"endColumn":30},{"ruleId":"121","severity":1,"message":"151","line":44,"column":9,"nodeType":"123","messageId":"124","endLine":44,"endColumn":33},{"ruleId":"125","severity":1,"message":"152","line":104,"column":8,"nodeType":"127","endLine":104,"endColumn":10,"suggestions":"153"},{"ruleId":"125","severity":1,"message":"154","line":134,"column":8,"nodeType":"127","endLine":134,"endColumn":27,"suggestions":"155"},{"ruleId":"125","severity":1,"message":"156","line":144,"column":8,"nodeType":"127","endLine":144,"endColumn":19,"suggestions":"157"},{"ruleId":"125","severity":1,"message":"158","line":155,"column":8,"nodeType":"127","endLine":155,"endColumn":27,"suggestions":"159"},{"ruleId":"121","severity":1,"message":"160","line":173,"column":11,"nodeType":"123","messageId":"124","endLine":173,"endColumn":19},{"ruleId":"161","severity":1,"message":"162","line":262,"column":29,"nodeType":"163","messageId":"164","endLine":271,"endColumn":14},{"ruleId":"165","severity":1,"message":"166","line":296,"column":57,"nodeType":"136","messageId":"167","endLine":296,"endColumn":58},{"ruleId":"121","severity":1,"message":"168","line":1,"column":28,"nodeType":"123","messageId":"124","endLine":1,"endColumn":36},{"ruleId":"161","severity":1,"message":"169","line":68,"column":25,"nodeType":"163","messageId":"164","endLine":77,"endColumn":10},{"ruleId":"170","severity":1,"message":"171","line":187,"column":9,"nodeType":"172","messageId":"173","endLine":206,"endColumn":10},{"ruleId":"174","severity":1,"message":"175","line":212,"column":1,"nodeType":"176","endLine":218,"endColumn":2},{"ruleId":"121","severity":1,"message":"177","line":1,"column":27,"nodeType":"123","messageId":"124","endLine":1,"endColumn":33},{"ruleId":"121","severity":1,"message":"178","line":18,"column":9,"nodeType":"123","messageId":"124","endLine":18,"endColumn":18},{"ruleId":"125","severity":1,"message":"179","line":39,"column":12,"nodeType":"127","endLine":39,"endColumn":31,"suggestions":"180"},"no-native-reassign",["181"],"no-negated-in-lhs",["182"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setSocket'. Either include it or remove the dependency array.","ArrayExpression",["183"],"'Pawn' is assigned a value but never used.","'Knight' is assigned a value but never used.","'Rook' is assigned a value but never used.","'Bishop' is assigned a value but never used.","'Queen' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-dupe-class-members","Duplicate name 'addPiece'.","MethodDefinition",["181"],["182"],"'Component' is defined but never used.","'useParams' is defined but never used.","'render' is defined but never used.","'usernameRef' is assigned a value but never used.","'usernameState' is assigned a value but never used.","'teamUpState' is assigned a value but never used.","'watchers' is assigned a value but never used.","'setGamePendingHeading' is assigned a value but never used.","'setGamePendingButtonText' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPieces'. Either include it or remove the dependency array.",["184"],"React Hook useEffect has missing dependencies: 'forceMove', 'setPieces', 'setTeamUp', 'socket', and 'teamUpRef'. Either include them or remove the dependency array.",["185"],"React Hook useEffect has a missing dependency: 'createTeamBoard'. Either include it or remove the dependency array.",["186"],"React Hook useEffect has a missing dependency: 'renderPieces'. Either include it or remove the dependency array.",["187"],"'addPiece' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'boardSquares', 'isDarkSquare', 'isDarkSquare', 'isDarkSquare'.","ArrowFunctionExpression","unsafeRefs","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'useState' is defined but never used.","Function declared in a loop contains unsafe references to variable(s) 'isDarkSquare', 'isDarkSquare', 'isDarkSquare'.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useRef' is defined but never used.","'teamState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'socket' and 'teamRef'. Either include them or remove the dependency array.",["188"],"no-global-assign","no-unsafe-negation",{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},"Update the dependencies array to be: [setSocket]",{"range":"201","text":"202"},"Update the dependencies array to be: [setPieces]",{"range":"203","text":"204"},"Update the dependencies array to be: [forceMove, isSocketConnected, setPieces, setTeamUp, socket, teamUpRef]",{"range":"205","text":"206"},"Update the dependencies array to be: [createTeamBoard, teamState]",{"range":"207","text":"208"},"Update the dependencies array to be: [boardSquaresState, renderPieces]",{"range":"209","text":"210"},"Update the dependencies array to be: [isSocketConnected, socket, teamRef]",{"range":"211","text":"212"},[12848,12850],"[setSocket]",[3674,3676],"[setPieces]",[4966,4985],"[forceMove, isSocketConnected, setPieces, setTeamUp, socket, teamUpRef]",[5329,5340],"[createTeamBoard, teamState]",[5826,5845],"[boardSquaresState, renderPieces]",[1321,1340],"[isSocketConnected, socket, teamRef]"]