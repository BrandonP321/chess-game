{"version":3,"sources":["logo.svg","classes/Piece.js","classes/Pawn.js","classes/Knight.js","classes/Rook.js","classes/Bishop.js","classes/Queen.js","classes/King.js","components/GameBoard/board.js","components/GameBoard/index.js","components/PlayersAside/index.js","components/GameHeader/index.js","pages/GameRoom/index.js","components/HomeHeader/index.js","pages/Home/index.js","App.js","reportWebVitals.js","index.js"],"names":["Piece","startLocation","color","currentLocation","this","letters","locationLetterIndex","indexOf","letter","possibleMoves","moveChanges","forEach","change","newMove","number","push","newLocation","Pawn","pieceType","blockedSpotsArr","availableSpotsArr","availableSpots","spot","filter","openSpot","Knight","Rook","i","location","Bishop","Queen","console","log","King","pawns","newPawn","knights","rooks","bishops","queens","kings","chosenPiece","pieces","getPieceReferenceFunc","possibleLocations","getPossibleMoves","letterIndex","upAndLeftSquareLetter","upAndRightSquareLetter","piece","downAndLeftSquareLetter","downAndRightSquareLetter","blockedSpots","length","removeBlockedPaths","piecesArr","createNewBoardPieces","board","createPiecesInstancesArray","getPotentialMoves","pieceIcons","rook","knight","bishop","queen","king","pawn","GameBoard","props","roomId","teamRef","teamState","socket","isSocketConnected","teamUpRef","usernameRef","usernameState","setTeamUp","teamUpState","isGameActiveRef","watchers","isGameActiveState","updatePiecesTaken","gamePendingHeading","gamePendingButtonText","handleOverlayButtonClick","setGamePendingHeading","setGamePendingButtonText","useState","window","innerWidth","screenWidth","setScreenWidth","boardSquaresState","setBoardSquaresState","boardSquaresRef","useRef","setPieces","data","current","renderPieces","currentlySelectedPiece","setCurrentlySelectedPiece","selectedPieceOpenSpots","setSelectedPieceOpenSpots","document","querySelectorAll","circle","style","opacity","square","querySelector","children","useEffect","addEventListener","on","move","forceMove","endLocation","room","createTeamBoard","piecesWithInstances","getPieceReference","updatePieceLocation","removePiece","pieceLocation","selectedPiece","pieceAtNewSpot","newPiecesArr","setCurrentLocation","team","boardSquares","isDarkSquare","className","data-letter","data-number","data-location","onClick","handleSquareClick","reverse","iconEle","remove","locationNode","createElement","innerHTML","appendChild","circleEle","emit","teamUp","event","clickedLocationLetter","target","parentElement","getAttribute","clickedLocationNumber","parseInt","pieceAtClickedSquare","piecesAreSameTeam","movePiece","height","fontSize","map","class","PlayersAside","whitePiecesTakenState","blackPiecesTakenState","whiteUsername","blackUsername","toggleMobileMenu","drawIsAsked","setDrawIsAsked","answerDraw","doesAccept","display","username","watcher","spectator","user","GameHeader","history","useHistory","handleLeaveGame","ENDPOINT","process","GameRoom","useParams","gameHasStarted","showModal","setShowModal","usernameHelpText","setUsernameHelpText","showMobileAside","setShowMobileAside","setGamePendingHeadingState","gamePendingHeadingRef","setGamePendingButtonTextState","gamePendingButtonTextRef","setWatchersState","watchersRef","setWatchers","setUsernameState","setUsername","setWhiteUsernameState","whiteUsernameRef","setWhiteUsername","setBlackUsernameState","blackUsernameRef","setBlackUsername","setWhitePiecesTakenState","whitePiecesTakenRef","setWhitePiecesTaken","setBlackPiecesTakenState","blackPiecesTakenRef","setBlackPiecesTaken","setTeamState","setTeam","setIsGameActiveState","setIsGameActive","setTeamUpState","setIsSocketConnected","socketIOClient","blackPlayer","whitePlayer","whitePiecesTaken","blackPiecesTaken","gameStatus","newUser","winningTeam","teamCapitalized","charAt","toUpperCase","slice","players","newSpectators","onbeforeunload","btnText","innerText","Modal","show","onHide","backdrop","keyboard","Header","Title","Body","type","value","placeholder","onChange","Footer","Button","variant","HomeHeader","Home","isCreatingRoom","setIsCreatingRoom","onSubmit","preventDefault","App","basename","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a3937353.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default class Piece {\r\n    constructor(startLocation, color, currentLocation) {\r\n        this.startLocation = startLocation;\r\n        this.color = color;\r\n        this.currentLocation = currentLocation ? currentLocation: startLocation\r\n        this.letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\n    }\r\n\r\n    getPossibleMoves() {\r\n        // index of letter of piece's current location\r\n        const locationLetterIndex = this.letters.indexOf(this.currentLocation.letter)\r\n\r\n        const possibleMoves = []\r\n        this.moveChanges.forEach(change => {\r\n            // get letter based on it's new index\r\n            const newLetter = this.letters[locationLetterIndex + change.letter]\r\n\r\n            // create new obj of new possible location\r\n            const newMove = {\r\n                letter: newLetter,\r\n                number: this.currentLocation.number + change.number\r\n            }\r\n            \r\n            // push move to array of moves if both are within possible letters and numbers\r\n            if (newMove.letter && newMove.number >= 1 && newMove.number <= 8) {\r\n                possibleMoves.push(newMove)\r\n            }\r\n        })\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    setCurrentLocation(newLocation) {\r\n        // update current Location\r\n        this.currentLocation = newLocation\r\n    }\r\n}","// const Piece = require('./Piece')\r\nimport Piece from './Piece'\r\n\r\nexport default class Pawn extends Piece {\r\n    constructor(startLocation, color, currentLocation) {\r\n        super(startLocation, color, currentLocation)\r\n        this.pieceType = 'pawn'\r\n        this.moveChanges = [\r\n            {\r\n                letter: 0,\r\n                number: this.color == 'black' ? -1: 1\r\n            }\r\n        ]\r\n    }\r\n    \r\n    removeBlockedPaths(blockedSpotsArr, availableSpotsArr) {\r\n        let availableSpots = availableSpotsArr;\r\n\r\n        blockedSpotsArr.forEach(spot => {\r\n            // if spot is on a different letter square than current, ignore since that piece can be attacked\r\n            if (spot.letter !== this.currentLocation.letter) {\r\n                return false\r\n            }\r\n            // if blocked spot is above current, block all spots above it including it\r\n            if (spot.number > this.currentLocation.number) {\r\n                availableSpots = availableSpots.filter(openSpot => openSpot.number >= spot.number && openSpot.letter !== this.currentLocation.letter)\r\n            } else {\r\n                // if blocked spot is below current, block all spots beneath it including it\r\n                availableSpots = availableSpots.filter(openSpot => openSpot.number <= spot.number && openSpot.letter !== this.currentLocation.letter)\r\n            }\r\n        })\r\n\r\n        return availableSpots\r\n    }\r\n}\r\n","// const Piece = require('./Piece')\r\nimport Piece from './Piece'\r\n\r\nexport default class Knight extends Piece {\r\n    constructor(startLocation, color, currentLocation) {\r\n        super(startLocation, color, currentLocation)\r\n        this.pieceType = 'knight'\r\n        this.moveChanges = [\r\n            {\r\n                letter: 2,\r\n                number: 1,\r\n            },\r\n            {\r\n                letter: 1,\r\n                number: 2,\r\n            },\r\n            {\r\n                letter: -1,\r\n                number: 2,\r\n            },\r\n            {\r\n                letter: -2,\r\n                number: 1,\r\n            },\r\n            {\r\n                letter: -2,\r\n                number: -1,\r\n            },\r\n            {\r\n                letter: -1,\r\n                number: -2,\r\n            },\r\n            {\r\n                letter: 1,\r\n                number: -2,\r\n            },\r\n            {\r\n                letter: 2,\r\n                number: -1,\r\n            },\r\n        ]\r\n    }\r\n}\r\n\r\n// let knight = new Knight({ letter: 'b', number: 1}, 'black')\r\n\r\n// console.log(knight.getPossibleMoves())\r\n\r\n// knight.setCurrentLocation({ letter: 'c', number: 3 })\r\n\r\n// console.log(knight)\r\n\r\n// console.log(knight.getPossibleMoves())","import Piece from './Piece'\r\n\r\nexport default class Rook extends Piece {\r\n    constructor(startLocation, color, currentLocation) {\r\n        super(startLocation, color, currentLocation)\r\n        this.pieceType = 'rook'\r\n        this.moveChanges = []\r\n        // create moves rook could make\r\n        for (var i = 1; i <= 7; i++) {\r\n            // push an increase of i right to array\r\n            this.moveChanges.push({ letter: i, number: 0 })\r\n            // push an increase of i left to array\r\n            this.moveChanges.push({ letter: -i, number: 0 })\r\n            // push an increase of i up to array\r\n            this.moveChanges.push({ letter: 0, number: i })\r\n            // push an increase of i down to array\r\n            this.moveChanges.push({ letter: 0, number: -i })\r\n        }\r\n    }\r\n\r\n    removeBlockedPaths(blockedSpotsArr, availableSpotsArr) {\r\n        let availableSpots = availableSpotsArr\r\n        blockedSpotsArr.forEach(spot => {\r\n            \r\n            // find direction to block off\r\n            if (spot.letter === this.currentLocation.letter) {\r\n                // letters are same so blocked path is horizontal\r\n                \r\n                if (spot.number > this.currentLocation.number) {\r\n                    // if blocked spot number is greater than current number, block all paths above current spot\r\n                    availableSpots = availableSpots.filter(location => location.number <= spot.number)\r\n                } else {\r\n                    // blocked spot number is less than current number, block paths below current spot\r\n                    availableSpots = availableSpots.filter(location => location.number >= spot.number)\r\n                }\r\n            } else {\r\n                // letters are different so blocked path is vertical\r\n                if (spot.letter > this.currentLocation.letter) {\r\n                    // blocked spot letter is greater so must be to right\r\n                    availableSpots = availableSpots.filter(location => location.letter <= spot.letter)\r\n                } else {\r\n                    // otherwise blocked path must be to the left\r\n                    availableSpots = availableSpots.filter(location => location.letter >= spot.letter)\r\n                }\r\n            }\r\n        })\r\n        return availableSpots\r\n    }\r\n}\r\n\r\n// module.exports = Rook;\r\n\r\n// let rook = new Rook({ letter: 'a', number: 1}, 'white')\r\n\r\n// console.log(rook)\r\n\r\n// console.log(rook.getPossibleMoves()) ","// const Piece = require('./Piece')\r\nimport Piece from './Piece'\r\n\r\nexport default class Bishop extends Piece {\r\n    constructor(startLocation, color, currentLocation) {\r\n        super(startLocation, color, currentLocation)\r\n        this.pieceType = 'bishop'\r\n        this.moveChanges = []\r\n        // create moves bishop could make\r\n        for (var i = 1; i <= 7; i++) {\r\n            // push an increase of i right and i up to array\r\n            this.moveChanges.push({ letter: i, number: i })\r\n            // push an increase of i right and i down to array\r\n            this.moveChanges.push({ letter: i, number: -i })\r\n            // push an increase of i left and i down to array\r\n            this.moveChanges.push({ letter: -i, number: -i })\r\n            // push an increase of i left and i up to array\r\n            this.moveChanges.push({ letter: -i, number: i })\r\n        }\r\n    }\r\n\r\n    removeBlockedPaths(blockedSpotsArr, availableSpotsArr) {\r\n        let availableSpots = availableSpotsArr\r\n        blockedSpotsArr.forEach(spot => {\r\n\r\n            // find direction to block off\r\n            if (spot.number > this.currentLocation.number) {\r\n                // if blocked spot's number is greater than current, path is upwards\r\n                // check if path is up and left or up and right\r\n                if (spot.letter > this.currentLocation.letter) {\r\n                    // if blocked spot's letter is greater than current, path is up and right\r\n                    availableSpots = availableSpots.filter(location => location.letter <= spot.letter || location.number <= spot.number)\r\n                } else {\r\n                    // otherwise path is up and left\r\n                    availableSpots = availableSpots.filter(location => location.letter >= spot.letter || location.number <= spot.number)\r\n                }\r\n            } else {\r\n                // otherwise path is downwards\r\n                // check if path is down and left or down and right\r\n                if (spot.letter > this.currentLocation.letter) {\r\n                    // if blocked spot's leter is greater than current, path is down and right\r\n                    availableSpots = availableSpots.filter(location => location.letter <= spot.letter || location.number >= spot.number)\r\n                } else {\r\n                    // otherwise path is down and left\r\n                    availableSpots = availableSpots.filter(location => location.letter >= spot.letter || location.number >= spot.number)\r\n                }\r\n            }\r\n        })\r\n        return availableSpots\r\n    }\r\n}\r\n\r\n// let bishop = new Bishop({ letter: 'h', number: 8 }, 'white')\r\n\r\n// console.log(bishop)\r\n\r\n// console.log(bishop.getPossibleMoves()) ","// const Piece = require('./Piece')\r\nimport Piece from './Piece'\r\n\r\nexport default class Queen extends Piece {\r\n    constructor(startLocation, color, currentLocation) {\r\n        super(startLocation, color, currentLocation)\r\n        this.pieceType = 'queen'\r\n        this.moveChanges = []\r\n        // create moves queen could make\r\n        for (var i = 1; i <= 7; i++) {\r\n            // push an increase of i right and i up to array\r\n            this.moveChanges.push({ letter: i, number: i })\r\n            // push an increase of i right and i down to array\r\n            this.moveChanges.push({ letter: i, number: -i })\r\n            // push an increase of i left and i down to array\r\n            this.moveChanges.push({ letter: -i, number: -i })\r\n            // push an increase of i left and i up to array\r\n            this.moveChanges.push({ letter: -i, number: i })\r\n            // push an increase of i right to array\r\n            this.moveChanges.push({ letter: i, number: 0 })\r\n            // push an increase of i left to array\r\n            this.moveChanges.push({ letter: -i, number: 0 })\r\n            // push an increase of i up to array\r\n            this.moveChanges.push({ letter: 0, number: i })\r\n            // push an increase of i down to array\r\n            this.moveChanges.push({ letter: 0, number: -i })\r\n        }\r\n    }\r\n\r\n    removeBlockedPaths(blockedSpotsArr, availableSpotsArr) {\r\n        let availableSpots = availableSpotsArr\r\n        blockedSpotsArr.forEach(spot => {\r\n            console.log(availableSpots)\r\n            console.log(spot)\r\n            // find direction to block off\r\n            if (spot.letter === this.currentLocation.letter) {\r\n                console.log('letters are same')\r\n                // letters are same so blocked path is horizontal\r\n\r\n                if (spot.number > this.currentLocation.number) {\r\n                    // if blocked spot number is greater than current number, block all paths above current spot\r\n                    availableSpots = availableSpots.filter(location => location.number <= spot.number || location.letter !== this.currentLocation.letter)\r\n                } else {\r\n                    // blocked spot number is less than current number, block paths below current spot\r\n                    availableSpots = availableSpots.filter(location => location.number >= spot.number || location.letter !== this.currentLocation.letter)\r\n                }\r\n            } else if (spot.number === this.currentLocation.number) {\r\n                console.log('numbers are same')\r\n                // letters are different so blocked path is vertical\r\n                if (spot.letter > this.currentLocation.letter) {\r\n                    // blocked spot letter is greater so must be to right\r\n                    availableSpots = availableSpots.filter(location => location.letter <= spot.letter || location.number !== this.currentLocation.number)\r\n                } else {\r\n                    // otherwise blocked path must be to the left\r\n                    availableSpots = availableSpots.filter(location => location.letter >= spot.letter || location.number !== this.currentLocation.number)\r\n                }\r\n            } else if (spot.number > this.currentLocation.number) {\r\n                console.log('upwards diagonal')\r\n                // if blocked spot's number is greater than current, path is upwards\r\n                // check if path is up and left or up and right\r\n                if (spot.letter > this.currentLocation.letter) {\r\n                    console.log('up and right')\r\n                    // if blocked spot's letter is greater than current, path is up and right\r\n                    availableSpots = availableSpots.filter(location => location.letter <= spot.letter || location.number < spot.number)\r\n                } else {\r\n                    console.log('up and left')\r\n                    // otherwise path is up and left\r\n                    availableSpots = availableSpots.filter(location => location.letter >= spot.letter || location.number < spot.number)\r\n                }\r\n            } else {\r\n                console.log('downwards diagonal')\r\n                // otherwise path is downwards\r\n                // check if path is down and left or down and right\r\n                if (spot.letter > this.currentLocation.letter) {\r\n                    // if blocked spot's leter is greater than current, path is down and right\r\n                    availableSpots = availableSpots.filter(location => location.letter <= spot.letter || location.number > spot.number)\r\n                } else {\r\n                    // otherwise path is down and left\r\n                    availableSpots = availableSpots.filter(location => location.letter >= spot.letter || location.number > spot.number)\r\n                }\r\n            }\r\n        })\r\n        return availableSpots\r\n    }\r\n}\r\n\r\n// module.exports = Queen;\r\n\r\n// let queen = new Queen({ letter: 'd', number: 1 }, 'white')\r\n\r\n// console.log(queen)\r\n\r\n// console.log(queen.getPossibleMoves()) ","import Piece from './Piece'\r\n\r\nexport default class King extends Piece {\r\n    constructor(startLocation, color, currentLocation) {\r\n        super(startLocation, color, currentLocation)\r\n        this.pieceType = 'king'\r\n        this.moveChanges = [\r\n            { letter: 0, number: -1 },\r\n            { letter: 0, number: 1 },\r\n            { letter: 1, number: 0 },\r\n            { letter: 1, number: 1 },\r\n            { letter: 1, number: -1 },\r\n            { letter: -1, number: 0 },\r\n            { letter: -1, number: 1 },\r\n            { letter: -1, number: -1 }\r\n        ]\r\n    }\r\n\r\n    removeBlockedPaths(blockedSpotsArr, availableSpotsArr) {\r\n        let availableSpots = availableSpotsArr\r\n        blockedSpotsArr.forEach(spot => {\r\n            // because the king can only move one square in any direction, there is no path to block\r\n            // we only need to remove the spot from the array of possible squares the king can move to\r\n            availableSpots = availableSpots.filter(openSpot => openSpot.letter !== spot.letter || openSpot.number !== spot.letter)\r\n        })\r\n        return availableSpots\r\n    }\r\n}","import React from 'react'\r\n\r\nimport Pawn from '../../classes/Pawn'\r\nimport Knight from '../../classes/Knight'\r\nimport Rook from '../../classes/Rook'\r\nimport Bishop from '../../classes/Bishop'\r\nimport Queen from '../../classes/Queen'\r\nimport King from '../../classes/King'\r\n\r\nconst letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\n\r\nfunction createNewBoardPieces() {\r\n    const pawns = []\r\n    // create white pawns and push them to the array\r\n    for (let i = 0; i < 8; i++) {\r\n        let newPawn = new Pawn({ letter: letters[i], number: 2 }, 'white')\r\n\r\n        pawns.push(newPawn)\r\n    }\r\n    // create black pawns and push them to the array\r\n    for (let i = 0; i < 8; i++) {\r\n        let newPawn = new Pawn({ letter: letters[i], number: 7 }, 'black')\r\n\r\n        pawns.push(newPawn)\r\n    }\r\n\r\n    const knights = [\r\n        new Knight({ letter: 'b', number: 1 }, 'white'),\r\n        new Knight({ letter: 'g', number: 1 }, 'white'),\r\n        new Knight({ letter: 'b', number: 8 }, 'black'),\r\n        new Knight({ letter: 'g', number: 8 }, 'black')\r\n    ]\r\n\r\n    const rooks = [\r\n        new Rook({ letter: 'a', number: 1 }, 'white'),\r\n        new Rook({ letter: 'h', number: 1 }, 'white'),\r\n        new Rook({ letter: 'a', number: 8 }, 'black'),\r\n        new Rook({ letter: 'h', number: 8 }, 'black'),\r\n    ]\r\n\r\n    const bishops = [\r\n        new Bishop({ letter: 'c', number: 1 }, 'white'),\r\n        new Bishop({ letter: 'f', number: 1 }, 'white'),\r\n        new Bishop({ letter: 'c', number: 8 }, 'black'),\r\n        new Bishop({ letter: 'f', number: 8 }, 'black'),\r\n    ]\r\n\r\n    const queens = [\r\n        new Queen({ letter: 'd', number: 1 }, 'white'),\r\n        new Queen({ letter: 'd', number: 8 }, 'black')\r\n    ]\r\n\r\n    const kings = [\r\n        new King({ letter: 'e', number: 1 }, 'white'),\r\n        new King({ letter: 'e', number: 8 }, 'black')\r\n    ]\r\n\r\n    return [...queens, ...bishops, ...rooks, ...knights, ...pawns, ...kings]\r\n}\r\n\r\nfunction createWhiteTeamBoard(squareClickFunction) {\r\n    console.log('creating board')\r\n    // create each square of board and push it to an array\r\n    const boardSquares = []\r\n\r\n    let isDarkSquare = true\r\n    for (let i = 8; i > 0; i--) {\r\n        letters.forEach(letter => {\r\n            boardSquares.push(<div className={isDarkSquare ? 'board-square square-light' : 'board-square square-dark'} data-letter={letter} data-number={i} data-location={letter + i}>\r\n                <div className='square-available-circle'></div>\r\n                <div className='square-clickable' onClick={squareClickFunction}></div>\r\n            </div>)\r\n            // only change isDarkSquare boolean if not on last letter\r\n            if (letter !== 'h') {\r\n                isDarkSquare = !isDarkSquare\r\n            }\r\n        })\r\n    }\r\n\r\n    return boardSquares\r\n}\r\n\r\nfunction createBlackTeamBoard(squareClickFunction) {\r\n    // because board for black team is the reverse of the white team's, we can\r\n    // just call the white board creation function and reverse the array\r\n    return createWhiteTeamBoard(squareClickFunction).reverse()\r\n}\r\n\r\nfunction getPotentialMoves(chosenPiece, pieces, getPieceReferenceFunc) {\r\n    // find which piece is at the given location\r\n    // const chosenPiece = getPieceReferenceFunc(pieceLocation)\r\n\r\n    // get possible locations of piece\r\n    let possibleLocations = chosenPiece.getPossibleMoves()\r\n\r\n    // if piece is a pawn at it's starting spot, allow a two square move\r\n    if (chosenPiece.pieceType === 'pawn') {\r\n        // if piece is white and at number of 2, allow 2 square jump\r\n        if (chosenPiece.color === 'white' && chosenPiece.currentLocation.number === 2) {\r\n            possibleLocations.push({ letter: chosenPiece.currentLocation.letter, number: 4 })\r\n        }\r\n        // if piece is black and at number of 7, allow 2 square jump\r\n        else if (chosenPiece.color === 'black' && chosenPiece.currentLocation.number === 7) {\r\n            possibleLocations.push({ letter: chosenPiece.currentLocation.letter, number: 5 })\r\n        }\r\n\r\n        // if piece is white and there is a piece up and to it's diagonal, add that square as an option\r\n        if (chosenPiece.color === 'white') {\r\n            // filter pieces for any pieces to the pawn's diagonal\r\n            const diagonalPieces = pieces.filter(pieces => {\r\n                const { letter, number } = pieces.currentLocation\r\n                const letterIndex = letters.indexOf(chosenPiece.currentLocation.letter)\r\n                const upAndLeftSquareLetter = letters[letterIndex - 1]\r\n                const upAndRightSquareLetter = letters[letterIndex + 1]\r\n                return (letter === upAndLeftSquareLetter || letter === upAndRightSquareLetter) && number === chosenPiece.currentLocation.number + 1\r\n            })\r\n            diagonalPieces.forEach(piece => possibleLocations.push(piece.currentLocation))\r\n        }\r\n        // allow diagonal attacks for black pieces as well\r\n        else if (chosenPiece.color === 'black') {\r\n            // filter pieces for any pieces to the pawn's diagonal\r\n            const diagonalPieces = pieces.filter(pieces => {\r\n                const { letter, number } = pieces.currentLocation\r\n                const letterIndex = letters.indexOf(chosenPiece.currentLocation.letter)\r\n                const downAndLeftSquareLetter = letters[letterIndex - 1]\r\n                const downAndRightSquareLetter = letters[letterIndex + 1]\r\n                return (letter === downAndLeftSquareLetter || letter === downAndRightSquareLetter) && number === chosenPiece.currentLocation.number - 1\r\n            })\r\n            diagonalPieces.forEach(piece => possibleLocations.push(piece.currentLocation))\r\n        }\r\n    }\r\n\r\n    // locations of friendly pieces blocking a path\r\n    const blockedSpots = []\r\n\r\n    // filter possible locations by pieces locations of other pieces on board\r\n    let availableSpots = possibleLocations.filter(newLocation => {\r\n        // iterate over pieces on board\r\n        for (var i = 0; i < pieces.length; i++) {\r\n            let piece = pieces[i]\r\n\r\n            // check if piece's location matches potential location and is not friendly\r\n            if (piece.currentLocation.letter === newLocation.letter &&\r\n                piece.currentLocation.number === newLocation.number) {\r\n                // if piece being moved is a knight, we don't need to worry about a path being blocked by a friendly piece\r\n                if (chosenPiece.pieceType === 'knight') {\r\n                    // check if piece is of same color as knight\r\n\r\n                    if (piece.color === chosenPiece.color) {\r\n                        // if pieces are same color, don't let knight move there\r\n                        return false\r\n                    } else {\r\n                        // if pieces are different colors, allow knight to move there\r\n                        return true\r\n                    }\r\n                } else if (piece.color === chosenPiece.color) {\r\n                    // add location of piece to blockedSpots array\r\n                    blockedSpots.push(piece.currentLocation)\r\n                    // return false to remove this spot option\r\n                    return false\r\n                } else if (piece.color !== chosenPiece.color) {\r\n                    // if piece is an enemy piece, add that piece to blocked spots but keep the spot as available\r\n                    // this will restrict player from accessing any spots beyond the enemy\r\n                    blockedSpots.push(piece.currentLocation)\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        // return true if nothing has been returned yet\r\n        return true\r\n    })\r\n\r\n    // if any paths are blocked, remove the blocked spots from possible moves\r\n    if (blockedSpots.length > 0) {\r\n        availableSpots = chosenPiece.removeBlockedPaths(blockedSpots, availableSpots)\r\n    }\r\n\r\n    return availableSpots\r\n}\r\n\r\nfunction createPiecesInstancesArray(piecesArr) {\r\n    const pieces = []\r\n    piecesArr.forEach(piece => {\r\n        const { startLocation, color, currentLocation } = piece\r\n\r\n        // based on what the piece is, create an instance of that piece and push it to the new arr\r\n        switch(piece.pieceType) {\r\n            case 'bishop':\r\n                pieces.push(new Bishop(startLocation, color, currentLocation))\r\n                break;\r\n            case 'king':\r\n                pieces.push(new King(startLocation, color, currentLocation))\r\n                break;\r\n            case 'knight':\r\n                pieces.push(new Knight(startLocation, color, currentLocation))\r\n                break;\r\n            case 'pawn':\r\n                pieces.push(new Pawn(startLocation, color, currentLocation))\r\n                break;\r\n            case 'queen':\r\n                pieces.push(new Queen(startLocation, color, currentLocation))\r\n                break;\r\n            case 'rook':\r\n                pieces.push(new Rook(startLocation, color, currentLocation))\r\n                break;\r\n        }\r\n    })\r\n\r\n    return pieces\r\n}\r\n\r\nexport default {\r\n    createNewBoardPieces: createNewBoardPieces,\r\n    createWhiteTeamBoard: createWhiteTeamBoard,\r\n    createBlackTeamBoard: createBlackTeamBoard,\r\n    getPotentialMoves: getPotentialMoves,\r\n    createPiecesInstancesArray: createPiecesInstancesArray\r\n}","import React, { useState, useEffect, Component, useRef } from 'react'\r\nimport './index.css'\r\nimport board from './board'\r\nimport { useParams } from 'react-router-dom'\r\nimport { render } from '@testing-library/react'\r\n// destructure createBoard file for functions to create & manipulate board\r\nconst {\r\n    createNewBoardPieces,\r\n    createPiecesInstancesArray,\r\n    getPotentialMoves\r\n} = board\r\n\r\nconst pieceIcons = {\r\n    rook: '<i class=\"fas fa-chess-rook piece-icon\"></i>',\r\n    knight: '<i class=\"fas fa-chess-knight piece-icon\"></i>',\r\n    bishop: '<i class=\"fas fa-chess-bishop piece-icon\"></i>',\r\n    queen: '<i class=\"fas fa-chess-queen piece-icon\"></i>',\r\n    king: '<i class=\"fas fa-chess-king piece-icon\"></i>',\r\n    pawn: '<i class=\"fas fa-chess-pawn piece-icon\"></i>'\r\n}\r\n\r\nconst letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\n\r\nexport default function GameBoard(props) {\r\n    const {\r\n        roomId,\r\n        teamRef,\r\n        teamState,\r\n        socket,\r\n        isSocketConnected,\r\n        usernameRef,\r\n        usernameState,\r\n        teamUpRef,\r\n        teamUpState,\r\n        setTeamUp,\r\n        watchers,\r\n        isGameActiveRef,\r\n        isGameActiveState,\r\n        updatePiecesTaken,\r\n        gamePendingHeading,\r\n        gamePendingButtonText,\r\n        handleOverlayButtonClick,\r\n        setGamePendingHeading,\r\n        setGamePendingButtonText\r\n    } = props\r\n\r\n    const [screenWidth, setScreenWidth] = useState(window.innerWidth)\r\n\r\n    const [boardSquaresState, setBoardSquaresState] = useState([])\r\n\r\n    // reference will be same as boardSquaresState but will be used as a reference for functions rather than for rendering the board\r\n    const boardSquaresRef = useRef([])\r\n    const setBoardSquaresRef = data => {\r\n        boardSquaresRef.current = data\r\n    }\r\n\r\n    // const [pieces, setPieces] = useState([])\r\n    const pieces = useRef([])\r\n    const setPieces = data => {\r\n        pieces.current = data\r\n        if (pieces.current.length > 0 && boardSquaresRef.current.length > 0) {\r\n            renderPieces()\r\n        }\r\n    }\r\n\r\n    const currentlySelectedPiece = useRef({})\r\n    const setCurrentlySelectedPiece = data => {\r\n        currentlySelectedPiece.current = data\r\n    }\r\n    // const [selectedPieceOpenSpots, setSelectedPieceOpenSpots] = useState([])\r\n    const selectedPieceOpenSpots = useRef([])\r\n\r\n    // when user changes this ref, also update the shown circles on the board\r\n    const setSelectedPieceOpenSpots = data => {\r\n        selectedPieceOpenSpots.current = data\r\n\r\n        // first make sure all circles are hidden\r\n        document.querySelectorAll('.square-available-circle').forEach(circle => {\r\n            circle.style.opacity = 0\r\n        })\r\n\r\n        // now show a circle on each square that is available\r\n        selectedPieceOpenSpots.current.forEach(square => {\r\n            // get reference to square at the given loaction\r\n            const squareNode = document.querySelector(`[data-location=${square.letter + square.number}]`)\r\n            // get reference to ciricle inside of square node\r\n            const circle = squareNode.children[0]\r\n            // update opacity of the circle\r\n            circle.style.opacity = .6\r\n        })\r\n    }\r\n\r\n    // on component load, ...\r\n    useEffect(() => {\r\n        // if no pieces are set in the state, generate all board pieces and add them to the state\r\n        if (pieces.current.length < 1) {\r\n            setPieces(createNewBoardPieces())\r\n        }\r\n\r\n        // when window inner width changes, update the width in the state\r\n        window.addEventListener('resize', () => {\r\n            setScreenWidth(window.innerWidth)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (socket.current) {\r\n            socket.current.on('opponentMove', move => {\r\n                console.log('opponent has moved')\r\n                forceMove(move.startLocation, move.endLocation)\r\n                // now update which team is able to move a piece\r\n                if (teamUpRef.current === 'white') {\r\n                    setTeamUp('black')\r\n                } else if (teamUpRef.current === 'black') {\r\n                    setTeamUp('white')\r\n                }\r\n            })\r\n\r\n            socket.current.on('roomJoined', room => {\r\n                createTeamBoard('white')\r\n                \r\n                // if room.pieces has more than 0 items, set the state to that\r\n                if (room.pieces.length > 0) {\r\n                    // because each piece is now just an object in server, create array of pieces as instances of their respective piece class\r\n                    const piecesWithInstances = createPiecesInstancesArray(room.pieces)\r\n                    // set the new array of pieces to the state\r\n                    setPieces(piecesWithInstances)\r\n                }\r\n\r\n                // since no team has been assigned yet, create the board for team white\r\n            })\r\n\r\n            socket.current.on('resetGame', () => {\r\n                // on game reset, reset board pieces\r\n                setPieces(createNewBoardPieces())\r\n            })\r\n        }\r\n    }, [isSocketConnected])\r\n\r\n    // render board when the team is changed\r\n    useEffect(() => {\r\n        console.log('should create board for team ', teamState)\r\n        if (teamState === 'white' || teamState === 'watcher') {\r\n            createTeamBoard('white')\r\n        } else if (teamState === 'black') {\r\n            createTeamBoard('black');\r\n        }\r\n    }, [teamState])\r\n\r\n    useEffect(() => {\r\n        if (boardSquaresState.length > 0 && pieces.current.length > 0) {\r\n            // update board squares reference to contain up to date version of board\r\n            setBoardSquaresRef(boardSquaresState)\r\n            renderPieces()\r\n            console.log('creating click event listeners')\r\n            // now that boards are loaded back on to the page, add event listeners to each square\r\n            // createClickEventListener()\r\n        }\r\n    }, [boardSquaresState])\r\n\r\n    // function to get reference to piece instance in state array of all pieces\r\n    const getPieceReference = (location) => {\r\n        const pieceArr = pieces.current.filter(piece => {\r\n            const { letter, number } = piece.currentLocation;\r\n            return letter === location.letter && number === location.number\r\n        })\r\n        const piece = pieceArr[0]\r\n        return piece\r\n    }\r\n\r\n    const updatePieceLocation = (currentLocation, newLocation) => {\r\n        const piece = getPieceReference(currentLocation)\r\n\r\n        piece.currentLocation = { letter: newLocation.letter, number: newLocation.number }\r\n    }\r\n\r\n    const addPiece = (piece) => {\r\n        setPieces([...pieces.current, piece])\r\n    }\r\n\r\n    const removePiece = (pieceLocation) => {\r\n        // get pieces from array of pieces excpet piece to remove\r\n        const newPiecesArr = pieces.current.filter(piece => {\r\n            const { letter, number } = piece.currentLocation\r\n\r\n            return letter !== pieceLocation.letter || number !== pieceLocation.number\r\n        })\r\n\r\n        return newPiecesArr\r\n    }\r\n\r\n    const movePiece = (selectedPiece, newLocation) => {\r\n        // get piece at clicked spot, will be null if no piece\r\n        const pieceAtNewSpot = getPieceReference(newLocation)\r\n\r\n        // this is an array of length 1 if square is open\r\n        const newSquareisOpen = selectedPieceOpenSpots.current.filter(spot => spot.letter === newLocation.letter && spot.number === newLocation.number)\r\n        // if new square is not available, return false\r\n        if (newSquareisOpen.length === 0) {\r\n            return false\r\n        } else {\r\n            // send message to server that a piece was just moved\r\n            socket.current.emit('userMovedPiece', { startLocation: selectedPiece.currentLocation, endLocation: newLocation })\r\n            // update which team is up\r\n            if (teamUpRef.current === 'black') {\r\n                setTeamUp('white')\r\n            } else if (teamUpRef.current === 'white') {\r\n                setTeamUp('black')\r\n            }\r\n\r\n            // if there is another piece on that square, remove it from the state\r\n            if (pieceAtNewSpot) {\r\n                // remove piece at the new location\r\n                const newPiecesArr = removePiece(newLocation)\r\n                // update the location of the moved piece\r\n                updatePieceLocation(selectedPiece.currentLocation, newLocation)\r\n                // update pieces state with new array of pieces\r\n                setPieces(newPiecesArr)\r\n                // update array of pieces taken\r\n                updatePiecesTaken(pieceAtNewSpot)\r\n                // send piece taken to server\r\n                socket.current.emit('pieceTaken', pieceAtNewSpot)\r\n\r\n                // if piece taken is the king, emit the loss to the server\r\n                if (pieceAtNewSpot.pieceType === 'king') {\r\n                    socket.current.emit('kingTaken', teamRef.current)\r\n                }\r\n            } else {\r\n                // if no piece is at new square, just update the pieces on the board\r\n                selectedPiece.setCurrentLocation({ letter: newLocation.letter, number: newLocation.number })\r\n                renderPieces();\r\n            }\r\n        }\r\n    }\r\n\r\n    // force a piece to move if server sends opponent's move\r\n    const forceMove = (startLocation, newLocation) => {\r\n        console.log('start location: ', startLocation)\r\n        const selectedPiece = getPieceReference(startLocation)\r\n        console.log(pieces.current)\r\n        const pieceAtNewSpot = getPieceReference(newLocation)\r\n\r\n        // if there is another piece on that square, remove it from the state\r\n        if (pieceAtNewSpot) {\r\n            // remove piece at the new location\r\n            const newPiecesArr = removePiece(newLocation)\r\n            // update the location of the moved piece\r\n            updatePieceLocation(selectedPiece.currentLocation, newLocation)\r\n            // update pieces state with new array of pieces\r\n            setPieces(newPiecesArr)\r\n            // update array of pieces taken\r\n            updatePiecesTaken(pieceAtNewSpot)\r\n        } else {\r\n            // if no piece is at new square, just update the pieces on the board\r\n            selectedPiece.setCurrentLocation({ letter: newLocation.letter, number: newLocation.number })\r\n            renderPieces();\r\n        }\r\n    }\r\n\r\n    const createTeamBoard = team => {\r\n        // create each square of board and push it to an array\r\n        let boardSquares = []\r\n\r\n        let isDarkSquare = true\r\n        for (let i = 8; i > 0; i--) {\r\n            letters.forEach(letter => {\r\n                boardSquares.push(<div className={isDarkSquare ? 'board-square square-light' : 'board-square square-dark'} data-letter={letter} data-number={i} data-location={letter + i}>\r\n                    <div className='square-available-circle'></div>\r\n                    <div className='square-clickable' onClick={handleSquareClick}></div>\r\n                </div>)\r\n                // only change isDarkSquare boolean if not on last letter\r\n                if (letter !== 'h') {\r\n                    isDarkSquare = !isDarkSquare\r\n                }\r\n            })\r\n        }\r\n\r\n        // if the team is black, reverse the board array\r\n        if (team === 'black') {\r\n            boardSquares = boardSquares.reverse()\r\n        }\r\n        console.log('setting board squares state')\r\n        return setBoardSquaresState(boardSquares)\r\n    }\r\n\r\n    const renderPieces = () => {\r\n        console.log('rendering pieces')\r\n        // clear all pieces off of board before rendering back to board\r\n        document.querySelectorAll('.piece-icon-container').forEach(iconEle => {\r\n            iconEle.remove()\r\n        })\r\n\r\n        pieces.current.forEach(piece => {\r\n            const pieceLocation = piece.currentLocation.letter + piece.currentLocation.number\r\n            // square on board for piece to be added to\r\n            const locationNode = document.querySelector(`[data-location=${pieceLocation}]`)\r\n            // create element to contain piece icon\r\n            const iconEle = document.createElement('div')\r\n            iconEle.innerHTML = pieceIcons[piece.pieceType]\r\n            iconEle.className = 'piece-icon-container ' + `icon-container-${piece.color}`\r\n\r\n            // append piece to square on board\r\n            locationNode.appendChild(iconEle)\r\n        })\r\n\r\n        // clear all circles from board\r\n        document.querySelectorAll('.square-available-circle').forEach(circleEle => {\r\n            circleEle.style.opacity = 0\r\n        })\r\n\r\n        // reset states\r\n        setCurrentlySelectedPiece({})\r\n\r\n        setSelectedPieceOpenSpots([])\r\n\r\n        // send message to server that pieces array has changed since this function gets called when a piece gets moved\r\n        if (isSocketConnected) {\r\n            console.log('updating pieces on server')\r\n            socket.current.emit('piecesUpdate', { pieces: pieces.current, teamUp: teamUpRef.current })\r\n        }\r\n    }\r\n\r\n    const handleSquareClick = (event) => {\r\n        console.log('click')\r\n        // if the team that is up is not the user's team or game is not active, don't let anything happen on click\r\n        if (teamUpRef.current !== teamRef.current || !isGameActiveRef.current) {\r\n            console.log('you are not up')\r\n            return\r\n        }\r\n        const clickedLocationLetter = event.target.parentElement.getAttribute('data-letter')\r\n        const clickedLocationNumber = parseInt(event.target.parentElement.getAttribute('data-number'))\r\n        // get the piece at the given square, if no piece will be undefined\r\n        const pieceAtClickedSquare = getPieceReference({ letter: clickedLocationLetter, number: clickedLocationNumber })\r\n        // get the currently selected piece, will be undefined if no piece is selected\r\n        let selectedPiece = getPieceReference(currentlySelectedPiece.current)\r\n        // if a piece is selected and a piece is at the square you are trying to move to , check if they are the same color\r\n        let piecesAreSameTeam = selectedPiece && pieceAtClickedSquare ? selectedPiece.color === pieceAtClickedSquare.color : false\r\n\r\n        console.log(pieceAtClickedSquare)\r\n        // if there is a selected piece, user must be looking to move that piece\r\n        if (selectedPiece && !piecesAreSameTeam && (selectedPiece.currentLocation.letter !== clickedLocationLetter || selectedPiece.currentLocation.number !== clickedLocationNumber)) {\r\n            movePiece(selectedPiece, { letter: clickedLocationLetter, number: clickedLocationNumber })\r\n        }\r\n        // if user is clicking a piece to see where it can move to, show available squares\r\n        else if (pieceAtClickedSquare) {\r\n            // update state to contain open spots for selcted piece\r\n            // setSelectedPieceOpenSpots([])\r\n\r\n            // if another square is already clicked and user is swithcing to another piece\r\n            if (selectedPiece && (clickedLocationLetter !== selectedPiece.currentLocation.letter || clickedLocationNumber !== selectedPiece.currentLocation.number)) {\r\n                // update currently selected piece state to new piece\r\n                setCurrentlySelectedPiece({ letter: clickedLocationLetter, number: clickedLocationNumber })\r\n                // update available spots state\r\n                setSelectedPieceOpenSpots(getPotentialMoves(pieceAtClickedSquare, pieces.current))\r\n            }\r\n            // if user is just re-selcting their currently selcted piece, remove open spots from board\r\n            else if (selectedPiece && clickedLocationLetter === selectedPiece.currentLocation.letter && clickedLocationNumber === selectedPiece.currentLocation.number) {\r\n                setSelectedPieceOpenSpots([])\r\n                // reset currently selected piece state\r\n                setCurrentlySelectedPiece({})\r\n            }\r\n\r\n            // if no other piece is currently selected, select piece and show available spots if team is same as user's team\r\n            else if (!selectedPiece && pieceAtClickedSquare.color === teamRef.current) {\r\n                setCurrentlySelectedPiece({ letter: clickedLocationLetter, number: clickedLocationNumber })\r\n                setSelectedPieceOpenSpots(getPotentialMoves(pieceAtClickedSquare, pieces.current))\r\n            }\r\n\r\n            else {\r\n                console.log('user is on a different team than selected piece')\r\n            }\r\n\r\n        }\r\n\r\n        else {\r\n            console.log('nothing is happening')\r\n        }\r\n    }\r\n\r\n    return (\r\n        // based on screen's width, determine height of board\r\n        <div className='board' style={screenWidth < 850 ? { height: `${screenWidth}px` } : { height: `850px` }}>\r\n            {/* set font size to be inherited by each piece icon */}\r\n            <div className='board-squares-wrapper' style={screenWidth < 850 ? {fontSize: `${screenWidth / 8 * .8}px`} : {fontSize: `${850 / 8 * .8}px`}}>\r\n                {boardSquaresState.map(square => square)}\r\n            </div>\r\n            <div className={`pending-game-overlay${!isGameActiveState ? ' show-pending-overlay' : ''}`}>\r\n                <div className='pending-game-text-container'>\r\n                    <h2 className='pending-game-header'>{gamePendingHeading}</h2>\r\n                    <p>\r\n                        {`Invite your friends!  Send them your current url or have them join with the room's ID of ${roomId}`}\r\n                    </p>\r\n                    {gamePendingButtonText && teamState !== 'watcher' ?\r\n                        // show button if there is text for the button\r\n                        <button className='btn btn-primary pending-game-button' onClick={handleOverlayButtonClick}>{gamePendingButtonText}</button> :\r\n                        false\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState, useRef, useEffect } from 'react'\r\nimport './index.css'\r\n\r\nconst pieceIcons = {\r\n    rook: <i class=\"fas fa-chess-rook taken-piece-icon\"></i>,\r\n    knight: <i class=\"fas fa-chess-knight taken-piece-icon\"></i>,\r\n    bishop: <i class=\"fas fa-chess-bishop taken-piece-icon\"></i>,\r\n    queen: <i class=\"fas fa-chess-queen taken-piece-icon\"></i>,\r\n    king: <i class=\"fas fa-chess-king taken-piece-icon\"></i>,\r\n    pawn: <i class=\"fas fa-chess-pawn taken-piece-icon\"></i>\r\n}\r\n\r\nexport default function PlayersAside(props) {\r\n    const {\r\n        socket,\r\n        isSocketConnected,\r\n        teamRef,\r\n        teamState,\r\n        whitePiecesTakenState,\r\n        blackPiecesTakenState,\r\n        whiteUsername,\r\n        blackUsername,\r\n        usernameRef,\r\n        usernameState,\r\n        watchers,\r\n        roomId,\r\n        toggleMobileMenu\r\n    } = props\r\n\r\n    const [drawIsAsked, setDrawIsAsked] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (socket.current) {\r\n            socket.current.on('userWantsDraw', () => {\r\n                // if the current user is on either team, ask if they want a draw\r\n                if (teamRef.current === 'white' || teamRef.current === 'black') {\r\n                    setDrawIsAsked(true)\r\n                }\r\n            })\r\n        }\r\n    }, [isSocketConnected])\r\n\r\n    const askForDraw = () => {\r\n        // emite to server that user wants to draw\r\n        socket.current.emit('userWantsDraw')\r\n    }\r\n\r\n    const answerDraw = (doesAccept) => {\r\n        console.log('you answered draw with ', doesAccept)\r\n        // hide the text asking for a draw\r\n        setDrawIsAsked(false)\r\n\r\n        // if user accepts draw, send message to server to draw the game\r\n        if (doesAccept) {\r\n            socket.current.emit('userAcceptsDraw')\r\n        }\r\n    }\r\n\r\n    const playerResign = () => {\r\n        // emit to other users that user has resigned\r\n        socket.current.emit('resign', { username: usernameRef.current, team: teamRef.current })\r\n    }\r\n\r\n    const tradePlacesWithSpectator = (spectator) => {\r\n        // send message to server that a user and spectator are trading spots\r\n        socket.current.emit('givingSpotToSpectator', {\r\n            user: {\r\n                username: usernameRef.current,\r\n                team: teamRef.current\r\n            },\r\n            spectator: spectator\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='player-aside-container'>\r\n            <span className='mobile-menu-exit' onClick={toggleMobileMenu}>&times;</span>\r\n            <div className='player-btns' style={teamRef.current !== 'watcher' ? {} : { display: 'none' }}>\r\n                <button onClick={askForDraw}>Draw</button>\r\n                <button onClick={playerResign}>Resign</button>\r\n            </div>\r\n            <div className='draw-question-wrapper' style={drawIsAsked && teamRef.current !== 'watcher' ? {} : { display: 'none' }}>\r\n                <p>Would you like to call it a draw?</p>\r\n                <button className='draw-btn-yes' onClick={() => answerDraw(true)}>Yes</button>\r\n                <button className='draw-btn-no' onClick={() => answerDraw(false)}>No</button>\r\n            </div>\r\n            <div className='player-info-container'>\r\n                <h3 className='player-username'>\r\n                    <span><i class=\"fas fa-chess-king team-icon icon-white\"></i> </span>\r\n                    {!whiteUsername ? 'No Player' : whiteUsername === usernameState ? 'You' : whiteUsername}\r\n                </h3>\r\n                <div className='taken-pieces-container taken-pieces-black'>\r\n                    {blackPiecesTakenState.map(piece => {\r\n                        return (\r\n                            <div className='taken-piece-container'>\r\n                                {pieceIcons[piece]}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <div className='player-info-container'>\r\n                <h3 className='player-username'>\r\n                    <span><i class=\"fas fa-chess-king team-icon icon-black\"></i> </span>\r\n                    {!blackUsername ? 'No Player' : blackUsername === usernameState ? 'You' : blackUsername}\r\n                </h3>\r\n                <div className='taken-pieces-container taken-pieces-white'>\r\n                    {whitePiecesTakenState.map(piece => {\r\n                        return (\r\n                            <div className='taken-piece-container'>\r\n                                {pieceIcons[piece]}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <div className='spectators-container'>\r\n                <h3>Spectators</h3>\r\n                <div className='spectators-flex'>\r\n                    {watchers.map(watcher => {\r\n                        return <p className='spectator-name'>\r\n                            {watcher === usernameRef.current ? 'You' : watcher}\r\n                            <span>\r\n                                {/* if user is on a team, allow them to give their place to a spectator */}\r\n                                {teamRef.current === 'white' || teamRef.current === 'black' ?\r\n                                    <button className='btn btn-primary trade-place-btn' onClick={() => tradePlacesWithSpectator(watcher)}>Trade Places</button> :\r\n                                    ''\r\n                                }\r\n                            </span>\r\n                        </p>\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <p className='room-id-text'><strong>Room ID: {roomId}</strong></p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport './index.css'\r\n\r\nexport default function GameHeader(props) {\r\n    let history = useHistory();\r\n\r\n    const { toggleMobileMenu, handleLeaveGame } = props\r\n\r\n    return (\r\n        <header className='game-header'>\r\n            <h1 onClick={() => history.push('/')}><i class=\"fas fa-chess-king header-icon\" /> 1-2-3 Chess</h1>\r\n            <div className='responsive-header-btns'>\r\n                <button className='leave-room-btn btn btn-danger' onClick={handleLeaveGame}>Leave Room</button>\r\n                <i className='fas fa-bars menu-icon' onClick={toggleMobileMenu}></i>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport { Modal, Button } from 'react-bootstrap'\r\nimport socketIOClient from 'socket.io-client'\r\nimport GameBoard from '../../components/GameBoard'\r\nimport PlayersAside from '../../components/PlayersAside'\r\nimport GameHeader from '../../components/GameHeader'\r\nimport './index.css'\r\n\r\n// endpoint for socket.io connection\r\nconst ENDPOINT = `${process.env.REACT_APP_SOCKET_ENDPOINT}/game`\r\n\r\nexport default function GameRoom() {\r\n    let history = useHistory();\r\n\r\n    // get room id from url\r\n    const { room } = useParams();\r\n\r\n    const gameHasStarted = useRef(false)\r\n\r\n    // controls the state of the modal\r\n    const [showModal, setShowModal] = useState(true)\r\n\r\n    const [usernameHelpText, setUsernameHelpText] = useState('')\r\n\r\n    // controls showing mobile menu\r\n    const [showMobileAside, setShowMobileAside] = useState(false)\r\n\r\n    // state of heading and button showing when game is inactive\r\n    const [gamePendingHeading, setGamePendingHeadingState] = useState('Waiting for Second Player')\r\n    const gamePendingHeadingRef = useRef('Waiting for Second Player')\r\n    const setGamePendingHeading = data => {\r\n        gamePendingHeadingRef.current = data\r\n        setGamePendingHeadingState(data)\r\n        console.log('pending heading updated')\r\n    }\r\n    const [gamePendingButtonText, setGamePendingButtonTextState] = useState('')\r\n    const gamePendingButtonTextRef = useRef('')\r\n    const setGamePendingButtonText = data => {\r\n        gamePendingButtonTextRef.current = data\r\n        setGamePendingButtonTextState(data)\r\n    }\r\n\r\n\r\n    // state and ref for people spectating the game\r\n    const [watchers, setWatchersState] = useState([])\r\n    const watchersRef = useRef([])\r\n    const setWatchers = data => {\r\n        setWatchersState(data)\r\n        watchersRef.current = data\r\n    }\r\n\r\n    // state and ref for user's username\r\n    const [usernameState, setUsernameState] = useState('')\r\n    const usernameRef = useRef('')\r\n    const setUsername = data => {\r\n        usernameRef.current = data\r\n        setUsernameState(data)\r\n    }\r\n\r\n    const [whiteUsername, setWhiteUsernameState] = useState('')\r\n    const whiteUsernameRef = useRef('')\r\n    const setWhiteUsername = data => {\r\n        whiteUsernameRef.current = data\r\n        setWhiteUsernameState(data)\r\n    }\r\n    const [blackUsername, setBlackUsernameState] = useState('')\r\n    const blackUsernameRef = useRef('')\r\n    const setBlackUsername = data => {\r\n        blackUsernameRef.current = data\r\n        setBlackUsernameState(data)\r\n    }\r\n\r\n    // state and ref for white pieces taken by black player\r\n    const [whitePiecesTakenState, setWhitePiecesTakenState] = useState([])\r\n    const whitePiecesTakenRef = useRef([])\r\n    const setWhitePiecesTaken = data => {\r\n        whitePiecesTakenRef.current = data\r\n        setWhitePiecesTakenState(data)\r\n    }\r\n\r\n    // state and ref for black pieces taken by white player\r\n    const [blackPiecesTakenState, setBlackPiecesTakenState] = useState([])\r\n    const blackPiecesTakenRef = useRef([])\r\n    const setBlackPiecesTaken = data => {\r\n        blackPiecesTakenRef.current = data;\r\n        setBlackPiecesTakenState(data)\r\n    }\r\n\r\n    // state and ref for user's team\r\n    const [teamState, setTeamState] = useState()\r\n    const teamRef = useRef()\r\n    const setTeam = data => {\r\n        teamRef.current = data;\r\n        setTeamState(data)\r\n    }\r\n    \r\n    // state and ref indicating if game is active\r\n    const [isGameActiveState, setIsGameActiveState] = useState(false)\r\n    const isGameActiveRef = useRef(false)\r\n    const setIsGameActive = data => {\r\n        console.log('game status updated to ', data)\r\n        isGameActiveRef.current = data;\r\n        setIsGameActiveState(data);\r\n        // update boolean for game status on server\r\n        socket.current.emit('gameStatusChange', data)\r\n    }\r\n\r\n    // state and ref for which team is able to move\r\n    const [teamUpState, setTeamUpState] = useState('none')\r\n    const teamUpRef = useRef('none')\r\n    const setTeamUp = data => {\r\n        teamUpRef.current = data\r\n        setTeamUpState(data)\r\n\r\n        // update value on server\r\n        socket.current.emit('updateTeamUp', data)\r\n    }\r\n\r\n    // state indicating if site is connected to the socket.io server\r\n    const [isSocketConnected, setIsSocketConnected] = useState(false)\r\n    // reference to the socket.io connection\r\n    const socket = useRef()\r\n    const setSocket = data => {\r\n        socket.current = data\r\n\r\n        // when the useRef hook for the socket is set, we know we are now connected to the server\r\n        setIsSocketConnected(true)\r\n\r\n        // create socket.io listeners\r\n\r\n        socket.current.on('connect', data => {\r\n            console.log('connected to game name space')\r\n            // make request to join the current room on the server\r\n            socket.current.emit('joinRoom', room)\r\n        })\r\n\r\n        // when the user joins a room, get all current info on that room\r\n        socket.current.on('roomJoined', room => {\r\n            console.log('room joined ', room)\r\n            // update state and reference hooks to contain current info on room\r\n            setBlackUsername(room.blackPlayer)\r\n            setWhiteUsername(room.whitePlayer)\r\n            setTeamUp(room.teamUp)\r\n            setWatchers(room.watchers)\r\n            setWhitePiecesTaken(room.whitePiecesTaken)\r\n            setBlackPiecesTaken(room.blackPiecesTaken)\r\n            setIsGameActive(room.gameStatus)\r\n        })\r\n\r\n        socket.current.on('noRoomFound', () => {\r\n            // if the room id doesn't exist on server, redirect to home page\r\n            history.push('/')\r\n        })\r\n\r\n        socket.current.on('usernameCreated', newUser => {\r\n            if (newUser) {\r\n                // hide the modal\r\n                setShowModal(!showModal)\r\n                // update hooks for user's username\r\n                setUsername(newUser.username)\r\n                // assign team and username to hooks based on team color\r\n                if (newUser.color === 'white') {\r\n                    setTeam('white')\r\n                    setWhiteUsername(newUser.username)\r\n                } else if (newUser.color === 'black') {\r\n                    setTeam('black')\r\n                    setBlackUsername(newUser.username)\r\n                } else {\r\n                    setTeam('watcher')\r\n                    console.log('setting watchers to ', [...watchers, newUser.username])\r\n                    setWatchers([...watchersRef.current, newUser.username])\r\n                }\r\n                // if there is a user in both the white and black spot, update overlay text for game to start\r\n                if (whiteUsernameRef.current && blackUsernameRef.current) {\r\n                    setGamePendingHeading('Game Ready to Begin')\r\n                    // setGamePendingButtonText(\"Start Game\")\r\n                }\r\n            }\r\n        })\r\n\r\n        socket.current.on('usernameTaken', () => {\r\n            setUsernameHelpText('Username Taken')\r\n        })\r\n\r\n        socket.current.on('newPlayerJoined', user => {\r\n            // add new user's username to state\r\n            if (user.color === 'white') {\r\n                setWhiteUsername(user.username)\r\n            } else if (user.color === 'black') {\r\n                setBlackUsername(user.username)\r\n            } else {\r\n                console.log('new user joined, watchers: ', [...watchers, user.username])\r\n                setWatchers([...watchersRef.current, user.username])\r\n            }\r\n            console.log(gamePendingHeadingRef.current)\r\n            // if game is waiting on a second user to start, update display to let user start the game\r\n            if (gamePendingHeadingRef.current === 'Waiting for Second Player') {\r\n                setGamePendingHeading(\"Game Ready to Begin\")\r\n                setGamePendingButtonText(\"Start Game\")\r\n            } else if (gamePendingHeadingRef.current === 'User Left, Waiting for New Player') {\r\n                // if user left and game was waiting for a new user, allow game to resume\r\n                setGamePendingHeading('New User Joined')\r\n                setGamePendingButtonText(\"Resume Game\")\r\n            }\r\n        })\r\n\r\n        socket.current.on('startGame', team => {\r\n            // if no team is up, game has not yet started and can be set to white\r\n            if (teamUpRef.current === 'none'){\r\n                console.log('team should be updated')\r\n                setTeamUp(team)\r\n            }\r\n            // remove text from game pending button\r\n            setGamePendingButtonText('')\r\n            setIsGameActive(true)\r\n            gameHasStarted.current = true\r\n        })\r\n\r\n        socket.current.on('gameOver', winningTeam => {\r\n            // capitalize color of winning team\r\n            const teamCapitalized = winningTeam.charAt(0).toUpperCase() + winningTeam.slice(1)\r\n            // stop game\r\n            setGamePendingHeading(teamCapitalized + ' Wins')\r\n            setGamePendingButtonText('Start New Game')\r\n            setIsGameActive(false)\r\n        })\r\n\r\n        socket.current.on('gameIsDraw', () => {\r\n            // when the game is a draw, end the game and let the user restart the game\r\n            setIsGameActive(false)\r\n            setGamePendingHeading('Game is a Draw')\r\n            setGamePendingButtonText('Start New Game')\r\n        })\r\n\r\n        socket.current.on('resetGame', () => {\r\n            // reset all states and refs\r\n            setWhitePiecesTaken([])\r\n            setBlackPiecesTaken([])\r\n            setTeamUp('white')\r\n            setIsGameActive(true)\r\n        })\r\n\r\n        socket.current.on('resumeGame', () => {\r\n            // when game is resumed, game status just needs to be updated\r\n            setIsGameActive(true)\r\n        })\r\n\r\n        socket.current.on('userLeft', user => {\r\n            const { team, username } = user\r\n            console.log('user left', user)\r\n            // remove username of player that left and stop the game\r\n            if (team === 'white') {\r\n                setWhiteUsername('')\r\n                setIsGameActive(false)\r\n                if (gameHasStarted.current) setGamePendingHeading('User Left, Waiting for New Player')\r\n                else setGamePendingHeading('Waiting for Second Player')\r\n            } else if (team === 'black') {\r\n                setBlackUsername('')\r\n                setIsGameActive(false)\r\n                if (gameHasStarted.current) setGamePendingHeading('User Left, Waiting for New Player')\r\n                else setGamePendingHeading('Waiting for Second Player')\r\n            } else {\r\n                setWatchers(watchersRef.current.filter(watcher => watcher !== username))\r\n            }\r\n        })\r\n\r\n        // when user has left but a spectator is taking over for them\r\n        socket.current.on('userTakingOver', user => {\r\n            // update game status to active\r\n            setIsGameActive(true)\r\n            console.log('user taking over: ', user)\r\n            // assign user's username to appropriate state\r\n            if (user.team === 'white') {\r\n                setWhiteUsername(user.username)\r\n            } else if (user.team === 'black') {\r\n                setBlackUsername(user.username)\r\n            }\r\n            // if you are the user taking over, update your team\r\n            if (usernameRef.current === user.username) {\r\n                setTeam(user.team)\r\n            }\r\n            // remove user from array of watchers in state\r\n            setWatchers(watchersRef.current.filter(watcher => watcher !== user.username))\r\n        })\r\n\r\n        socket.current.on('userResigned', user => {\r\n            console.log(user)\r\n            const teamCapitalized = user.team.charAt(0).toUpperCase() + user.team.slice(1)\r\n            const winningTeam = user.team === 'white' ? 'Black' : 'White'\r\n            // end game and show which team won\r\n            setIsGameActive(false)\r\n            setGamePendingHeading(`${teamCapitalized} Resigned, ${winningTeam} Wins`)\r\n            setGamePendingButtonText('Start New Game')\r\n        })\r\n\r\n        socket.current.on('playerSpectatorTrade', players => {\r\n            const { user, spectator } = players\r\n            // remove spectator from list of spectators and add in player\r\n            const newSpectators = watchersRef.current.filter(watcher => watcher !== spectator)\r\n            newSpectators.push(user.username)\r\n            setWatchers(newSpectators)\r\n\r\n            // based on the player's team, switch their spot with the spectator\r\n            if (user.team === 'white') {\r\n                setWhiteUsername(spectator)\r\n            } else if (user.team === 'black') {\r\n                setBlackUsername(spectator)\r\n            }\r\n\r\n            // if the current user is the spectator or player, update their team\r\n            if (user.username === usernameRef.current) {\r\n                setTeam('watcher')\r\n            } else if (spectator === usernameRef.current) {\r\n                setTeam(user.team)\r\n            }\r\n        })\r\n\r\n        // tell the server when a player is leaving the page\r\n        window.onbeforeunload = () => {\r\n            socket.current.emit('leaveGame', {username: usernameRef.current, team: teamRef.current})\r\n        }\r\n    }\r\n\r\n    // on load, connect to the socket.io server\r\n    useEffect(() => {\r\n        setSocket(socketIOClient(ENDPOINT))\r\n    }, [])\r\n\r\n    // handles closing of the modal to create a username\r\n    const handleModalClose = () => {\r\n        setShowModal(!showModal)\r\n    }\r\n\r\n    const handleModalInputChange = (event) => {\r\n        const value = event.target.value\r\n        setUsername(value)\r\n    }\r\n\r\n    const attemptUsernameCreate = () => {\r\n        setUsernameHelpText('')\r\n\r\n        socket.current.emit('createUsername', usernameRef.current)\r\n    }\r\n\r\n    const updatePiecesTaken = piece => {\r\n        // based on the pieces color, add that piece to it's appropriate array\r\n        if (piece.color === 'white') {\r\n            setWhitePiecesTaken([...whitePiecesTakenRef.current, piece.pieceType])\r\n        } else if (piece.color === 'black') {\r\n            setBlackPiecesTaken([...blackPiecesTakenRef.current, piece.pieceType])\r\n        }\r\n    }\r\n\r\n    const handleOverlayButtonClick = event => {\r\n        // based on the buttons text, execute the appropriate code\r\n        const btnText = event.target.innerText\r\n        console.log(btnText)\r\n        if (btnText === 'Start Game') {\r\n            socket.current.emit('beginGame')\r\n        } else if (btnText === 'Resume Game') {\r\n            // if game is to be resumed, update the game status\r\n            setIsGameActive(true)\r\n            setGamePendingButtonText('')\r\n            socket.current.emit('resumeGame')\r\n        } else if (btnText === 'Start New Game') {\r\n            socket.current.emit('startNewGame')\r\n        }\r\n    }\r\n\r\n    const toggleMobileMenu = () => {\r\n        setShowMobileAside(!showMobileAside)\r\n    }\r\n\r\n    const handleLeaveGame = () => {\r\n        // tell server you are leaving the game\r\n        socket.current.emit('leaveGame', teamRef.current)\r\n        // redirect back to home page\r\n        history.push('/')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <GameHeader \r\n                toggleMobileMenu={toggleMobileMenu}\r\n                handleLeaveGame={handleLeaveGame}\r\n            />\r\n            <div className='content-wrapper'>\r\n                <div className='game-main-content bg-dark'>\r\n                    <GameBoard \r\n                        roomId={room}\r\n                        teamRef={teamRef}\r\n                        teamState={teamState} \r\n                        socket={socket} \r\n                        usernameState={usernameState} \r\n                        usernameRef={usernameRef} \r\n                        teamUpRef={teamUpRef}\r\n                        teamUpState={teamUpState} \r\n                        setTeamUp={setTeamUp} \r\n                        isSocketConnected={isSocketConnected}\r\n                        isGameActiveRef={isGameActiveRef}\r\n                        isGameActiveState={isGameActiveState}\r\n                        updatePiecesTaken={updatePiecesTaken}\r\n                        gamePendingHeading={gamePendingHeading}\r\n                        setGamePendingHeading={setGamePendingHeading}\r\n                        gamePendingButtonText={gamePendingButtonText}\r\n                        setGamePendingButtonText={setGamePendingButtonText}\r\n                        handleOverlayButtonClick={handleOverlayButtonClick}\r\n                    />\r\n                </div>\r\n                <div className={`game-aside-content${showMobileAside ? ' show' : ''}`}>\r\n                    <PlayersAside \r\n                        roomId={room}\r\n                        teamRef={teamRef} \r\n                        teamState={teamState}\r\n                        whitePiecesTakenRef={whitePiecesTakenRef} \r\n                        whitePiecesTakenState={whitePiecesTakenState} \r\n                        blackPiecesTakenRef={blackPiecesTakenRef} \r\n                        blackPiecesTakenState={blackPiecesTakenState} \r\n                        whiteUsername={whiteUsername}\r\n                        blackUsername={blackUsername}\r\n                        usernameRef={usernameRef}\r\n                        usernameState={usernameState}\r\n                        watchers={watchers}\r\n                        socket={socket}\r\n                        isSocketConnected={isSocketConnected}\r\n                        toggleMobileMenu={toggleMobileMenu}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <Modal\r\n                show={showModal}\r\n                onHide={handleModalClose}\r\n                backdrop=\"static\"\r\n                keyboard={false}\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>Create a Username</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <input type='text' className='form-control' value={usernameState} placeholder='Username' onChange={handleModalInputChange} />\r\n                    <p className='username-help'>{usernameHelpText}</p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" onClick={attemptUsernameCreate}>Let's Go</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\nimport './index.css'\r\n\r\nexport default function HomeHeader() {\r\n    return (\r\n        <header className='home-page-header'>\r\n            <h1><i class=\"fas fa-chess-king piece-icon\"></i> 1-2-3 Chess</h1>\r\n        </header>\r\n    )\r\n}\r\n","import React, { useEffect, useState, useRef } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport HomeHeader from '../../components/HomeHeader'\r\nimport socketIOClient from 'socket.io-client'\r\nimport './index.css'\r\n\r\n// endpoint for socket.io connection\r\nconst ENDPOINT = process.env.REACT_APP_SOCKET_ENDPOINT\r\n\r\nexport default function Home() {\r\n    let history = useHistory();\r\n\r\n    const [isCreatingRoom, setIsCreatingRoom] = useState(false)\r\n\r\n    const socket = useRef()\r\n    const setSocket = data => {\r\n        socket.current = data\r\n\r\n        // when socket is defined, create listeners\r\n        socket.current.on('connect', () => {\r\n            console.log('connected')\r\n        })\r\n\r\n        socket.current.on('newRoomCreated', room => {\r\n            console.log('created room ' + room)\r\n            setIsCreatingRoom(false)\r\n            // redirect to game room with room's id\r\n            history.push('/game/' + room)\r\n        })\r\n\r\n        socket.current.on('allowRoomJoin', room => {\r\n            // redirect to the game with the given room id\r\n            history.push('/game/' + room)\r\n        })\r\n    }\r\n\r\n    // on load, connect to socket.io server\r\n    useEffect(() => {\r\n        setSocket(socketIOClient(ENDPOINT))\r\n    }, [])\r\n\r\n    const handleNewRoomCreate = () => {\r\n        setIsCreatingRoom(true)\r\n        // tell socket.io server to make a new room for the user\r\n        socket.current.emit('createNewRoom')\r\n    }\r\n\r\n    const handleAttemptRoomJoin = (event) => {\r\n        event.preventDefault();\r\n\r\n        // roomid from input field\r\n        const roomId = event.target.children[0].value\r\n\r\n        // tell socket.io server to check for a room with the given id\r\n        socket.current.emit('joinExistingRoom', roomId)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='home-bg-white'></div>\r\n            <HomeHeader />\r\n            <div className='home-bg-div'></div>\r\n            <div className='home-content-wrapper'>\r\n                <div className='new-room-wrapper'>\r\n                    <h2>Create New Room</h2>\r\n                    <button className='btn btn-primary new-room-btn' onClick={handleNewRoomCreate}>Create New Room</button>\r\n                    <i className={`fad fa-spinner-third${isCreatingRoom ? ' show' : ''}`}></i>\r\n                </div>\r\n                <div className='join-room-wrapper'>\r\n                    <h2>Join Existing Room</h2>\r\n                    <form className='join-room-form' onSubmit={handleAttemptRoomJoin}>\r\n                        <input className='form-control' type='text' placeholder='Room ID'></input>\r\n                        <button className='btn btn-primary join-room-btn'>Join</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport logo from './logo.svg';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport './App.css';\r\nimport GameRoom from './pages/GameRoom'\r\nimport Home from './pages/Home'\r\nimport GameHeader from './components/GameHeader';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <Router basename={process.env.PUBLIC_URL}> */}\r\n      <Router basename={'/chess-game'}>\r\n        <Switch>\r\n          <Route exact path='/'>\r\n            <Home />\r\n          </Route>\r\n          <Route exact path='/game/:room'>\r\n            <GameRoom />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}